
Node2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800200  00000922  000009b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000922  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  00800202  00800202  000009b8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009b8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000009e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e0  00000000  00000000  00000a28  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000022de  00000000  00000000  00000c08  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000154d  00000000  00000000  00002ee6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000100b  00000000  00000000  00004433  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003e4  00000000  00000000  00005440  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b55  00000000  00000000  00005824  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b44  00000000  00000000  00006379  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000180  00000000  00000000  00006ebd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	c2 c0       	rjmp	.+388    	; 0x186 <__ctors_end>
   2:	00 00       	nop
   4:	df c0       	rjmp	.+446    	; 0x1c4 <__bad_interrupt>
   6:	00 00       	nop
   8:	dd c0       	rjmp	.+442    	; 0x1c4 <__bad_interrupt>
   a:	00 00       	nop
   c:	db c0       	rjmp	.+438    	; 0x1c4 <__bad_interrupt>
   e:	00 00       	nop
  10:	d9 c0       	rjmp	.+434    	; 0x1c4 <__bad_interrupt>
  12:	00 00       	nop
  14:	d7 c0       	rjmp	.+430    	; 0x1c4 <__bad_interrupt>
  16:	00 00       	nop
  18:	d5 c0       	rjmp	.+426    	; 0x1c4 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	d3 c0       	rjmp	.+422    	; 0x1c4 <__bad_interrupt>
  1e:	00 00       	nop
  20:	d1 c0       	rjmp	.+418    	; 0x1c4 <__bad_interrupt>
  22:	00 00       	nop
  24:	cf c0       	rjmp	.+414    	; 0x1c4 <__bad_interrupt>
  26:	00 00       	nop
  28:	cd c0       	rjmp	.+410    	; 0x1c4 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	cb c0       	rjmp	.+406    	; 0x1c4 <__bad_interrupt>
  2e:	00 00       	nop
  30:	c9 c0       	rjmp	.+402    	; 0x1c4 <__bad_interrupt>
  32:	00 00       	nop
  34:	c7 c0       	rjmp	.+398    	; 0x1c4 <__bad_interrupt>
  36:	00 00       	nop
  38:	c5 c0       	rjmp	.+394    	; 0x1c4 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	c3 c0       	rjmp	.+390    	; 0x1c4 <__bad_interrupt>
  3e:	00 00       	nop
  40:	c1 c0       	rjmp	.+386    	; 0x1c4 <__bad_interrupt>
  42:	00 00       	nop
  44:	bf c0       	rjmp	.+382    	; 0x1c4 <__bad_interrupt>
  46:	00 00       	nop
  48:	bd c0       	rjmp	.+378    	; 0x1c4 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	bb c0       	rjmp	.+374    	; 0x1c4 <__bad_interrupt>
  4e:	00 00       	nop
  50:	b9 c0       	rjmp	.+370    	; 0x1c4 <__bad_interrupt>
  52:	00 00       	nop
  54:	b7 c0       	rjmp	.+366    	; 0x1c4 <__bad_interrupt>
  56:	00 00       	nop
  58:	b5 c0       	rjmp	.+362    	; 0x1c4 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	b3 c0       	rjmp	.+358    	; 0x1c4 <__bad_interrupt>
  5e:	00 00       	nop
  60:	b1 c0       	rjmp	.+354    	; 0x1c4 <__bad_interrupt>
  62:	00 00       	nop
  64:	af c0       	rjmp	.+350    	; 0x1c4 <__bad_interrupt>
  66:	00 00       	nop
  68:	ad c0       	rjmp	.+346    	; 0x1c4 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	ab c0       	rjmp	.+342    	; 0x1c4 <__bad_interrupt>
  6e:	00 00       	nop
  70:	a9 c0       	rjmp	.+338    	; 0x1c4 <__bad_interrupt>
  72:	00 00       	nop
  74:	a7 c0       	rjmp	.+334    	; 0x1c4 <__bad_interrupt>
  76:	00 00       	nop
  78:	a5 c0       	rjmp	.+330    	; 0x1c4 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	a3 c0       	rjmp	.+326    	; 0x1c4 <__bad_interrupt>
  7e:	00 00       	nop
  80:	a1 c0       	rjmp	.+322    	; 0x1c4 <__bad_interrupt>
  82:	00 00       	nop
  84:	9f c0       	rjmp	.+318    	; 0x1c4 <__bad_interrupt>
  86:	00 00       	nop
  88:	9d c0       	rjmp	.+314    	; 0x1c4 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	9b c0       	rjmp	.+310    	; 0x1c4 <__bad_interrupt>
  8e:	00 00       	nop
  90:	99 c0       	rjmp	.+306    	; 0x1c4 <__bad_interrupt>
  92:	00 00       	nop
  94:	97 c0       	rjmp	.+302    	; 0x1c4 <__bad_interrupt>
  96:	00 00       	nop
  98:	95 c0       	rjmp	.+298    	; 0x1c4 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	f6 c1       	rjmp	.+1004   	; 0x48a <__vector_39>
  9e:	00 00       	nop
  a0:	91 c0       	rjmp	.+290    	; 0x1c4 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	8f c0       	rjmp	.+286    	; 0x1c4 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	8d c0       	rjmp	.+282    	; 0x1c4 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	8b c0       	rjmp	.+278    	; 0x1c4 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	89 c0       	rjmp	.+274    	; 0x1c4 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	87 c0       	rjmp	.+270    	; 0x1c4 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	85 c0       	rjmp	.+266    	; 0x1c4 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	83 c0       	rjmp	.+262    	; 0x1c4 <__bad_interrupt>
  be:	00 00       	nop
  c0:	81 c0       	rjmp	.+258    	; 0x1c4 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	7f c0       	rjmp	.+254    	; 0x1c4 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	7d c0       	rjmp	.+250    	; 0x1c4 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	7b c0       	rjmp	.+246    	; 0x1c4 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	79 c0       	rjmp	.+242    	; 0x1c4 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	77 c0       	rjmp	.+238    	; 0x1c4 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	75 c0       	rjmp	.+234    	; 0x1c4 <__bad_interrupt>
  da:	00 00       	nop
  dc:	73 c0       	rjmp	.+230    	; 0x1c4 <__bad_interrupt>
  de:	00 00       	nop
  e0:	71 c0       	rjmp	.+226    	; 0x1c4 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	63 02       	muls	r22, r19
  e6:	b5 02       	muls	r27, r21
  e8:	b5 02       	muls	r27, r21
  ea:	b5 02       	muls	r27, r21
  ec:	b5 02       	muls	r27, r21
  ee:	b5 02       	muls	r27, r21
  f0:	b5 02       	muls	r27, r21
  f2:	b5 02       	muls	r27, r21
  f4:	63 02       	muls	r22, r19
  f6:	b5 02       	muls	r27, r21
  f8:	b5 02       	muls	r27, r21
  fa:	b5 02       	muls	r27, r21
  fc:	b5 02       	muls	r27, r21
  fe:	b5 02       	muls	r27, r21
 100:	b5 02       	muls	r27, r21
 102:	b5 02       	muls	r27, r21
 104:	65 02       	muls	r22, r21
 106:	b5 02       	muls	r27, r21
 108:	b5 02       	muls	r27, r21
 10a:	b5 02       	muls	r27, r21
 10c:	b5 02       	muls	r27, r21
 10e:	b5 02       	muls	r27, r21
 110:	b5 02       	muls	r27, r21
 112:	b5 02       	muls	r27, r21
 114:	b5 02       	muls	r27, r21
 116:	b5 02       	muls	r27, r21
 118:	b5 02       	muls	r27, r21
 11a:	b5 02       	muls	r27, r21
 11c:	b5 02       	muls	r27, r21
 11e:	b5 02       	muls	r27, r21
 120:	b5 02       	muls	r27, r21
 122:	b5 02       	muls	r27, r21
 124:	65 02       	muls	r22, r21
 126:	b5 02       	muls	r27, r21
 128:	b5 02       	muls	r27, r21
 12a:	b5 02       	muls	r27, r21
 12c:	b5 02       	muls	r27, r21
 12e:	b5 02       	muls	r27, r21
 130:	b5 02       	muls	r27, r21
 132:	b5 02       	muls	r27, r21
 134:	b5 02       	muls	r27, r21
 136:	b5 02       	muls	r27, r21
 138:	b5 02       	muls	r27, r21
 13a:	b5 02       	muls	r27, r21
 13c:	b5 02       	muls	r27, r21
 13e:	b5 02       	muls	r27, r21
 140:	b5 02       	muls	r27, r21
 142:	b5 02       	muls	r27, r21
 144:	b1 02       	muls	r27, r17
 146:	b5 02       	muls	r27, r21
 148:	b5 02       	muls	r27, r21
 14a:	b5 02       	muls	r27, r21
 14c:	b5 02       	muls	r27, r21
 14e:	b5 02       	muls	r27, r21
 150:	b5 02       	muls	r27, r21
 152:	b5 02       	muls	r27, r21
 154:	8e 02       	muls	r24, r30
 156:	b5 02       	muls	r27, r21
 158:	b5 02       	muls	r27, r21
 15a:	b5 02       	muls	r27, r21
 15c:	b5 02       	muls	r27, r21
 15e:	b5 02       	muls	r27, r21
 160:	b5 02       	muls	r27, r21
 162:	b5 02       	muls	r27, r21
 164:	b5 02       	muls	r27, r21
 166:	b5 02       	muls	r27, r21
 168:	b5 02       	muls	r27, r21
 16a:	b5 02       	muls	r27, r21
 16c:	b5 02       	muls	r27, r21
 16e:	b5 02       	muls	r27, r21
 170:	b5 02       	muls	r27, r21
 172:	b5 02       	muls	r27, r21
 174:	82 02       	muls	r24, r18
 176:	b5 02       	muls	r27, r21
 178:	b5 02       	muls	r27, r21
 17a:	b5 02       	muls	r27, r21
 17c:	b5 02       	muls	r27, r21
 17e:	b5 02       	muls	r27, r21
 180:	b5 02       	muls	r27, r21
 182:	b5 02       	muls	r27, r21
 184:	a0 02       	muls	r26, r16

00000186 <__ctors_end>:
 186:	11 24       	eor	r1, r1
 188:	1f be       	out	0x3f, r1	; 63
 18a:	cf ef       	ldi	r28, 0xFF	; 255
 18c:	d1 e2       	ldi	r29, 0x21	; 33
 18e:	de bf       	out	0x3e, r29	; 62
 190:	cd bf       	out	0x3d, r28	; 61
 192:	00 e0       	ldi	r16, 0x00	; 0
 194:	0c bf       	out	0x3c, r16	; 60

00000196 <__do_copy_data>:
 196:	12 e0       	ldi	r17, 0x02	; 2
 198:	a0 e0       	ldi	r26, 0x00	; 0
 19a:	b2 e0       	ldi	r27, 0x02	; 2
 19c:	e2 e2       	ldi	r30, 0x22	; 34
 19e:	f9 e0       	ldi	r31, 0x09	; 9
 1a0:	00 e0       	ldi	r16, 0x00	; 0
 1a2:	0b bf       	out	0x3b, r16	; 59
 1a4:	02 c0       	rjmp	.+4      	; 0x1aa <__do_copy_data+0x14>
 1a6:	07 90       	elpm	r0, Z+
 1a8:	0d 92       	st	X+, r0
 1aa:	a2 30       	cpi	r26, 0x02	; 2
 1ac:	b1 07       	cpc	r27, r17
 1ae:	d9 f7       	brne	.-10     	; 0x1a6 <__do_copy_data+0x10>

000001b0 <__do_clear_bss>:
 1b0:	22 e0       	ldi	r18, 0x02	; 2
 1b2:	a2 e0       	ldi	r26, 0x02	; 2
 1b4:	b2 e0       	ldi	r27, 0x02	; 2
 1b6:	01 c0       	rjmp	.+2      	; 0x1ba <.do_clear_bss_start>

000001b8 <.do_clear_bss_loop>:
 1b8:	1d 92       	st	X+, r1

000001ba <.do_clear_bss_start>:
 1ba:	af 30       	cpi	r26, 0x0F	; 15
 1bc:	b2 07       	cpc	r27, r18
 1be:	e1 f7       	brne	.-8      	; 0x1b8 <.do_clear_bss_loop>
 1c0:	df d2       	rcall	.+1470   	; 0x780 <main>
 1c2:	ad c3       	rjmp	.+1882   	; 0x91e <_exit>

000001c4 <__bad_interrupt>:
 1c4:	1d cf       	rjmp	.-454    	; 0x0 <__vectors>

000001c6 <adc_init>:
		PORTF &= ~(1 << channel_number);
	} else {
		DIDR1 |= (1 << (channel_number - 8));
		PORTK |= ~(1 << (channel_number - 8));
	}
}
 1c6:	80 e4       	ldi	r24, 0x40	; 64
 1c8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
 1cc:	88 e0       	ldi	r24, 0x08	; 8
 1ce:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
 1d2:	80 e8       	ldi	r24, 0x80	; 128
 1d4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
 1d8:	08 95       	ret

000001da <adc_read>:

uint16_t adc_read(AdcCh_t channel) {
	//_set_channel(channel);

	ADCSRA |= (1 << ADSC);
 1da:	ea e7       	ldi	r30, 0x7A	; 122
 1dc:	f0 e0       	ldi	r31, 0x00	; 0
 1de:	80 81       	ld	r24, Z
 1e0:	80 64       	ori	r24, 0x40	; 64
 1e2:	80 83       	st	Z, r24

	// Wait for finished conversion
	while (!(ADCSRA & (1 << ADIF))) { };
 1e4:	80 81       	ld	r24, Z
 1e6:	84 ff       	sbrs	r24, 4
 1e8:	fd cf       	rjmp	.-6      	; 0x1e4 <adc_read+0xa>
	
	return ADC;
 1ea:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
 1ee:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
}
 1f2:	08 95       	ret

000001f4 <can_init>:
#include "can.h"
#include "mcp2515.h"
#include <avr/io.h>


void can_init() {
 1f4:	d0 d1       	rcall	.+928    	; 0x596 <mcp_reset>
 1f6:	60 e8       	ldi	r22, 0x80	; 128
 1f8:	8f e0       	ldi	r24, 0x0F	; 15
 1fa:	f6 d1       	rcall	.+1004   	; 0x5e8 <mcp_write>
 1fc:	60 e2       	ldi	r22, 0x20	; 32
 1fe:	8a e2       	ldi	r24, 0x2A	; 42
 200:	f3 d1       	rcall	.+998    	; 0x5e8 <mcp_write>
 202:	62 e9       	ldi	r22, 0x92	; 146
 204:	89 e2       	ldi	r24, 0x29	; 41
 206:	f0 d1       	rcall	.+992    	; 0x5e8 <mcp_write>
 208:	62 ec       	ldi	r22, 0xC2	; 194
 20a:	88 e2       	ldi	r24, 0x28	; 40
 20c:	ed d1       	rcall	.+986    	; 0x5e8 <mcp_write>
 20e:	60 e0       	ldi	r22, 0x00	; 0
 210:	8b e2       	ldi	r24, 0x2B	; 43
 212:	ea d1       	rcall	.+980    	; 0x5e8 <mcp_write>
 214:	60 e0       	ldi	r22, 0x00	; 0
 216:	8c e2       	ldi	r24, 0x2C	; 44
 218:	e7 d1       	rcall	.+974    	; 0x5e8 <mcp_write>
 21a:	60 e0       	ldi	r22, 0x00	; 0
 21c:	8d e2       	ldi	r24, 0x2D	; 45
 21e:	e4 d1       	rcall	.+968    	; 0x5e8 <mcp_write>
 220:	60 e0       	ldi	r22, 0x00	; 0
 222:	8c e0       	ldi	r24, 0x0C	; 12
 224:	e1 d1       	rcall	.+962    	; 0x5e8 <mcp_write>
 226:	60 e0       	ldi	r22, 0x00	; 0
 228:	8d e0       	ldi	r24, 0x0D	; 13
 22a:	de d1       	rcall	.+956    	; 0x5e8 <mcp_write>
 22c:	60 e0       	ldi	r22, 0x00	; 0
 22e:	80 e6       	ldi	r24, 0x60	; 96
 230:	db d1       	rcall	.+950    	; 0x5e8 <mcp_write>
 232:	60 e0       	ldi	r22, 0x00	; 0
 234:	80 e7       	ldi	r24, 0x70	; 112
 236:	d8 d1       	rcall	.+944    	; 0x5e8 <mcp_write>
 238:	60 e0       	ldi	r22, 0x00	; 0
 23a:	80 e2       	ldi	r24, 0x20	; 32
 23c:	d5 d1       	rcall	.+938    	; 0x5e8 <mcp_write>
 23e:	60 e0       	ldi	r22, 0x00	; 0
 240:	81 e2       	ldi	r24, 0x21	; 33
 242:	d2 d1       	rcall	.+932    	; 0x5e8 <mcp_write>
 244:	60 e0       	ldi	r22, 0x00	; 0
 246:	82 e2       	ldi	r24, 0x22	; 34
 248:	cf d1       	rcall	.+926    	; 0x5e8 <mcp_write>
 24a:	60 e0       	ldi	r22, 0x00	; 0
 24c:	83 e2       	ldi	r24, 0x23	; 35
 24e:	cc d1       	rcall	.+920    	; 0x5e8 <mcp_write>
 250:	64 e0       	ldi	r22, 0x04	; 4
 252:	8f e0       	ldi	r24, 0x0F	; 15
 254:	c9 c1       	rjmp	.+914    	; 0x5e8 <mcp_write>
 256:	08 95       	ret

00000258 <can_tx_message>:
 258:	cf 92       	push	r12
 25a:	df 92       	push	r13
 25c:	ef 92       	push	r14
 25e:	ff 92       	push	r15
 260:	1f 93       	push	r17
 262:	cf 93       	push	r28
 264:	df 93       	push	r29
 266:	6c 01       	movw	r12, r24
 268:	63 e0       	ldi	r22, 0x03	; 3
 26a:	80 e3       	ldi	r24, 0x30	; 48
 26c:	bd d1       	rcall	.+890    	; 0x5e8 <mcp_write>
 26e:	f6 01       	movw	r30, r12
 270:	60 81       	ld	r22, Z
 272:	71 81       	ldd	r23, Z+1	; 0x01
 274:	76 95       	lsr	r23
 276:	67 95       	ror	r22
 278:	76 95       	lsr	r23
 27a:	67 95       	ror	r22
 27c:	76 95       	lsr	r23
 27e:	67 95       	ror	r22
 280:	81 e3       	ldi	r24, 0x31	; 49
 282:	b2 d1       	rcall	.+868    	; 0x5e8 <mcp_write>
 284:	f6 01       	movw	r30, r12
 286:	60 81       	ld	r22, Z
 288:	62 95       	swap	r22
 28a:	66 0f       	add	r22, r22
 28c:	60 7e       	andi	r22, 0xE0	; 224
 28e:	82 e3       	ldi	r24, 0x32	; 50
 290:	ab d1       	rcall	.+854    	; 0x5e8 <mcp_write>
 292:	f6 01       	movw	r30, r12
 294:	62 81       	ldd	r22, Z+2	; 0x02
 296:	85 e3       	ldi	r24, 0x35	; 53
 298:	a7 d1       	rcall	.+846    	; 0x5e8 <mcp_write>
 29a:	f6 01       	movw	r30, r12
 29c:	82 81       	ldd	r24, Z+2	; 0x02
 29e:	88 23       	and	r24, r24
 2a0:	a1 f0       	breq	.+40     	; 0x2ca <can_tx_message+0x72>
 2a2:	76 01       	movw	r14, r12
 2a4:	f3 e0       	ldi	r31, 0x03	; 3
 2a6:	ef 0e       	add	r14, r31
 2a8:	f1 1c       	adc	r15, r1
 2aa:	16 e3       	ldi	r17, 0x36	; 54
 2ac:	c0 e0       	ldi	r28, 0x00	; 0
 2ae:	d0 e0       	ldi	r29, 0x00	; 0
 2b0:	f7 01       	movw	r30, r14
 2b2:	61 91       	ld	r22, Z+
 2b4:	7f 01       	movw	r14, r30
 2b6:	81 2f       	mov	r24, r17
 2b8:	97 d1       	rcall	.+814    	; 0x5e8 <mcp_write>
 2ba:	21 96       	adiw	r28, 0x01	; 1
 2bc:	1f 5f       	subi	r17, 0xFF	; 255
 2be:	f6 01       	movw	r30, r12
 2c0:	82 81       	ldd	r24, Z+2	; 0x02
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	c8 17       	cp	r28, r24
 2c6:	d9 07       	cpc	r29, r25
 2c8:	9c f3       	brlt	.-26     	; 0x2b0 <can_tx_message+0x58>
 2ca:	40 e0       	ldi	r20, 0x00	; 0
 2cc:	60 e0       	ldi	r22, 0x00	; 0
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	ba d1       	rcall	.+884    	; 0x646 <mcp_request_to_send>
 2d2:	df 91       	pop	r29
 2d4:	cf 91       	pop	r28
 2d6:	1f 91       	pop	r17
 2d8:	ff 90       	pop	r15
 2da:	ef 90       	pop	r14
 2dc:	df 90       	pop	r13
 2de:	cf 90       	pop	r12
 2e0:	08 95       	ret

000002e2 <can_rx_message>:
 2e2:	cf 92       	push	r12
 2e4:	df 92       	push	r13
 2e6:	ef 92       	push	r14
 2e8:	ff 92       	push	r15
 2ea:	1f 93       	push	r17
 2ec:	cf 93       	push	r28
 2ee:	df 93       	push	r29
 2f0:	7c 01       	movw	r14, r24
 2f2:	c3 d1       	rcall	.+902    	; 0x67a <mcp_read_status>
 2f4:	80 ff       	sbrs	r24, 0
 2f6:	32 c0       	rjmp	.+100    	; 0x35c <can_rx_message+0x7a>
 2f8:	81 e6       	ldi	r24, 0x61	; 97
 2fa:	5f d1       	rcall	.+702    	; 0x5ba <mcp_read>
 2fc:	f7 01       	movw	r30, r14
 2fe:	10 82       	st	Z, r1
 300:	81 83       	std	Z+1, r24	; 0x01
 302:	82 e6       	ldi	r24, 0x62	; 98
 304:	5a d1       	rcall	.+692    	; 0x5ba <mcp_read>
 306:	f7 01       	movw	r30, r14
 308:	20 81       	ld	r18, Z
 30a:	31 81       	ldd	r19, Z+1	; 0x01
 30c:	28 2b       	or	r18, r24
 30e:	31 83       	std	Z+1, r19	; 0x01
 310:	20 83       	st	Z, r18
 312:	85 e6       	ldi	r24, 0x65	; 101
 314:	52 d1       	rcall	.+676    	; 0x5ba <mcp_read>
 316:	f7 01       	movw	r30, r14
 318:	82 83       	std	Z+2, r24	; 0x02
 31a:	89 30       	cpi	r24, 0x09	; 9
 31c:	18 f0       	brcs	.+6      	; 0x324 <can_rx_message+0x42>
 31e:	88 e0       	ldi	r24, 0x08	; 8
 320:	82 83       	std	Z+2, r24	; 0x02
 322:	02 c0       	rjmp	.+4      	; 0x328 <can_rx_message+0x46>
 324:	88 23       	and	r24, r24
 326:	a1 f0       	breq	.+40     	; 0x350 <can_rx_message+0x6e>
 328:	67 01       	movw	r12, r14
 32a:	f3 e0       	ldi	r31, 0x03	; 3
 32c:	cf 0e       	add	r12, r31
 32e:	d1 1c       	adc	r13, r1
 330:	16 e6       	ldi	r17, 0x66	; 102
 332:	c0 e0       	ldi	r28, 0x00	; 0
 334:	d0 e0       	ldi	r29, 0x00	; 0
 336:	81 2f       	mov	r24, r17
 338:	40 d1       	rcall	.+640    	; 0x5ba <mcp_read>
 33a:	f6 01       	movw	r30, r12
 33c:	81 93       	st	Z+, r24
 33e:	6f 01       	movw	r12, r30
 340:	21 96       	adiw	r28, 0x01	; 1
 342:	1f 5f       	subi	r17, 0xFF	; 255
 344:	f7 01       	movw	r30, r14
 346:	82 81       	ldd	r24, Z+2	; 0x02
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	c8 17       	cp	r28, r24
 34c:	d9 07       	cpc	r29, r25
 34e:	9c f3       	brlt	.-26     	; 0x336 <can_rx_message+0x54>
 350:	40 e0       	ldi	r20, 0x00	; 0
 352:	61 e0       	ldi	r22, 0x01	; 1
 354:	8c e2       	ldi	r24, 0x2C	; 44
 356:	5e d1       	rcall	.+700    	; 0x614 <mcp_modify_bit>
 358:	81 e0       	ldi	r24, 0x01	; 1
 35a:	01 c0       	rjmp	.+2      	; 0x35e <can_rx_message+0x7c>
 35c:	80 e0       	ldi	r24, 0x00	; 0
 35e:	df 91       	pop	r29
 360:	cf 91       	pop	r28
 362:	1f 91       	pop	r17
 364:	ff 90       	pop	r15
 366:	ef 90       	pop	r14
 368:	df 90       	pop	r13
 36a:	cf 90       	pop	r12
 36c:	08 95       	ret

0000036e <motor_disable>:
	motor_disable();
}


void motor_disable() {
	MOTOR_PORT &= ~(1 << EN_PIN);
 36e:	e2 e0       	ldi	r30, 0x02	; 2
 370:	f1 e0       	ldi	r31, 0x01	; 1
 372:	80 81       	ld	r24, Z
 374:	8f 7e       	andi	r24, 0xEF	; 239
 376:	80 83       	st	Z, r24
 378:	08 95       	ret

0000037a <motor_init>:

#define EN_PIN 4
#define DIR_PIN 1


void motor_init() {
 37a:	50 d0       	rcall	.+160    	; 0x41c <TWI_Master_Initialise>
 37c:	e1 e0       	ldi	r30, 0x01	; 1
 37e:	f1 e0       	ldi	r31, 0x01	; 1
 380:	80 81       	ld	r24, Z
 382:	80 61       	ori	r24, 0x10	; 16
 384:	80 83       	st	Z, r24
 386:	80 81       	ld	r24, Z
 388:	82 60       	ori	r24, 0x02	; 2
 38a:	80 83       	st	Z, r24
 38c:	f0 cf       	rjmp	.-32     	; 0x36e <motor_disable>
 38e:	08 95       	ret

00000390 <motor_enable>:
 390:	e2 e0       	ldi	r30, 0x02	; 2
 392:	f1 e0       	ldi	r31, 0x01	; 1
 394:	80 81       	ld	r24, Z
 396:	80 61       	ori	r24, 0x10	; 16
 398:	80 83       	st	Z, r24
 39a:	08 95       	ret

0000039c <motor_set>:
 39c:	cf 93       	push	r28
 39e:	df 93       	push	r29
 3a0:	cd b7       	in	r28, 0x3d	; 61
 3a2:	de b7       	in	r29, 0x3e	; 62
 3a4:	29 97       	sbiw	r28, 0x09	; 9
 3a6:	0f b6       	in	r0, 0x3f	; 63
 3a8:	f8 94       	cli
 3aa:	de bf       	out	0x3e, r29	; 62
 3ac:	0f be       	out	0x3f, r0	; 63
 3ae:	cd bf       	out	0x3d, r28	; 61
 3b0:	61 30       	cpi	r22, 0x01	; 1
 3b2:	31 f4       	brne	.+12     	; 0x3c0 <motor_set+0x24>
 3b4:	e2 e0       	ldi	r30, 0x02	; 2
 3b6:	f1 e0       	ldi	r31, 0x01	; 1
 3b8:	90 81       	ld	r25, Z
 3ba:	92 60       	ori	r25, 0x02	; 2
 3bc:	90 83       	st	Z, r25
 3be:	05 c0       	rjmp	.+10     	; 0x3ca <motor_set+0x2e>
 3c0:	e2 e0       	ldi	r30, 0x02	; 2
 3c2:	f1 e0       	ldi	r31, 0x01	; 1
 3c4:	90 81       	ld	r25, Z
 3c6:	9d 7f       	andi	r25, 0xFD	; 253
 3c8:	90 83       	st	Z, r25
 3ca:	90 e5       	ldi	r25, 0x50	; 80
 3cc:	99 83       	std	Y+1, r25	; 0x01
 3ce:	1a 82       	std	Y+2, r1	; 0x02
 3d0:	8b 83       	std	Y+3, r24	; 0x03
 3d2:	81 e0       	ldi	r24, 0x01	; 1
 3d4:	8c 83       	std	Y+4, r24	; 0x04
 3d6:	1d 82       	std	Y+5, r1	; 0x05
 3d8:	82 e0       	ldi	r24, 0x02	; 2
 3da:	8e 83       	std	Y+6, r24	; 0x06
 3dc:	1f 82       	std	Y+7, r1	; 0x07
 3de:	83 e0       	ldi	r24, 0x03	; 3
 3e0:	88 87       	std	Y+8, r24	; 0x08
 3e2:	19 86       	std	Y+9, r1	; 0x09
 3e4:	69 e0       	ldi	r22, 0x09	; 9
 3e6:	ce 01       	movw	r24, r28
 3e8:	01 96       	adiw	r24, 0x01	; 1
 3ea:	22 d0       	rcall	.+68     	; 0x430 <TWI_Start_Transceiver_With_Data>
 3ec:	29 96       	adiw	r28, 0x09	; 9
 3ee:	0f b6       	in	r0, 0x3f	; 63
 3f0:	f8 94       	cli
 3f2:	de bf       	out	0x3e, r29	; 62
 3f4:	0f be       	out	0x3f, r0	; 63
 3f6:	cd bf       	out	0x3d, r28	; 61
 3f8:	df 91       	pop	r29
 3fa:	cf 91       	pop	r28
 3fc:	08 95       	ret

000003fe <shooter_init>:
#define SHOOTER_PORT PORTF
#define SHOOTER_PIN 1


void shooter_init() {
	SHOOTER_DDR |= (1 << SHOOTER_PIN);
 3fe:	81 9a       	sbi	0x10, 1	; 16
	SHOOTER_PORT &= ~(1 << SHOOTER_PIN);
 400:	89 98       	cbi	0x11, 1	; 17
 402:	08 95       	ret

00000404 <shooter_shoot>:
}

void shooter_shoot() {
	SHOOTER_PORT |= (1 << SHOOTER_PIN);
 404:	89 9a       	sbi	0x11, 1	; 17
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 406:	2f e7       	ldi	r18, 0x7F	; 127
 408:	89 ea       	ldi	r24, 0xA9	; 169
 40a:	93 e0       	ldi	r25, 0x03	; 3
 40c:	21 50       	subi	r18, 0x01	; 1
 40e:	80 40       	sbci	r24, 0x00	; 0
 410:	90 40       	sbci	r25, 0x00	; 0
 412:	e1 f7       	brne	.-8      	; 0x40c <shooter_shoot+0x8>
 414:	00 c0       	rjmp	.+0      	; 0x416 <shooter_shoot+0x12>
 416:	00 00       	nop
	_delay_ms(SHOOTER_PULSE_DURATION_MS);
	SHOOTER_PORT &= ~(1 << SHOOTER_PIN);
 418:	89 98       	cbi	0x11, 1	; 17
 41a:	08 95       	ret

0000041c <TWI_Master_Initialise>:
    {
      msg[ i ] = TWI_buf[ i ];
    }
  }
  return( TWI_statusReg.lastTransOK );                                   
}
 41c:	8c e0       	ldi	r24, 0x0C	; 12
 41e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
 422:	8f ef       	ldi	r24, 0xFF	; 255
 424:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
 428:	84 e0       	ldi	r24, 0x04	; 4
 42a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
 42e:	08 95       	ret

00000430 <TWI_Start_Transceiver_With_Data>:
 430:	cf 93       	push	r28
 432:	df 93       	push	r29
 434:	ec 01       	movw	r28, r24
 436:	ec eb       	ldi	r30, 0xBC	; 188
 438:	f0 e0       	ldi	r31, 0x00	; 0
 43a:	90 81       	ld	r25, Z
 43c:	90 fd       	sbrc	r25, 0
 43e:	fd cf       	rjmp	.-6      	; 0x43a <TWI_Start_Transceiver_With_Data+0xa>
 440:	60 93 04 02 	sts	0x0204, r22	; 0x800204 <TWI_msgSize>
 444:	88 81       	ld	r24, Y
 446:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <TWI_buf>
 44a:	80 fd       	sbrc	r24, 0
 44c:	13 c0       	rjmp	.+38     	; 0x474 <TWI_Start_Transceiver_With_Data+0x44>
 44e:	62 30       	cpi	r22, 0x02	; 2
 450:	88 f0       	brcs	.+34     	; 0x474 <TWI_Start_Transceiver_With_Data+0x44>
 452:	fe 01       	movw	r30, r28
 454:	31 96       	adiw	r30, 0x01	; 1
 456:	a6 e0       	ldi	r26, 0x06	; 6
 458:	b2 e0       	ldi	r27, 0x02	; 2
 45a:	62 50       	subi	r22, 0x02	; 2
 45c:	26 2f       	mov	r18, r22
 45e:	30 e0       	ldi	r19, 0x00	; 0
 460:	2e 5f       	subi	r18, 0xFE	; 254
 462:	3f 4f       	sbci	r19, 0xFF	; 255
 464:	ce 01       	movw	r24, r28
 466:	82 0f       	add	r24, r18
 468:	93 1f       	adc	r25, r19
 46a:	21 91       	ld	r18, Z+
 46c:	2d 93       	st	X+, r18
 46e:	e8 17       	cp	r30, r24
 470:	f9 07       	cpc	r31, r25
 472:	d9 f7       	brne	.-10     	; 0x46a <TWI_Start_Transceiver_With_Data+0x3a>
 474:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <TWI_statusReg>
 478:	88 ef       	ldi	r24, 0xF8	; 248
 47a:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
 47e:	85 ea       	ldi	r24, 0xA5	; 165
 480:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
 484:	df 91       	pop	r29
 486:	cf 91       	pop	r28
 488:	08 95       	ret

0000048a <__vector_39>:
that is whenever a TWI event has occurred. This function should not be called directly from the main
application.
****************************************************************************/

ISR(TWI_vect)
{
 48a:	1f 92       	push	r1
 48c:	0f 92       	push	r0
 48e:	0f b6       	in	r0, 0x3f	; 63
 490:	0f 92       	push	r0
 492:	11 24       	eor	r1, r1
 494:	0b b6       	in	r0, 0x3b	; 59
 496:	0f 92       	push	r0
 498:	2f 93       	push	r18
 49a:	3f 93       	push	r19
 49c:	8f 93       	push	r24
 49e:	9f 93       	push	r25
 4a0:	af 93       	push	r26
 4a2:	bf 93       	push	r27
 4a4:	ef 93       	push	r30
 4a6:	ff 93       	push	r31
  static unsigned char TWI_bufPtr;
  
  switch (TWSR)
 4a8:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
 4ac:	8e 2f       	mov	r24, r30
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	fc 01       	movw	r30, r24
 4b2:	38 97       	sbiw	r30, 0x08	; 8
 4b4:	e1 35       	cpi	r30, 0x51	; 81
 4b6:	f1 05       	cpc	r31, r1
 4b8:	08 f0       	brcs	.+2      	; 0x4bc <__vector_39+0x32>
 4ba:	57 c0       	rjmp	.+174    	; 0x56a <__vector_39+0xe0>
 4bc:	88 27       	eor	r24, r24
 4be:	ee 58       	subi	r30, 0x8E	; 142
 4c0:	ff 4f       	sbci	r31, 0xFF	; 255
 4c2:	8f 4f       	sbci	r24, 0xFF	; 255
 4c4:	01 c2       	rjmp	.+1026   	; 0x8c8 <__tablejump2__>
  {
    case TWI_START:             // START has been transmitted  
    case TWI_REP_START:         // Repeated START has been transmitted
      TWI_bufPtr = 0;                                     // Set buffer pointer to the TWI Address location
 4c6:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <__data_end>
    case TWI_MTX_ADR_ACK:       // SLA+W has been tramsmitted and ACK received
    case TWI_MTX_DATA_ACK:      // Data byte has been tramsmitted and ACK received
      if (TWI_bufPtr < TWI_msgSize)
 4ca:	e0 91 02 02 	lds	r30, 0x0202	; 0x800202 <__data_end>
 4ce:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <TWI_msgSize>
 4d2:	e8 17       	cp	r30, r24
 4d4:	70 f4       	brcc	.+28     	; 0x4f2 <__vector_39+0x68>
      {
        TWDR = TWI_buf[TWI_bufPtr++];
 4d6:	81 e0       	ldi	r24, 0x01	; 1
 4d8:	8e 0f       	add	r24, r30
 4da:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <__data_end>
 4de:	f0 e0       	ldi	r31, 0x00	; 0
 4e0:	eb 5f       	subi	r30, 0xFB	; 251
 4e2:	fd 4f       	sbci	r31, 0xFD	; 253
 4e4:	80 81       	ld	r24, Z
 4e6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
        TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 4ea:	85 e8       	ldi	r24, 0x85	; 133
 4ec:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
 4f0:	43 c0       	rjmp	.+134    	; 0x578 <__vector_39+0xee>
               (1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interupt and clear the flag to send byte
               (0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           //
               (0<<TWWC);                                 //  
      }else                    // Send STOP after last byte
      {
        TWI_statusReg.lastTransOK = TRUE;                 // Set status bits to completed successfully. 
 4f2:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <TWI_statusReg>
 4f6:	81 60       	ori	r24, 0x01	; 1
 4f8:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <TWI_statusReg>
        TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 4fc:	84 e9       	ldi	r24, 0x94	; 148
 4fe:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
 502:	3a c0       	rjmp	.+116    	; 0x578 <__vector_39+0xee>
               (0<<TWEA)|(0<<TWSTA)|(1<<TWSTO)|           // Initiate a STOP condition.
               (0<<TWWC);                                 //
      }
      break;
    case TWI_MRX_DATA_ACK:      // Data byte has been received and ACK tramsmitted
      TWI_buf[TWI_bufPtr++] = TWDR;
 504:	e0 91 02 02 	lds	r30, 0x0202	; 0x800202 <__data_end>
 508:	81 e0       	ldi	r24, 0x01	; 1
 50a:	8e 0f       	add	r24, r30
 50c:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <__data_end>
 510:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
 514:	f0 e0       	ldi	r31, 0x00	; 0
 516:	eb 5f       	subi	r30, 0xFB	; 251
 518:	fd 4f       	sbci	r31, 0xFD	; 253
 51a:	80 83       	st	Z, r24
    case TWI_MRX_ADR_ACK:       // SLA+R has been tramsmitted and ACK received
      if (TWI_bufPtr < (TWI_msgSize-1) )                  // Detect the last byte to NACK it.
 51c:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__data_end>
 520:	30 e0       	ldi	r19, 0x00	; 0
 522:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <TWI_msgSize>
 526:	90 e0       	ldi	r25, 0x00	; 0
 528:	01 97       	sbiw	r24, 0x01	; 1
 52a:	28 17       	cp	r18, r24
 52c:	39 07       	cpc	r19, r25
 52e:	24 f4       	brge	.+8      	; 0x538 <__vector_39+0xae>
      {
        TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 530:	85 ec       	ldi	r24, 0xC5	; 197
 532:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
 536:	20 c0       	rjmp	.+64     	; 0x578 <__vector_39+0xee>
               (1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interupt and clear the flag to read next byte
               (1<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // Send ACK after reception
               (0<<TWWC);                                 //  
      }else                    // Send NACK after next reception
      {
        TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 538:	85 e8       	ldi	r24, 0x85	; 133
 53a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
 53e:	1c c0       	rjmp	.+56     	; 0x578 <__vector_39+0xee>
               (0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // Send NACK after reception
               (0<<TWWC);                                 // 
      }    
      break; 
    case TWI_MRX_DATA_NACK:     // Data byte has been received and NACK tramsmitted
      TWI_buf[TWI_bufPtr] = TWDR;
 540:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
 544:	e0 91 02 02 	lds	r30, 0x0202	; 0x800202 <__data_end>
 548:	f0 e0       	ldi	r31, 0x00	; 0
 54a:	eb 5f       	subi	r30, 0xFB	; 251
 54c:	fd 4f       	sbci	r31, 0xFD	; 253
 54e:	80 83       	st	Z, r24
      TWI_statusReg.lastTransOK = TRUE;                 // Set status bits to completed successfully. 
 550:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <TWI_statusReg>
 554:	81 60       	ori	r24, 0x01	; 1
 556:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <TWI_statusReg>
      TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 55a:	84 e9       	ldi	r24, 0x94	; 148
 55c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
             (0<<TWIE)|(1<<TWINT)|                      // Disable TWI Interrupt and clear the flag
             (0<<TWEA)|(0<<TWSTA)|(1<<TWSTO)|           // Initiate a STOP condition.
             (0<<TWWC);                                 //
      break;      
 560:	0b c0       	rjmp	.+22     	; 0x578 <__vector_39+0xee>
    case TWI_ARB_LOST:          // Arbitration lost
      TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 562:	85 ea       	ldi	r24, 0xA5	; 165
 564:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
             (1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interupt and clear the flag
             (0<<TWEA)|(1<<TWSTA)|(0<<TWSTO)|           // Initiate a (RE)START condition.
             (0<<TWWC);                                 //
      break;
 568:	07 c0       	rjmp	.+14     	; 0x578 <__vector_39+0xee>
    case TWI_MTX_ADR_NACK:      // SLA+W has been tramsmitted and NACK received
    case TWI_MRX_ADR_NACK:      // SLA+R has been tramsmitted and NACK received    
    case TWI_MTX_DATA_NACK:     // Data byte has been tramsmitted and NACK received
    case TWI_BUS_ERROR:         // Bus error due to an illegal START or STOP condition
    default:     
      TWI_state = TWSR;                                 // Store TWSR and automatically sets clears noErrors bit.
 56a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
 56e:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
                                                        // Reset TWI Interface
      TWCR = (1<<TWEN)|                                 // Enable TWI-interface and release TWI pins
 572:	84 e0       	ldi	r24, 0x04	; 4
 574:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
             (0<<TWIE)|(0<<TWINT)|                      // Disable Interupt
             (0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // No Signal requests
             (0<<TWWC);                                 //
  }
}
 578:	ff 91       	pop	r31
 57a:	ef 91       	pop	r30
 57c:	bf 91       	pop	r27
 57e:	af 91       	pop	r26
 580:	9f 91       	pop	r25
 582:	8f 91       	pop	r24
 584:	3f 91       	pop	r19
 586:	2f 91       	pop	r18
 588:	0f 90       	pop	r0
 58a:	0b be       	out	0x3b, r0	; 59
 58c:	0f 90       	pop	r0
 58e:	0f be       	out	0x3f, r0	; 63
 590:	0f 90       	pop	r0
 592:	1f 90       	pop	r1
 594:	18 95       	reti

00000596 <mcp_reset>:
	MCP_CMD_REQ_SEND_base = 0x80,
	MCP_CMD_READ_STATUS = 0xA0,
	MCP_CMD_RESET = 0xC0
} McpCommand_t;

void mcp_reset() {
 596:	cf 93       	push	r28
 598:	df 93       	push	r29
 59a:	1f 92       	push	r1
 59c:	cd b7       	in	r28, 0x3d	; 61
 59e:	de b7       	in	r29, 0x3e	; 62
	uint8_t buffer[] = {MCP_CMD_RESET};
 5a0:	80 ec       	ldi	r24, 0xC0	; 192
 5a2:	89 83       	std	Y+1, r24	; 0x01
	spi_trancieve(buffer, NULL, 1);
 5a4:	41 e0       	ldi	r20, 0x01	; 1
 5a6:	50 e0       	ldi	r21, 0x00	; 0
 5a8:	60 e0       	ldi	r22, 0x00	; 0
 5aa:	70 e0       	ldi	r23, 0x00	; 0
 5ac:	ce 01       	movw	r24, r28
 5ae:	01 96       	adiw	r24, 0x01	; 1
 5b0:	cf d0       	rcall	.+414    	; 0x750 <spi_trancieve>
}
 5b2:	0f 90       	pop	r0
 5b4:	df 91       	pop	r29
 5b6:	cf 91       	pop	r28
 5b8:	08 95       	ret

000005ba <mcp_read>:

uint8_t mcp_read(uint8_t addr) {
 5ba:	cf 93       	push	r28
 5bc:	df 93       	push	r29
 5be:	00 d0       	rcall	.+0      	; 0x5c0 <mcp_read+0x6>
 5c0:	cd b7       	in	r28, 0x3d	; 61
 5c2:	de b7       	in	r29, 0x3e	; 62
	uint8_t buffer[] = {MCP_CMD_READ, addr, 0x00};
 5c4:	93 e0       	ldi	r25, 0x03	; 3
 5c6:	99 83       	std	Y+1, r25	; 0x01
 5c8:	8a 83       	std	Y+2, r24	; 0x02
 5ca:	1b 82       	std	Y+3, r1	; 0x03
	spi_trancieve(buffer, buffer, 3);
 5cc:	43 e0       	ldi	r20, 0x03	; 3
 5ce:	50 e0       	ldi	r21, 0x00	; 0
 5d0:	be 01       	movw	r22, r28
 5d2:	6f 5f       	subi	r22, 0xFF	; 255
 5d4:	7f 4f       	sbci	r23, 0xFF	; 255
 5d6:	cb 01       	movw	r24, r22
 5d8:	bb d0       	rcall	.+374    	; 0x750 <spi_trancieve>
	return buffer[2];
}
 5da:	8b 81       	ldd	r24, Y+3	; 0x03
 5dc:	0f 90       	pop	r0
 5de:	0f 90       	pop	r0
 5e0:	0f 90       	pop	r0
 5e2:	df 91       	pop	r29
 5e4:	cf 91       	pop	r28
 5e6:	08 95       	ret

000005e8 <mcp_write>:


void mcp_write(uint8_t addr, uint8_t value) {
 5e8:	cf 93       	push	r28
 5ea:	df 93       	push	r29
 5ec:	00 d0       	rcall	.+0      	; 0x5ee <mcp_write+0x6>
 5ee:	cd b7       	in	r28, 0x3d	; 61
 5f0:	de b7       	in	r29, 0x3e	; 62
	uint8_t buffer[] = {MCP_CMD_WRITE, addr, value};
 5f2:	92 e0       	ldi	r25, 0x02	; 2
 5f4:	99 83       	std	Y+1, r25	; 0x01
 5f6:	8a 83       	std	Y+2, r24	; 0x02
 5f8:	6b 83       	std	Y+3, r22	; 0x03
	spi_trancieve(buffer, NULL, 3);
 5fa:	43 e0       	ldi	r20, 0x03	; 3
 5fc:	50 e0       	ldi	r21, 0x00	; 0
 5fe:	60 e0       	ldi	r22, 0x00	; 0
 600:	70 e0       	ldi	r23, 0x00	; 0
 602:	ce 01       	movw	r24, r28
 604:	01 96       	adiw	r24, 0x01	; 1
 606:	a4 d0       	rcall	.+328    	; 0x750 <spi_trancieve>
}
 608:	0f 90       	pop	r0
 60a:	0f 90       	pop	r0
 60c:	0f 90       	pop	r0
 60e:	df 91       	pop	r29
 610:	cf 91       	pop	r28
 612:	08 95       	ret

00000614 <mcp_modify_bit>:

void mcp_modify_bit(uint8_t addr, uint8_t mask, uint8_t value) {
 614:	cf 93       	push	r28
 616:	df 93       	push	r29
 618:	00 d0       	rcall	.+0      	; 0x61a <mcp_modify_bit+0x6>
 61a:	1f 92       	push	r1
 61c:	cd b7       	in	r28, 0x3d	; 61
 61e:	de b7       	in	r29, 0x3e	; 62
	uint8_t buffer[] = {MCP_CMD_BIT_MODIFY, addr, mask, value};
 620:	95 e0       	ldi	r25, 0x05	; 5
 622:	99 83       	std	Y+1, r25	; 0x01
 624:	8a 83       	std	Y+2, r24	; 0x02
 626:	6b 83       	std	Y+3, r22	; 0x03
 628:	4c 83       	std	Y+4, r20	; 0x04
	spi_trancieve(buffer, NULL, 4);
 62a:	44 e0       	ldi	r20, 0x04	; 4
 62c:	50 e0       	ldi	r21, 0x00	; 0
 62e:	60 e0       	ldi	r22, 0x00	; 0
 630:	70 e0       	ldi	r23, 0x00	; 0
 632:	ce 01       	movw	r24, r28
 634:	01 96       	adiw	r24, 0x01	; 1
 636:	8c d0       	rcall	.+280    	; 0x750 <spi_trancieve>
}
 638:	0f 90       	pop	r0
 63a:	0f 90       	pop	r0
 63c:	0f 90       	pop	r0
 63e:	0f 90       	pop	r0
 640:	df 91       	pop	r29
 642:	cf 91       	pop	r28
 644:	08 95       	ret

00000646 <mcp_request_to_send>:

void mcp_request_to_send(bool buffer0, bool buffer1, bool buffer2) {
 646:	cf 93       	push	r28
 648:	df 93       	push	r29
 64a:	1f 92       	push	r1
 64c:	cd b7       	in	r28, 0x3d	; 61
 64e:	de b7       	in	r29, 0x3e	; 62
	uint8_t cmd = MCP_CMD_REQ_SEND_base;
	if (buffer0) cmd |= (1 << 0);
 650:	88 23       	and	r24, r24
 652:	11 f0       	breq	.+4      	; 0x658 <mcp_request_to_send+0x12>
 654:	81 e8       	ldi	r24, 0x81	; 129
 656:	01 c0       	rjmp	.+2      	; 0x65a <mcp_request_to_send+0x14>
	uint8_t buffer[] = {MCP_CMD_BIT_MODIFY, addr, mask, value};
	spi_trancieve(buffer, NULL, 4);
}

void mcp_request_to_send(bool buffer0, bool buffer1, bool buffer2) {
	uint8_t cmd = MCP_CMD_REQ_SEND_base;
 658:	80 e8       	ldi	r24, 0x80	; 128
	if (buffer0) cmd |= (1 << 0);
	if (buffer1) cmd |= (1 << 1);
 65a:	61 11       	cpse	r22, r1
 65c:	82 60       	ori	r24, 0x02	; 2
	if (buffer2) cmd |= (1 << 2);
 65e:	41 11       	cpse	r20, r1
 660:	84 60       	ori	r24, 0x04	; 4

	uint8_t buffer[] = {cmd};
 662:	89 83       	std	Y+1, r24	; 0x01

	spi_trancieve(buffer, NULL, 1);
 664:	41 e0       	ldi	r20, 0x01	; 1
 666:	50 e0       	ldi	r21, 0x00	; 0
 668:	60 e0       	ldi	r22, 0x00	; 0
 66a:	70 e0       	ldi	r23, 0x00	; 0
 66c:	ce 01       	movw	r24, r28
 66e:	01 96       	adiw	r24, 0x01	; 1
 670:	6f d0       	rcall	.+222    	; 0x750 <spi_trancieve>
}
 672:	0f 90       	pop	r0
 674:	df 91       	pop	r29
 676:	cf 91       	pop	r28
 678:	08 95       	ret

0000067a <mcp_read_status>:

McpStatus_t mcp_read_status() {
 67a:	1f 93       	push	r17
 67c:	cf 93       	push	r28
 67e:	df 93       	push	r29
 680:	00 d0       	rcall	.+0      	; 0x682 <mcp_read_status+0x8>
 682:	cd b7       	in	r28, 0x3d	; 61
 684:	de b7       	in	r29, 0x3e	; 62
	// Retry until read succeeds
	while (true) {
		uint8_t buffer[] = {MCP_CMD_READ_STATUS, 0x00, 0x00};
 686:	10 ea       	ldi	r17, 0xA0	; 160
 688:	19 83       	std	Y+1, r17	; 0x01
 68a:	1a 82       	std	Y+2, r1	; 0x02
 68c:	1b 82       	std	Y+3, r1	; 0x03
		spi_trancieve(buffer, buffer, 3);
 68e:	43 e0       	ldi	r20, 0x03	; 3
 690:	50 e0       	ldi	r21, 0x00	; 0
 692:	be 01       	movw	r22, r28
 694:	6f 5f       	subi	r22, 0xFF	; 255
 696:	7f 4f       	sbci	r23, 0xFF	; 255
 698:	cb 01       	movw	r24, r22
 69a:	5a d0       	rcall	.+180    	; 0x750 <spi_trancieve>

		if (buffer[1] == buffer[2]) {
 69c:	9a 81       	ldd	r25, Y+2	; 0x02
 69e:	8b 81       	ldd	r24, Y+3	; 0x03
 6a0:	98 13       	cpse	r25, r24
 6a2:	f2 cf       	rjmp	.-28     	; 0x688 <mcp_read_status+0xe>
			return *((McpStatus_t*)(buffer + 1));
		}
	}
}
 6a4:	89 2f       	mov	r24, r25
 6a6:	0f 90       	pop	r0
 6a8:	0f 90       	pop	r0
 6aa:	0f 90       	pop	r0
 6ac:	df 91       	pop	r29
 6ae:	cf 91       	pop	r28
 6b0:	1f 91       	pop	r17
 6b2:	08 95       	ret

000006b4 <pwm_init>:
	TCCR1A = (1 << WGM11) | (0 << WGM10) | (1 << COM1B1) | (0 << COM1B0);
	TCCR1B = (1 << WGM13) | (1 << WGM12) | (1 << CS11);
}

void pwm_set_duty_cycle(uint8_t duty_cycle) {
	OCR1B = (uint16_t)((uint32_t)duty_cycle * TC_TOP / 100);
 6b4:	80 e4       	ldi	r24, 0x40	; 64
 6b6:	9c e9       	ldi	r25, 0x9C	; 156
 6b8:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x700087>
 6bc:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x700086>
 6c0:	26 9a       	sbi	0x04, 6	; 4
 6c2:	80 e2       	ldi	r24, 0x20	; 32
 6c4:	9e e4       	ldi	r25, 0x4E	; 78
 6c6:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x70008b>
 6ca:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x70008a>
 6ce:	82 e2       	ldi	r24, 0x22	; 34
 6d0:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
 6d4:	8a e1       	ldi	r24, 0x1A	; 26
 6d6:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
 6da:	08 95       	ret

000006dc <pwm_set_pulse_width>:


uint16_t prev_pulse_width;

void pwm_set_pulse_width(uint16_t pulse_width_us) {
	if (pulse_width_us < 900) {
 6dc:	84 38       	cpi	r24, 0x84	; 132
 6de:	23 e0       	ldi	r18, 0x03	; 3
 6e0:	92 07       	cpc	r25, r18
 6e2:	38 f4       	brcc	.+14     	; 0x6f2 <pwm_set_pulse_width+0x16>
		OCR1B = 2 * 900;
 6e4:	88 e0       	ldi	r24, 0x08	; 8
 6e6:	97 e0       	ldi	r25, 0x07	; 7
 6e8:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x70008b>
 6ec:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x70008a>
 6f0:	08 95       	ret
	} else if (pulse_width_us > 2100) {
 6f2:	85 33       	cpi	r24, 0x35	; 53
 6f4:	28 e0       	ldi	r18, 0x08	; 8
 6f6:	92 07       	cpc	r25, r18
 6f8:	38 f0       	brcs	.+14     	; 0x708 <pwm_set_pulse_width+0x2c>
		OCR1B = 2 * 2100;
 6fa:	88 e6       	ldi	r24, 0x68	; 104
 6fc:	90 e1       	ldi	r25, 0x10	; 16
 6fe:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x70008b>
 702:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x70008a>
 706:	08 95       	ret
	} else {
		OCR1B = (pulse_width_us * 2);
 708:	88 0f       	add	r24, r24
 70a:	99 1f       	adc	r25, r25
 70c:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x70008b>
 710:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x70008a>
 714:	08 95       	ret

00000716 <pwm_set_servo_deflection>:
void pwm_set_servo_deflection(uint8_t deflection) {
	const int min_pulse_us = 900;
	const int max_pulse_us = 2100;
	const int max_deflection = 100;
	
	pwm_set_pulse_width(min_pulse_us + 
 716:	28 2f       	mov	r18, r24
 718:	30 e0       	ldi	r19, 0x00	; 0
 71a:	a0 eb       	ldi	r26, 0xB0	; 176
 71c:	b4 e0       	ldi	r27, 0x04	; 4
 71e:	dc d0       	rcall	.+440    	; 0x8d8 <__umulhisi3>
 720:	24 e6       	ldi	r18, 0x64	; 100
 722:	30 e0       	ldi	r19, 0x00	; 0
 724:	40 e0       	ldi	r20, 0x00	; 0
 726:	50 e0       	ldi	r21, 0x00	; 0
 728:	ad d0       	rcall	.+346    	; 0x884 <__udivmodsi4>
 72a:	c9 01       	movw	r24, r18
 72c:	8c 57       	subi	r24, 0x7C	; 124
 72e:	9c 4f       	sbci	r25, 0xFC	; 252
 730:	d5 cf       	rjmp	.-86     	; 0x6dc <pwm_set_pulse_width>
 732:	08 95       	ret

00000734 <spi_init>:
#define MOSI_PIN 2
#define MISO_PIN 3
#define SCK_PIN 1

void spi_init() {
	SPI_DDR |= (1 << SPI_SS_PIN) | (1 << SS_PIN) | (1 << MOSI_PIN) | (1 << SCK_PIN);
 734:	84 b1       	in	r24, 0x04	; 4
 736:	87 68       	ori	r24, 0x87	; 135
 738:	84 b9       	out	0x04, r24	; 4
	SPI_DDR &= ~(1 << MISO_PIN);
 73a:	23 98       	cbi	0x04, 3	; 4
	SPI_PORT |= (1 << SPI_SS_PIN);
 73c:	28 9a       	sbi	0x05, 0	; 5
	SPI_PORT |= (1 << SS_PIN);
 73e:	2f 9a       	sbi	0x05, 7	; 5

	PRR0 &= ~(1 << PRSPI);
 740:	e4 e6       	ldi	r30, 0x64	; 100
 742:	f0 e0       	ldi	r31, 0x00	; 0
 744:	80 81       	ld	r24, Z
 746:	8b 7f       	andi	r24, 0xFB	; 251
 748:	80 83       	st	Z, r24

	SPCR = (1 << MSTR) | (1<< CPHA) | (1 << CPOL) | (1 << SPE) | (1 << SPR0);
 74a:	8d e5       	ldi	r24, 0x5D	; 93
 74c:	8c bd       	out	0x2c, r24	; 44
 74e:	08 95       	ret

00000750 <spi_trancieve>:
}

void spi_trancieve(uint8_t* tx_buffer, uint8_t* rx_buffer, int length) {
	SPI_PORT &= ~(1 << SS_PIN);
 750:	2f 98       	cbi	0x05, 7	; 5
	
	for(int i = 0; i < length; i++) {
 752:	14 16       	cp	r1, r20
 754:	15 06       	cpc	r1, r21
 756:	94 f4       	brge	.+36     	; 0x77c <spi_trancieve+0x2c>
 758:	fc 01       	movw	r30, r24
 75a:	db 01       	movw	r26, r22
 75c:	48 0f       	add	r20, r24
 75e:	59 1f       	adc	r21, r25
		SPDR = tx_buffer[i];
 760:	91 91       	ld	r25, Z+
 762:	9e bd       	out	0x2e, r25	; 46
		
		// Wait for word transmission to complete
		while (!(SPSR & (1 << SPIF))) { };
 764:	0d b4       	in	r0, 0x2d	; 45
 766:	07 fe       	sbrs	r0, 7
 768:	fd cf       	rjmp	.-6      	; 0x764 <spi_trancieve+0x14>

		if (rx_buffer != NULL) {
 76a:	61 15       	cp	r22, r1
 76c:	71 05       	cpc	r23, r1
 76e:	11 f0       	breq	.+4      	; 0x774 <spi_trancieve+0x24>
			rx_buffer[i] = SPDR;
 770:	9e b5       	in	r25, 0x2e	; 46
 772:	9c 93       	st	X, r25
 774:	11 96       	adiw	r26, 0x01	; 1
}

void spi_trancieve(uint8_t* tx_buffer, uint8_t* rx_buffer, int length) {
	SPI_PORT &= ~(1 << SS_PIN);
	
	for(int i = 0; i < length; i++) {
 776:	e4 17       	cp	r30, r20
 778:	f5 07       	cpc	r31, r21
 77a:	91 f7       	brne	.-28     	; 0x760 <spi_trancieve+0x10>
		if (rx_buffer != NULL) {
			rx_buffer[i] = SPDR;
		}
	}

	SPI_PORT |= (1 << SS_PIN);
 77c:	2f 9a       	sbi	0x05, 7	; 5
 77e:	08 95       	ret

00000780 <main>:
#include "drivers/adc.h"
#include "drivers/motor.h"
#include "drivers/shooter.h"

int main(void)
{
 780:	cf 93       	push	r28
 782:	df 93       	push	r29
 784:	cd b7       	in	r28, 0x3d	; 61
 786:	de b7       	in	r29, 0x3e	; 62
 788:	2b 97       	sbiw	r28, 0x0b	; 11
 78a:	0f b6       	in	r0, 0x3f	; 63
 78c:	f8 94       	cli
 78e:	de bf       	out	0x3e, r29	; 62
 790:	0f be       	out	0x3f, r0	; 63
	CanFrame_t frame;

	spi_init();
	can_init();
	pwm_init();
	adc_init();
 792:	cd bf       	out	0x3d, r28	; 61
	//adc_init_channel(AdcCh_CH8);
	motor_init();
 794:	cf df       	rcall	.-98     	; 0x734 <spi_init>
 796:	2e dd       	rcall	.-1444   	; 0x1f4 <can_init>
	shooter_init();
 798:	8d df       	rcall	.-230    	; 0x6b4 <pwm_init>
 79a:	15 dd       	rcall	.-1494   	; 0x1c6 <adc_init>

	sei();
 79c:	ee dd       	rcall	.-1060   	; 0x37a <motor_init>

	
	motor_enable();
 79e:	2f de       	rcall	.-930    	; 0x3fe <shooter_init>
 7a0:	78 94       	sei

	bool shot = false;
 7a2:	f6 dd       	rcall	.-1044   	; 0x390 <motor_enable>
		_delay_ms(10);

		if (can_rx_message(&frame)) {
			int16_t joystick_pos = (int16_t)(frame.data.i8[0] + 100);

			int16_t servo_defl = 100 * joystick_pos / 255;
 7a4:	f1 2c       	mov	r15, r1
 7a6:	0f 2e       	mov	r0, r31
 7a8:	f4 e6       	ldi	r31, 0x64	; 100
 7aa:	9f 2e       	mov	r9, r31
 7ac:	f0 2d       	mov	r31, r0
 7ae:	aa 24       	eor	r10, r10
 7b0:	aa 94       	dec	r10
 7b2:	b1 2c       	mov	r11, r1
 7b4:	0f 2e       	mov	r0, r31
 7b6:	f4 e6       	ldi	r31, 0x64	; 100
 7b8:	6f 2e       	mov	r6, r31
 7ba:	f0 2d       	mov	r31, r0
 7bc:	71 2c       	mov	r7, r1
 7be:	41 2c       	mov	r4, r1
				if (!shot) {
					shooter_shoot();
					shot = true;
				}
			} else {
				shot = false;
 7c0:	51 2c       	mov	r5, r1
			motor_set(power, (frame.data.i8[0] < 0) ? DIR_LEFT : DIR_RIGHT);
			
			if (frame.data.u8[2] > 0) {
				if (!shot) {
					shooter_shoot();
					shot = true;
 7c2:	81 2c       	mov	r8, r1
 7c4:	33 24       	eor	r3, r3
			} else {
				shot = false;
			}


			frame.id = 0x120;
 7c6:	33 94       	inc	r3
 7c8:	68 94       	set
 7ca:	cc 24       	eor	r12, r12
 7cc:	c5 f8       	bld	r12, 5
 7ce:	dd 24       	eor	r13, r13
			frame.length = 0x4;
 7d0:	d3 94       	inc	r13
 7d2:	68 94       	set
 7d4:	ee 24       	eor	r14, r14
 7d6:	e2 f8       	bld	r14, 2
 7d8:	8f e3       	ldi	r24, 0x3F	; 63
 7da:	9c e9       	ldi	r25, 0x9C	; 156
 7dc:	01 97       	sbiw	r24, 0x01	; 1
 7de:	f1 f7       	brne	.-4      	; 0x7dc <main+0x5c>
	
	while (1)
	{
		_delay_ms(10);

		if (can_rx_message(&frame)) {
 7e0:	00 c0       	rjmp	.+0      	; 0x7e2 <main+0x62>
 7e2:	00 00       	nop
 7e4:	ce 01       	movw	r24, r28
 7e6:	01 96       	adiw	r24, 0x01	; 1
 7e8:	7c dd       	rcall	.-1288   	; 0x2e2 <can_rx_message>
 7ea:	88 23       	and	r24, r24
			int16_t joystick_pos = (int16_t)(frame.data.i8[0] + 100);

			int16_t servo_defl = 100 * joystick_pos / 255;
 7ec:	a9 f3       	breq	.-22     	; 0x7d8 <main+0x58>
 7ee:	2c 81       	ldd	r18, Y+4	; 0x04
 7f0:	02 2e       	mov	r0, r18
 7f2:	00 0c       	add	r0, r0
 7f4:	33 0b       	sbc	r19, r19
 7f6:	2c 59       	subi	r18, 0x9C	; 156
 7f8:	3f 4f       	sbci	r19, 0xFF	; 255
 7fa:	92 9e       	mul	r9, r18
 7fc:	c0 01       	movw	r24, r0
 7fe:	93 9e       	mul	r9, r19
 800:	90 0d       	add	r25, r0
 802:	11 24       	eor	r1, r1
 804:	b5 01       	movw	r22, r10
 806:	2b d0       	rcall	.+86     	; 0x85e <__divmodhi4>
 808:	65 36       	cpi	r22, 0x65	; 101
 80a:	71 05       	cpc	r23, r1
 80c:	14 f0       	brlt	.+4      	; 0x812 <main+0x92>
 80e:	66 2d       	mov	r22, r6
 810:	77 2d       	mov	r23, r7
 812:	8b 01       	movw	r16, r22
 814:	77 23       	and	r23, r23
 816:	14 f4       	brge	.+4      	; 0x81c <main+0x9c>
			
			if (servo_defl > 100) servo_defl = 100;
			if (servo_defl < 0) servo_defl = 0;

			pwm_set_servo_deflection(servo_defl);
 818:	04 2d       	mov	r16, r4
 81a:	15 2d       	mov	r17, r5
			
			uint8_t direction = (frame.data.i8[0] < 0);
 81c:	80 2f       	mov	r24, r16
			uint8_t power = frame.data.i8[0];
			if (direction) {
				power = -frame.data.i8[0];
			}

			motor_set(power, (frame.data.i8[0] < 0) ? DIR_LEFT : DIR_RIGHT);
 81e:	7b df       	rcall	.-266    	; 0x716 <pwm_set_servo_deflection>
 820:	8c 81       	ldd	r24, Y+4	; 0x04
 822:	68 2f       	mov	r22, r24
 824:	60 95       	com	r22
 826:	66 1f       	adc	r22, r22
 828:	66 27       	eor	r22, r22
 82a:	66 1f       	adc	r22, r22
 82c:	87 fd       	sbrc	r24, 7
			
			if (frame.data.u8[2] > 0) {
 82e:	81 95       	neg	r24
 830:	b5 dd       	rcall	.-1174   	; 0x39c <motor_set>
				if (!shot) {
 832:	8e 81       	ldd	r24, Y+6	; 0x06
 834:	88 23       	and	r24, r24
					shooter_shoot();
 836:	29 f0       	breq	.+10     	; 0x842 <main+0xc2>
 838:	f1 10       	cpse	r15, r1
					shot = true;
 83a:	04 c0       	rjmp	.+8      	; 0x844 <main+0xc4>
			} else {
				shot = false;
			}


			frame.id = 0x120;
 83c:	e3 dd       	rcall	.-1082   	; 0x404 <shooter_shoot>
 83e:	f3 2c       	mov	r15, r3
			frame.length = 0x4;
 840:	01 c0       	rjmp	.+2      	; 0x844 <main+0xc4>
			
			frame.data.u16[0] = adc_read(AdcCh_CH8);
 842:	f8 2c       	mov	r15, r8
 844:	da 82       	std	Y+2, r13	; 0x02
 846:	c9 82       	std	Y+1, r12	; 0x01
 848:	eb 82       	std	Y+3, r14	; 0x03
 84a:	80 e2       	ldi	r24, 0x20	; 32
			frame.data.i16[1] = servo_defl;
 84c:	c6 dc       	rcall	.-1652   	; 0x1da <adc_read>
 84e:	9d 83       	std	Y+5, r25	; 0x05

			can_tx_message(&frame);
 850:	8c 83       	std	Y+4, r24	; 0x04
 852:	1f 83       	std	Y+7, r17	; 0x07
 854:	0e 83       	std	Y+6, r16	; 0x06
 856:	ce 01       	movw	r24, r28
 858:	01 96       	adiw	r24, 0x01	; 1
 85a:	fe dc       	rcall	.-1540   	; 0x258 <can_tx_message>
 85c:	bd cf       	rjmp	.-134    	; 0x7d8 <main+0x58>

0000085e <__divmodhi4>:
 85e:	97 fb       	bst	r25, 7
 860:	07 2e       	mov	r0, r23
 862:	16 f4       	brtc	.+4      	; 0x868 <__divmodhi4+0xa>
 864:	00 94       	com	r0
 866:	06 d0       	rcall	.+12     	; 0x874 <__divmodhi4_neg1>
 868:	77 fd       	sbrc	r23, 7
 86a:	08 d0       	rcall	.+16     	; 0x87c <__divmodhi4_neg2>
 86c:	44 d0       	rcall	.+136    	; 0x8f6 <__udivmodhi4>
 86e:	07 fc       	sbrc	r0, 7
 870:	05 d0       	rcall	.+10     	; 0x87c <__divmodhi4_neg2>
 872:	3e f4       	brtc	.+14     	; 0x882 <__divmodhi4_exit>

00000874 <__divmodhi4_neg1>:
 874:	90 95       	com	r25
 876:	81 95       	neg	r24
 878:	9f 4f       	sbci	r25, 0xFF	; 255
 87a:	08 95       	ret

0000087c <__divmodhi4_neg2>:
 87c:	70 95       	com	r23
 87e:	61 95       	neg	r22
 880:	7f 4f       	sbci	r23, 0xFF	; 255

00000882 <__divmodhi4_exit>:
 882:	08 95       	ret

00000884 <__udivmodsi4>:
 884:	a1 e2       	ldi	r26, 0x21	; 33
 886:	1a 2e       	mov	r1, r26
 888:	aa 1b       	sub	r26, r26
 88a:	bb 1b       	sub	r27, r27
 88c:	fd 01       	movw	r30, r26
 88e:	0d c0       	rjmp	.+26     	; 0x8aa <__udivmodsi4_ep>

00000890 <__udivmodsi4_loop>:
 890:	aa 1f       	adc	r26, r26
 892:	bb 1f       	adc	r27, r27
 894:	ee 1f       	adc	r30, r30
 896:	ff 1f       	adc	r31, r31
 898:	a2 17       	cp	r26, r18
 89a:	b3 07       	cpc	r27, r19
 89c:	e4 07       	cpc	r30, r20
 89e:	f5 07       	cpc	r31, r21
 8a0:	20 f0       	brcs	.+8      	; 0x8aa <__udivmodsi4_ep>
 8a2:	a2 1b       	sub	r26, r18
 8a4:	b3 0b       	sbc	r27, r19
 8a6:	e4 0b       	sbc	r30, r20
 8a8:	f5 0b       	sbc	r31, r21

000008aa <__udivmodsi4_ep>:
 8aa:	66 1f       	adc	r22, r22
 8ac:	77 1f       	adc	r23, r23
 8ae:	88 1f       	adc	r24, r24
 8b0:	99 1f       	adc	r25, r25
 8b2:	1a 94       	dec	r1
 8b4:	69 f7       	brne	.-38     	; 0x890 <__udivmodsi4_loop>
 8b6:	60 95       	com	r22
 8b8:	70 95       	com	r23
 8ba:	80 95       	com	r24
 8bc:	90 95       	com	r25
 8be:	9b 01       	movw	r18, r22
 8c0:	ac 01       	movw	r20, r24
 8c2:	bd 01       	movw	r22, r26
 8c4:	cf 01       	movw	r24, r30
 8c6:	08 95       	ret

000008c8 <__tablejump2__>:
 8c8:	ee 0f       	add	r30, r30
 8ca:	ff 1f       	adc	r31, r31
 8cc:	88 1f       	adc	r24, r24
 8ce:	8b bf       	out	0x3b, r24	; 59
 8d0:	07 90       	elpm	r0, Z+
 8d2:	f6 91       	elpm	r31, Z
 8d4:	e0 2d       	mov	r30, r0
 8d6:	19 94       	eijmp

000008d8 <__umulhisi3>:
 8d8:	a2 9f       	mul	r26, r18
 8da:	b0 01       	movw	r22, r0
 8dc:	b3 9f       	mul	r27, r19
 8de:	c0 01       	movw	r24, r0
 8e0:	a3 9f       	mul	r26, r19
 8e2:	70 0d       	add	r23, r0
 8e4:	81 1d       	adc	r24, r1
 8e6:	11 24       	eor	r1, r1
 8e8:	91 1d       	adc	r25, r1
 8ea:	b2 9f       	mul	r27, r18
 8ec:	70 0d       	add	r23, r0
 8ee:	81 1d       	adc	r24, r1
 8f0:	11 24       	eor	r1, r1
 8f2:	91 1d       	adc	r25, r1
 8f4:	08 95       	ret

000008f6 <__udivmodhi4>:
 8f6:	aa 1b       	sub	r26, r26
 8f8:	bb 1b       	sub	r27, r27
 8fa:	51 e1       	ldi	r21, 0x11	; 17
 8fc:	07 c0       	rjmp	.+14     	; 0x90c <__udivmodhi4_ep>

000008fe <__udivmodhi4_loop>:
 8fe:	aa 1f       	adc	r26, r26
 900:	bb 1f       	adc	r27, r27
 902:	a6 17       	cp	r26, r22
 904:	b7 07       	cpc	r27, r23
 906:	10 f0       	brcs	.+4      	; 0x90c <__udivmodhi4_ep>
 908:	a6 1b       	sub	r26, r22
 90a:	b7 0b       	sbc	r27, r23

0000090c <__udivmodhi4_ep>:
 90c:	88 1f       	adc	r24, r24
 90e:	99 1f       	adc	r25, r25
 910:	5a 95       	dec	r21
 912:	a9 f7       	brne	.-22     	; 0x8fe <__udivmodhi4_loop>
 914:	80 95       	com	r24
 916:	90 95       	com	r25
 918:	bc 01       	movw	r22, r24
 91a:	cd 01       	movw	r24, r26
 91c:	08 95       	ret

0000091e <_exit>:
 91e:	f8 94       	cli

00000920 <__stop_program>:
 920:	ff cf       	rjmp	.-2      	; 0x920 <__stop_program>
