
Node2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800200  0000137a  0000140e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000137a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000019  00800202  00800202  00001410  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001410  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001440  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000230  00000000  00000000  00001480  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002bb0  00000000  00000000  000016b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001869  00000000  00000000  00004260  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001450  00000000  00000000  00005ac9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000534  00000000  00000000  00006f1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d40  00000000  00000000  00007450  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000011da  00000000  00000000  00008190  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a8  00000000  00000000  0000936a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	c2 c0       	rjmp	.+388    	; 0x186 <__ctors_end>
       2:	00 00       	nop
       4:	e0 c0       	rjmp	.+448    	; 0x1c6 <__bad_interrupt>
       6:	00 00       	nop
       8:	de c0       	rjmp	.+444    	; 0x1c6 <__bad_interrupt>
       a:	00 00       	nop
       c:	dc c0       	rjmp	.+440    	; 0x1c6 <__bad_interrupt>
       e:	00 00       	nop
      10:	da c0       	rjmp	.+436    	; 0x1c6 <__bad_interrupt>
      12:	00 00       	nop
      14:	d8 c0       	rjmp	.+432    	; 0x1c6 <__bad_interrupt>
      16:	00 00       	nop
      18:	d6 c0       	rjmp	.+428    	; 0x1c6 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	d4 c0       	rjmp	.+424    	; 0x1c6 <__bad_interrupt>
      1e:	00 00       	nop
      20:	d2 c0       	rjmp	.+420    	; 0x1c6 <__bad_interrupt>
      22:	00 00       	nop
      24:	d0 c0       	rjmp	.+416    	; 0x1c6 <__bad_interrupt>
      26:	00 00       	nop
      28:	ce c0       	rjmp	.+412    	; 0x1c6 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	cc c0       	rjmp	.+408    	; 0x1c6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	ca c0       	rjmp	.+404    	; 0x1c6 <__bad_interrupt>
      32:	00 00       	nop
      34:	c8 c0       	rjmp	.+400    	; 0x1c6 <__bad_interrupt>
      36:	00 00       	nop
      38:	c6 c0       	rjmp	.+396    	; 0x1c6 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	c4 c0       	rjmp	.+392    	; 0x1c6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	c2 c0       	rjmp	.+388    	; 0x1c6 <__bad_interrupt>
      42:	00 00       	nop
      44:	c0 c0       	rjmp	.+384    	; 0x1c6 <__bad_interrupt>
      46:	00 00       	nop
      48:	be c0       	rjmp	.+380    	; 0x1c6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	bc c0       	rjmp	.+376    	; 0x1c6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	ba c0       	rjmp	.+372    	; 0x1c6 <__bad_interrupt>
      52:	00 00       	nop
      54:	b8 c0       	rjmp	.+368    	; 0x1c6 <__bad_interrupt>
      56:	00 00       	nop
      58:	b6 c0       	rjmp	.+364    	; 0x1c6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	b4 c0       	rjmp	.+360    	; 0x1c6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	b2 c0       	rjmp	.+356    	; 0x1c6 <__bad_interrupt>
      62:	00 00       	nop
      64:	b0 c0       	rjmp	.+352    	; 0x1c6 <__bad_interrupt>
      66:	00 00       	nop
      68:	ae c0       	rjmp	.+348    	; 0x1c6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	ac c0       	rjmp	.+344    	; 0x1c6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	aa c0       	rjmp	.+340    	; 0x1c6 <__bad_interrupt>
      72:	00 00       	nop
      74:	a8 c0       	rjmp	.+336    	; 0x1c6 <__bad_interrupt>
      76:	00 00       	nop
      78:	a6 c0       	rjmp	.+332    	; 0x1c6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	a4 c0       	rjmp	.+328    	; 0x1c6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	a2 c0       	rjmp	.+324    	; 0x1c6 <__bad_interrupt>
      82:	00 00       	nop
      84:	a0 c0       	rjmp	.+320    	; 0x1c6 <__bad_interrupt>
      86:	00 00       	nop
      88:	9e c0       	rjmp	.+316    	; 0x1c6 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	9c c0       	rjmp	.+312    	; 0x1c6 <__bad_interrupt>
      8e:	00 00       	nop
      90:	9a c0       	rjmp	.+308    	; 0x1c6 <__bad_interrupt>
      92:	00 00       	nop
      94:	98 c0       	rjmp	.+304    	; 0x1c6 <__bad_interrupt>
      96:	00 00       	nop
      98:	96 c0       	rjmp	.+300    	; 0x1c6 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	08 c5       	rjmp	.+2576   	; 0xaae <__vector_39>
      9e:	00 00       	nop
      a0:	92 c0       	rjmp	.+292    	; 0x1c6 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	90 c0       	rjmp	.+288    	; 0x1c6 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	8e c0       	rjmp	.+284    	; 0x1c6 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	8c c0       	rjmp	.+280    	; 0x1c6 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	8a c0       	rjmp	.+276    	; 0x1c6 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	88 c0       	rjmp	.+272    	; 0x1c6 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	86 c0       	rjmp	.+268    	; 0x1c6 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	84 c0       	rjmp	.+264    	; 0x1c6 <__bad_interrupt>
      be:	00 00       	nop
      c0:	82 c0       	rjmp	.+260    	; 0x1c6 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	80 c0       	rjmp	.+256    	; 0x1c6 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	7e c0       	rjmp	.+252    	; 0x1c6 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	7c c0       	rjmp	.+248    	; 0x1c6 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	7a c0       	rjmp	.+244    	; 0x1c6 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	78 c0       	rjmp	.+240    	; 0x1c6 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	76 c0       	rjmp	.+236    	; 0x1c6 <__bad_interrupt>
      da:	00 00       	nop
      dc:	74 c0       	rjmp	.+232    	; 0x1c6 <__bad_interrupt>
      de:	00 00       	nop
      e0:	72 c0       	rjmp	.+228    	; 0x1c6 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	75 05       	cpc	r23, r5
      e6:	c7 05       	cpc	r28, r7
      e8:	c7 05       	cpc	r28, r7
      ea:	c7 05       	cpc	r28, r7
      ec:	c7 05       	cpc	r28, r7
      ee:	c7 05       	cpc	r28, r7
      f0:	c7 05       	cpc	r28, r7
      f2:	c7 05       	cpc	r28, r7
      f4:	75 05       	cpc	r23, r5
      f6:	c7 05       	cpc	r28, r7
      f8:	c7 05       	cpc	r28, r7
      fa:	c7 05       	cpc	r28, r7
      fc:	c7 05       	cpc	r28, r7
      fe:	c7 05       	cpc	r28, r7
     100:	c7 05       	cpc	r28, r7
     102:	c7 05       	cpc	r28, r7
     104:	77 05       	cpc	r23, r7
     106:	c7 05       	cpc	r28, r7
     108:	c7 05       	cpc	r28, r7
     10a:	c7 05       	cpc	r28, r7
     10c:	c7 05       	cpc	r28, r7
     10e:	c7 05       	cpc	r28, r7
     110:	c7 05       	cpc	r28, r7
     112:	c7 05       	cpc	r28, r7
     114:	c7 05       	cpc	r28, r7
     116:	c7 05       	cpc	r28, r7
     118:	c7 05       	cpc	r28, r7
     11a:	c7 05       	cpc	r28, r7
     11c:	c7 05       	cpc	r28, r7
     11e:	c7 05       	cpc	r28, r7
     120:	c7 05       	cpc	r28, r7
     122:	c7 05       	cpc	r28, r7
     124:	77 05       	cpc	r23, r7
     126:	c7 05       	cpc	r28, r7
     128:	c7 05       	cpc	r28, r7
     12a:	c7 05       	cpc	r28, r7
     12c:	c7 05       	cpc	r28, r7
     12e:	c7 05       	cpc	r28, r7
     130:	c7 05       	cpc	r28, r7
     132:	c7 05       	cpc	r28, r7
     134:	c7 05       	cpc	r28, r7
     136:	c7 05       	cpc	r28, r7
     138:	c7 05       	cpc	r28, r7
     13a:	c7 05       	cpc	r28, r7
     13c:	c7 05       	cpc	r28, r7
     13e:	c7 05       	cpc	r28, r7
     140:	c7 05       	cpc	r28, r7
     142:	c7 05       	cpc	r28, r7
     144:	c3 05       	cpc	r28, r3
     146:	c7 05       	cpc	r28, r7
     148:	c7 05       	cpc	r28, r7
     14a:	c7 05       	cpc	r28, r7
     14c:	c7 05       	cpc	r28, r7
     14e:	c7 05       	cpc	r28, r7
     150:	c7 05       	cpc	r28, r7
     152:	c7 05       	cpc	r28, r7
     154:	a0 05       	cpc	r26, r0
     156:	c7 05       	cpc	r28, r7
     158:	c7 05       	cpc	r28, r7
     15a:	c7 05       	cpc	r28, r7
     15c:	c7 05       	cpc	r28, r7
     15e:	c7 05       	cpc	r28, r7
     160:	c7 05       	cpc	r28, r7
     162:	c7 05       	cpc	r28, r7
     164:	c7 05       	cpc	r28, r7
     166:	c7 05       	cpc	r28, r7
     168:	c7 05       	cpc	r28, r7
     16a:	c7 05       	cpc	r28, r7
     16c:	c7 05       	cpc	r28, r7
     16e:	c7 05       	cpc	r28, r7
     170:	c7 05       	cpc	r28, r7
     172:	c7 05       	cpc	r28, r7
     174:	94 05       	cpc	r25, r4
     176:	c7 05       	cpc	r28, r7
     178:	c7 05       	cpc	r28, r7
     17a:	c7 05       	cpc	r28, r7
     17c:	c7 05       	cpc	r28, r7
     17e:	c7 05       	cpc	r28, r7
     180:	c7 05       	cpc	r28, r7
     182:	c7 05       	cpc	r28, r7
     184:	b2 05       	cpc	r27, r2

00000186 <__ctors_end>:
     186:	11 24       	eor	r1, r1
     188:	1f be       	out	0x3f, r1	; 63
     18a:	cf ef       	ldi	r28, 0xFF	; 255
     18c:	d1 e2       	ldi	r29, 0x21	; 33
     18e:	de bf       	out	0x3e, r29	; 62
     190:	cd bf       	out	0x3d, r28	; 61
     192:	00 e0       	ldi	r16, 0x00	; 0
     194:	0c bf       	out	0x3c, r16	; 60

00000196 <__do_copy_data>:
     196:	12 e0       	ldi	r17, 0x02	; 2
     198:	a0 e0       	ldi	r26, 0x00	; 0
     19a:	b2 e0       	ldi	r27, 0x02	; 2
     19c:	ea e7       	ldi	r30, 0x7A	; 122
     19e:	f3 e1       	ldi	r31, 0x13	; 19
     1a0:	00 e0       	ldi	r16, 0x00	; 0
     1a2:	0b bf       	out	0x3b, r16	; 59
     1a4:	02 c0       	rjmp	.+4      	; 0x1aa <__do_copy_data+0x14>
     1a6:	07 90       	elpm	r0, Z+
     1a8:	0d 92       	st	X+, r0
     1aa:	a2 30       	cpi	r26, 0x02	; 2
     1ac:	b1 07       	cpc	r27, r17
     1ae:	d9 f7       	brne	.-10     	; 0x1a6 <__do_copy_data+0x10>

000001b0 <__do_clear_bss>:
     1b0:	22 e0       	ldi	r18, 0x02	; 2
     1b2:	a2 e0       	ldi	r26, 0x02	; 2
     1b4:	b2 e0       	ldi	r27, 0x02	; 2
     1b6:	01 c0       	rjmp	.+2      	; 0x1ba <.do_clear_bss_start>

000001b8 <.do_clear_bss_loop>:
     1b8:	1d 92       	st	X+, r1

000001ba <.do_clear_bss_start>:
     1ba:	ab 31       	cpi	r26, 0x1B	; 27
     1bc:	b2 07       	cpc	r27, r18
     1be:	e1 f7       	brne	.-8      	; 0x1b8 <.do_clear_bss_loop>
     1c0:	f1 d5       	rcall	.+3042   	; 0xda4 <main>
     1c2:	0c 94 bb 09 	jmp	0x1376	; 0x1376 <_exit>

000001c6 <__bad_interrupt>:
     1c6:	1c cf       	rjmp	.-456    	; 0x0 <__vectors>

000001c8 <_set_channel>:

#include "adc.h"
#include <avr/io.h>

void _set_channel(AdcCh_t ch) {
	ADMUX &= ~0x1F;
     1c8:	ec e7       	ldi	r30, 0x7C	; 124
     1ca:	f0 e0       	ldi	r31, 0x00	; 0
     1cc:	90 81       	ld	r25, Z
     1ce:	90 7e       	andi	r25, 0xE0	; 224
     1d0:	90 83       	st	Z, r25
	ADMUX |= ((int)ch) & 0x1F;
     1d2:	90 81       	ld	r25, Z
     1d4:	28 2f       	mov	r18, r24
     1d6:	2f 71       	andi	r18, 0x1F	; 31
     1d8:	92 2b       	or	r25, r18
     1da:	90 83       	st	Z, r25

	ADCSRB &= ~(1 << MUX5);
     1dc:	eb e7       	ldi	r30, 0x7B	; 123
     1de:	f0 e0       	ldi	r31, 0x00	; 0
     1e0:	90 81       	ld	r25, Z
     1e2:	97 7f       	andi	r25, 0xF7	; 247
     1e4:	90 83       	st	Z, r25
	ADCSRB |= ((int)ch >> 5) << MUX5;
     1e6:	90 81       	ld	r25, Z
     1e8:	82 95       	swap	r24
     1ea:	86 95       	lsr	r24
     1ec:	87 70       	andi	r24, 0x07	; 7
     1ee:	88 0f       	add	r24, r24
     1f0:	88 0f       	add	r24, r24
     1f2:	88 0f       	add	r24, r24
     1f4:	89 2b       	or	r24, r25
     1f6:	80 83       	st	Z, r24
     1f8:	08 95       	ret

000001fa <adc_init>:
}

void adc_init() {
	ADMUX = (1 << REFS0);
     1fa:	80 e4       	ldi	r24, 0x40	; 64
     1fc:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
	ADCSRB = (1 << MUX5);
     200:	88 e0       	ldi	r24, 0x08	; 8
     202:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
	//_set_channel(0);

	ADCSRA = (1 << ADEN);
     206:	80 e8       	ldi	r24, 0x80	; 128
     208:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
     20c:	08 95       	ret

0000020e <adc_init_channel>:
}

void adc_init_channel(AdcCh_t channel) {
     20e:	cf 93       	push	r28
     210:	df 93       	push	r29
     212:	1f 92       	push	r1
     214:	1f 92       	push	r1
     216:	cd b7       	in	r28, 0x3d	; 61
     218:	de b7       	in	r29, 0x3e	; 62
	volatile int channel_number = (int)channel & 0b000111;
     21a:	28 2f       	mov	r18, r24
     21c:	27 70       	andi	r18, 0x07	; 7
     21e:	30 e0       	ldi	r19, 0x00	; 0
     220:	3a 83       	std	Y+2, r19	; 0x02
     222:	29 83       	std	Y+1, r18	; 0x01
	channel_number |= (channel >> 2) & 0b001000;
     224:	29 81       	ldd	r18, Y+1	; 0x01
     226:	3a 81       	ldd	r19, Y+2	; 0x02
     228:	86 95       	lsr	r24
     22a:	86 95       	lsr	r24
     22c:	88 70       	andi	r24, 0x08	; 8
     22e:	a9 01       	movw	r20, r18
     230:	48 2b       	or	r20, r24
     232:	ca 01       	movw	r24, r20
     234:	9a 83       	std	Y+2, r25	; 0x02
     236:	89 83       	std	Y+1, r24	; 0x01
	
	if (channel_number < 8) {
     238:	89 81       	ldd	r24, Y+1	; 0x01
     23a:	9a 81       	ldd	r25, Y+2	; 0x02
     23c:	08 97       	sbiw	r24, 0x08	; 8
     23e:	ec f4       	brge	.+58     	; 0x27a <adc_init_channel+0x6c>
		DIDR0 |= (1 << channel_number);
     240:	29 81       	ldd	r18, Y+1	; 0x01
     242:	3a 81       	ldd	r19, Y+2	; 0x02
     244:	ee e7       	ldi	r30, 0x7E	; 126
     246:	f0 e0       	ldi	r31, 0x00	; 0
     248:	40 81       	ld	r20, Z
     24a:	81 e0       	ldi	r24, 0x01	; 1
     24c:	90 e0       	ldi	r25, 0x00	; 0
     24e:	bc 01       	movw	r22, r24
     250:	02 c0       	rjmp	.+4      	; 0x256 <adc_init_channel+0x48>
     252:	66 0f       	add	r22, r22
     254:	77 1f       	adc	r23, r23
     256:	2a 95       	dec	r18
     258:	e2 f7       	brpl	.-8      	; 0x252 <adc_init_channel+0x44>
     25a:	9b 01       	movw	r18, r22
     25c:	24 2b       	or	r18, r20
     25e:	20 83       	st	Z, r18
		DDRF &= ~(1 << channel_number);
     260:	49 81       	ldd	r20, Y+1	; 0x01
     262:	5a 81       	ldd	r21, Y+2	; 0x02
     264:	20 b3       	in	r18, 0x10	; 16
     266:	02 c0       	rjmp	.+4      	; 0x26c <adc_init_channel+0x5e>
     268:	88 0f       	add	r24, r24
     26a:	99 1f       	adc	r25, r25
     26c:	4a 95       	dec	r20
     26e:	e2 f7       	brpl	.-8      	; 0x268 <adc_init_channel+0x5a>
     270:	80 95       	com	r24
     272:	90 95       	com	r25
     274:	82 23       	and	r24, r18
     276:	80 bb       	out	0x10, r24	; 16
     278:	21 c0       	rjmp	.+66     	; 0x2bc <adc_init_channel+0xae>
	} else {
		DIDR2 |= (1 << (channel_number - 8));
     27a:	49 81       	ldd	r20, Y+1	; 0x01
     27c:	5a 81       	ldd	r21, Y+2	; 0x02
     27e:	ed e7       	ldi	r30, 0x7D	; 125
     280:	f0 e0       	ldi	r31, 0x00	; 0
     282:	60 81       	ld	r22, Z
     284:	48 50       	subi	r20, 0x08	; 8
     286:	51 09       	sbc	r21, r1
     288:	81 e0       	ldi	r24, 0x01	; 1
     28a:	90 e0       	ldi	r25, 0x00	; 0
     28c:	9c 01       	movw	r18, r24
     28e:	02 c0       	rjmp	.+4      	; 0x294 <adc_init_channel+0x86>
     290:	22 0f       	add	r18, r18
     292:	33 1f       	adc	r19, r19
     294:	4a 95       	dec	r20
     296:	e2 f7       	brpl	.-8      	; 0x290 <adc_init_channel+0x82>
     298:	26 2b       	or	r18, r22
     29a:	20 83       	st	Z, r18
		DDRK &= ~(1 << (channel_number - 8));
     29c:	29 81       	ldd	r18, Y+1	; 0x01
     29e:	3a 81       	ldd	r19, Y+2	; 0x02
     2a0:	e7 e0       	ldi	r30, 0x07	; 7
     2a2:	f1 e0       	ldi	r31, 0x01	; 1
     2a4:	40 81       	ld	r20, Z
     2a6:	28 50       	subi	r18, 0x08	; 8
     2a8:	31 09       	sbc	r19, r1
     2aa:	02 c0       	rjmp	.+4      	; 0x2b0 <adc_init_channel+0xa2>
     2ac:	88 0f       	add	r24, r24
     2ae:	99 1f       	adc	r25, r25
     2b0:	2a 95       	dec	r18
     2b2:	e2 f7       	brpl	.-8      	; 0x2ac <adc_init_channel+0x9e>
     2b4:	80 95       	com	r24
     2b6:	90 95       	com	r25
     2b8:	84 23       	and	r24, r20
     2ba:	80 83       	st	Z, r24
	}
}
     2bc:	0f 90       	pop	r0
     2be:	0f 90       	pop	r0
     2c0:	df 91       	pop	r29
     2c2:	cf 91       	pop	r28
     2c4:	08 95       	ret

000002c6 <adc_read>:

uint16_t adc_read(AdcCh_t channel) {
     2c6:	80 df       	rcall	.-256    	; 0x1c8 <_set_channel>
     2c8:	ea e7       	ldi	r30, 0x7A	; 122
     2ca:	f0 e0       	ldi	r31, 0x00	; 0
     2cc:	80 81       	ld	r24, Z
     2ce:	80 64       	ori	r24, 0x40	; 64
     2d0:	80 83       	st	Z, r24
     2d2:	80 81       	ld	r24, Z
     2d4:	84 ff       	sbrs	r24, 4
     2d6:	fd cf       	rjmp	.-6      	; 0x2d2 <adc_read+0xc>
     2d8:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
     2dc:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
     2e0:	08 95       	ret

000002e2 <can_init>:
     2e2:	6b d4       	rcall	.+2262   	; 0xbba <mcp_reset>
     2e4:	60 e8       	ldi	r22, 0x80	; 128
     2e6:	8f e0       	ldi	r24, 0x0F	; 15
     2e8:	91 d4       	rcall	.+2338   	; 0xc0c <mcp_write>
     2ea:	60 e2       	ldi	r22, 0x20	; 32
     2ec:	8a e2       	ldi	r24, 0x2A	; 42
     2ee:	8e d4       	rcall	.+2332   	; 0xc0c <mcp_write>
     2f0:	62 e9       	ldi	r22, 0x92	; 146
     2f2:	89 e2       	ldi	r24, 0x29	; 41
     2f4:	8b d4       	rcall	.+2326   	; 0xc0c <mcp_write>
     2f6:	62 ec       	ldi	r22, 0xC2	; 194
     2f8:	88 e2       	ldi	r24, 0x28	; 40
     2fa:	88 d4       	rcall	.+2320   	; 0xc0c <mcp_write>
     2fc:	60 e0       	ldi	r22, 0x00	; 0
     2fe:	8b e2       	ldi	r24, 0x2B	; 43
     300:	85 d4       	rcall	.+2314   	; 0xc0c <mcp_write>
     302:	60 e0       	ldi	r22, 0x00	; 0
     304:	8c e2       	ldi	r24, 0x2C	; 44
     306:	82 d4       	rcall	.+2308   	; 0xc0c <mcp_write>
     308:	60 e0       	ldi	r22, 0x00	; 0
     30a:	8d e2       	ldi	r24, 0x2D	; 45
     30c:	7f d4       	rcall	.+2302   	; 0xc0c <mcp_write>
     30e:	60 e0       	ldi	r22, 0x00	; 0
     310:	8c e0       	ldi	r24, 0x0C	; 12
     312:	7c d4       	rcall	.+2296   	; 0xc0c <mcp_write>
     314:	60 e0       	ldi	r22, 0x00	; 0
     316:	8d e0       	ldi	r24, 0x0D	; 13
     318:	79 d4       	rcall	.+2290   	; 0xc0c <mcp_write>
     31a:	60 e0       	ldi	r22, 0x00	; 0
     31c:	80 e6       	ldi	r24, 0x60	; 96
     31e:	76 d4       	rcall	.+2284   	; 0xc0c <mcp_write>
     320:	60 e0       	ldi	r22, 0x00	; 0
     322:	80 e7       	ldi	r24, 0x70	; 112
     324:	73 d4       	rcall	.+2278   	; 0xc0c <mcp_write>
     326:	60 e0       	ldi	r22, 0x00	; 0
     328:	80 e2       	ldi	r24, 0x20	; 32
     32a:	70 d4       	rcall	.+2272   	; 0xc0c <mcp_write>
     32c:	60 e0       	ldi	r22, 0x00	; 0
     32e:	81 e2       	ldi	r24, 0x21	; 33
     330:	6d d4       	rcall	.+2266   	; 0xc0c <mcp_write>
     332:	60 e0       	ldi	r22, 0x00	; 0
     334:	82 e2       	ldi	r24, 0x22	; 34
     336:	6a d4       	rcall	.+2260   	; 0xc0c <mcp_write>
     338:	60 e0       	ldi	r22, 0x00	; 0
     33a:	83 e2       	ldi	r24, 0x23	; 35
     33c:	67 d4       	rcall	.+2254   	; 0xc0c <mcp_write>
     33e:	64 e0       	ldi	r22, 0x04	; 4
     340:	8f e0       	ldi	r24, 0x0F	; 15
     342:	64 c4       	rjmp	.+2248   	; 0xc0c <mcp_write>
     344:	08 95       	ret

00000346 <can_tx_message>:
     346:	cf 92       	push	r12
     348:	df 92       	push	r13
     34a:	ef 92       	push	r14
     34c:	ff 92       	push	r15
     34e:	1f 93       	push	r17
     350:	cf 93       	push	r28
     352:	df 93       	push	r29
     354:	6c 01       	movw	r12, r24
     356:	63 e0       	ldi	r22, 0x03	; 3
     358:	80 e3       	ldi	r24, 0x30	; 48
     35a:	58 d4       	rcall	.+2224   	; 0xc0c <mcp_write>
     35c:	f6 01       	movw	r30, r12
     35e:	60 81       	ld	r22, Z
     360:	71 81       	ldd	r23, Z+1	; 0x01
     362:	76 95       	lsr	r23
     364:	67 95       	ror	r22
     366:	76 95       	lsr	r23
     368:	67 95       	ror	r22
     36a:	76 95       	lsr	r23
     36c:	67 95       	ror	r22
     36e:	81 e3       	ldi	r24, 0x31	; 49
     370:	4d d4       	rcall	.+2202   	; 0xc0c <mcp_write>
     372:	f6 01       	movw	r30, r12
     374:	60 81       	ld	r22, Z
     376:	62 95       	swap	r22
     378:	66 0f       	add	r22, r22
     37a:	60 7e       	andi	r22, 0xE0	; 224
     37c:	82 e3       	ldi	r24, 0x32	; 50
     37e:	46 d4       	rcall	.+2188   	; 0xc0c <mcp_write>
     380:	f6 01       	movw	r30, r12
     382:	62 81       	ldd	r22, Z+2	; 0x02
     384:	85 e3       	ldi	r24, 0x35	; 53
     386:	42 d4       	rcall	.+2180   	; 0xc0c <mcp_write>
     388:	f6 01       	movw	r30, r12
     38a:	82 81       	ldd	r24, Z+2	; 0x02
     38c:	88 23       	and	r24, r24
     38e:	a1 f0       	breq	.+40     	; 0x3b8 <can_tx_message+0x72>
     390:	76 01       	movw	r14, r12
     392:	f3 e0       	ldi	r31, 0x03	; 3
     394:	ef 0e       	add	r14, r31
     396:	f1 1c       	adc	r15, r1
     398:	16 e3       	ldi	r17, 0x36	; 54
     39a:	c0 e0       	ldi	r28, 0x00	; 0
     39c:	d0 e0       	ldi	r29, 0x00	; 0
     39e:	f7 01       	movw	r30, r14
     3a0:	61 91       	ld	r22, Z+
     3a2:	7f 01       	movw	r14, r30
     3a4:	81 2f       	mov	r24, r17
     3a6:	32 d4       	rcall	.+2148   	; 0xc0c <mcp_write>
     3a8:	21 96       	adiw	r28, 0x01	; 1
     3aa:	1f 5f       	subi	r17, 0xFF	; 255
     3ac:	f6 01       	movw	r30, r12
     3ae:	82 81       	ldd	r24, Z+2	; 0x02
     3b0:	90 e0       	ldi	r25, 0x00	; 0
     3b2:	c8 17       	cp	r28, r24
     3b4:	d9 07       	cpc	r29, r25
     3b6:	9c f3       	brlt	.-26     	; 0x39e <can_tx_message+0x58>
     3b8:	40 e0       	ldi	r20, 0x00	; 0
     3ba:	60 e0       	ldi	r22, 0x00	; 0
     3bc:	81 e0       	ldi	r24, 0x01	; 1
     3be:	55 d4       	rcall	.+2218   	; 0xc6a <mcp_request_to_send>
     3c0:	df 91       	pop	r29
     3c2:	cf 91       	pop	r28
     3c4:	1f 91       	pop	r17
     3c6:	ff 90       	pop	r15
     3c8:	ef 90       	pop	r14
     3ca:	df 90       	pop	r13
     3cc:	cf 90       	pop	r12
     3ce:	08 95       	ret

000003d0 <can_rx_message>:
     3d0:	ff 92       	push	r15
     3d2:	0f 93       	push	r16
     3d4:	1f 93       	push	r17
     3d6:	cf 93       	push	r28
     3d8:	df 93       	push	r29
     3da:	8c 01       	movw	r16, r24
     3dc:	60 d4       	rcall	.+2240   	; 0xc9e <mcp_read_status>
     3de:	80 ff       	sbrs	r24, 0
     3e0:	3b c0       	rjmp	.+118    	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
     3e2:	81 e6       	ldi	r24, 0x61	; 97
     3e4:	fc d3       	rcall	.+2040   	; 0xbde <mcp_read>
     3e6:	28 e0       	ldi	r18, 0x08	; 8
     3e8:	82 9f       	mul	r24, r18
     3ea:	c0 01       	movw	r24, r0
     3ec:	11 24       	eor	r1, r1
     3ee:	f8 01       	movw	r30, r16
     3f0:	91 83       	std	Z+1, r25	; 0x01
     3f2:	80 83       	st	Z, r24
     3f4:	82 e6       	ldi	r24, 0x62	; 98
     3f6:	f3 d3       	rcall	.+2022   	; 0xbde <mcp_read>
     3f8:	f8 01       	movw	r30, r16
     3fa:	20 81       	ld	r18, Z
     3fc:	31 81       	ldd	r19, Z+1	; 0x01
     3fe:	82 95       	swap	r24
     400:	86 95       	lsr	r24
     402:	87 70       	andi	r24, 0x07	; 7
     404:	28 2b       	or	r18, r24
     406:	31 83       	std	Z+1, r19	; 0x01
     408:	20 83       	st	Z, r18
     40a:	85 e6       	ldi	r24, 0x65	; 101
     40c:	e8 d3       	rcall	.+2000   	; 0xbde <mcp_read>
     40e:	f8 01       	movw	r30, r16
     410:	82 83       	std	Z+2, r24	; 0x02
     412:	82 81       	ldd	r24, Z+2	; 0x02
     414:	89 30       	cpi	r24, 0x09	; 9
     416:	10 f0       	brcs	.+4      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
     418:	88 e0       	ldi	r24, 0x08	; 8
     41a:	82 83       	std	Z+2, r24	; 0x02
     41c:	f8 01       	movw	r30, r16
     41e:	82 81       	ldd	r24, Z+2	; 0x02
     420:	88 23       	and	r24, r24
     422:	a1 f0       	breq	.+40     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
     424:	0f 2e       	mov	r0, r31
     426:	f6 e6       	ldi	r31, 0x66	; 102
     428:	ff 2e       	mov	r15, r31
     42a:	f0 2d       	mov	r31, r0
     42c:	c0 e0       	ldi	r28, 0x00	; 0
     42e:	d0 e0       	ldi	r29, 0x00	; 0
     430:	8f 2d       	mov	r24, r15
     432:	d5 d3       	rcall	.+1962   	; 0xbde <mcp_read>
     434:	f8 01       	movw	r30, r16
     436:	ec 0f       	add	r30, r28
     438:	fd 1f       	adc	r31, r29
     43a:	83 83       	std	Z+3, r24	; 0x03
     43c:	21 96       	adiw	r28, 0x01	; 1
     43e:	f8 01       	movw	r30, r16
     440:	82 81       	ldd	r24, Z+2	; 0x02
     442:	f3 94       	inc	r15
     444:	90 e0       	ldi	r25, 0x00	; 0
     446:	c8 17       	cp	r28, r24
     448:	d9 07       	cpc	r29, r25
     44a:	94 f3       	brlt	.-28     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
     44c:	40 e0       	ldi	r20, 0x00	; 0
     44e:	61 e0       	ldi	r22, 0x01	; 1
     450:	8c e2       	ldi	r24, 0x2C	; 44
     452:	f2 d3       	rcall	.+2020   	; 0xc38 <mcp_modify_bit>
     454:	81 e0       	ldi	r24, 0x01	; 1
     456:	01 c0       	rjmp	.+2      	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
     458:	80 e0       	ldi	r24, 0x00	; 0
     45a:	df 91       	pop	r29
     45c:	cf 91       	pop	r28
     45e:	1f 91       	pop	r17
     460:	0f 91       	pop	r16
     462:	ff 90       	pop	r15
     464:	08 95       	ret

00000466 <motor_disable>:
	motor_disable();
}


void motor_disable() {
	MOTOR_PORT &= ~(1 << EN_PIN);
     466:	e2 e0       	ldi	r30, 0x02	; 2
     468:	f1 e0       	ldi	r31, 0x01	; 1
     46a:	80 81       	ld	r24, Z
     46c:	8f 7e       	andi	r24, 0xEF	; 239
     46e:	80 83       	st	Z, r24
     470:	08 95       	ret

00000472 <motor_init>:
float integrated_error = 0;
float prev_position_error = 0;
float velocity = 0.0;


void motor_init() {
     472:	cf 93       	push	r28
     474:	df 93       	push	r29
	ENCODER_DDR |= (1 << ENCODER_NOE_PIN);
     476:	c1 e0       	ldi	r28, 0x01	; 1
     478:	d1 e0       	ldi	r29, 0x01	; 1
     47a:	88 81       	ld	r24, Y
     47c:	80 62       	ori	r24, 0x20	; 32
     47e:	88 83       	st	Y, r24
	ENCODER_DDR |= (1 << ENCODER_SEL_PIN);
     480:	88 81       	ld	r24, Y
     482:	88 60       	ori	r24, 0x08	; 8
     484:	88 83       	st	Y, r24
	ENCODER_DDR |= (1 << ENCODER_RST_PIN);
     486:	88 81       	ld	r24, Y
     488:	80 64       	ori	r24, 0x40	; 64
     48a:	88 83       	st	Y, r24
	ENCODER_PORT |= (1 << ENCODER_NOE_PIN);
     48c:	e2 e0       	ldi	r30, 0x02	; 2
     48e:	f1 e0       	ldi	r31, 0x01	; 1
     490:	80 81       	ld	r24, Z
     492:	80 62       	ori	r24, 0x20	; 32
     494:	80 83       	st	Z, r24
	ENCODER_PORT &= ~(1 << ENCODER_SEL_PIN);
     496:	80 81       	ld	r24, Z
     498:	87 7f       	andi	r24, 0xF7	; 247
     49a:	80 83       	st	Z, r24
	ENCODER_PORT |= (1 << ENCODER_RST_PIN);
     49c:	80 81       	ld	r24, Z
     49e:	80 64       	ori	r24, 0x40	; 64

	TWI_Master_Initialise();
     4a0:	80 83       	st	Z, r24
	
	MOTOR_DDR |= (1 << EN_PIN);
     4a2:	ce d2       	rcall	.+1436   	; 0xa40 <TWI_Master_Initialise>
     4a4:	88 81       	ld	r24, Y
     4a6:	80 61       	ori	r24, 0x10	; 16
	MOTOR_DDR |= (1 << DIR_PIN);
     4a8:	88 83       	st	Y, r24
     4aa:	88 81       	ld	r24, Y

	motor_disable();
     4ac:	82 60       	ori	r24, 0x02	; 2
     4ae:	88 83       	st	Y, r24
}
     4b0:	da df       	rcall	.-76     	; 0x466 <motor_disable>
     4b2:	df 91       	pop	r29
     4b4:	cf 91       	pop	r28
     4b6:	08 95       	ret

000004b8 <motor_enable>:
void motor_disable() {
	MOTOR_PORT &= ~(1 << EN_PIN);
}

void motor_enable() {
	MOTOR_PORT |= (1 << EN_PIN);
     4b8:	e2 e0       	ldi	r30, 0x02	; 2
     4ba:	f1 e0       	ldi	r31, 0x01	; 1
     4bc:	80 81       	ld	r24, Z
     4be:	80 61       	ori	r24, 0x10	; 16
     4c0:	80 83       	st	Z, r24
     4c2:	08 95       	ret

000004c4 <motor_set>:
}


void motor_set(uint8_t speed, motor_direction_t direction) {
     4c4:	cf 93       	push	r28
     4c6:	df 93       	push	r29
     4c8:	cd b7       	in	r28, 0x3d	; 61
     4ca:	de b7       	in	r29, 0x3e	; 62
     4cc:	29 97       	sbiw	r28, 0x09	; 9
     4ce:	0f b6       	in	r0, 0x3f	; 63
     4d0:	f8 94       	cli
     4d2:	de bf       	out	0x3e, r29	; 62
     4d4:	0f be       	out	0x3f, r0	; 63
     4d6:	cd bf       	out	0x3d, r28	; 61
	// Set direction pin
	if (direction == DIR_RIGHT) {
     4d8:	61 30       	cpi	r22, 0x01	; 1
     4da:	31 f4       	brne	.+12     	; 0x4e8 <motor_set+0x24>
		MOTOR_PORT |= (1 << DIR_PIN);
     4dc:	e2 e0       	ldi	r30, 0x02	; 2
     4de:	f1 e0       	ldi	r31, 0x01	; 1
     4e0:	90 81       	ld	r25, Z
     4e2:	92 60       	ori	r25, 0x02	; 2
     4e4:	90 83       	st	Z, r25
     4e6:	05 c0       	rjmp	.+10     	; 0x4f2 <motor_set+0x2e>
	} else {
		MOTOR_PORT &= ~(1 << DIR_PIN);
     4e8:	e2 e0       	ldi	r30, 0x02	; 2
     4ea:	f1 e0       	ldi	r31, 0x01	; 1
     4ec:	90 81       	ld	r25, Z
     4ee:	9d 7f       	andi	r25, 0xFD	; 253
     4f0:	90 83       	st	Z, r25
	}

	// Write speed
	uint8_t buffer[] = {0x50, 0x00, speed, 0x01, 0x00, 0x02, 0x00, 0x03, 0x00};
     4f2:	90 e5       	ldi	r25, 0x50	; 80
     4f4:	99 83       	std	Y+1, r25	; 0x01
     4f6:	1a 82       	std	Y+2, r1	; 0x02
     4f8:	8b 83       	std	Y+3, r24	; 0x03
     4fa:	81 e0       	ldi	r24, 0x01	; 1
     4fc:	8c 83       	std	Y+4, r24	; 0x04
     4fe:	1d 82       	std	Y+5, r1	; 0x05
     500:	82 e0       	ldi	r24, 0x02	; 2
     502:	8e 83       	std	Y+6, r24	; 0x06
     504:	1f 82       	std	Y+7, r1	; 0x07
     506:	83 e0       	ldi	r24, 0x03	; 3
     508:	88 87       	std	Y+8, r24	; 0x08
     50a:	19 86       	std	Y+9, r1	; 0x09
	TWI_Start_Transceiver_With_Data(buffer, 9);
     50c:	69 e0       	ldi	r22, 0x09	; 9
     50e:	ce 01       	movw	r24, r28
     510:	01 96       	adiw	r24, 0x01	; 1
     512:	a0 d2       	rcall	.+1344   	; 0xa54 <TWI_Start_Transceiver_With_Data>
}
     514:	29 96       	adiw	r28, 0x09	; 9
     516:	0f b6       	in	r0, 0x3f	; 63
     518:	f8 94       	cli
     51a:	de bf       	out	0x3e, r29	; 62
     51c:	0f be       	out	0x3f, r0	; 63
     51e:	cd bf       	out	0x3d, r28	; 61
     520:	df 91       	pop	r29
     522:	cf 91       	pop	r28
     524:	08 95       	ret

00000526 <motor_regulate>:
		
		motor_set(0, DIR_LEFT);
}


void motor_regulate(float encoder_position, float slider){
     526:	4f 92       	push	r4
     528:	5f 92       	push	r5
     52a:	6f 92       	push	r6
     52c:	7f 92       	push	r7
     52e:	8f 92       	push	r8
     530:	9f 92       	push	r9
     532:	af 92       	push	r10
     534:	bf 92       	push	r11
     536:	cf 92       	push	r12
     538:	df 92       	push	r13
     53a:	ef 92       	push	r14
     53c:	ff 92       	push	r15
     53e:	4b 01       	movw	r8, r22
     540:	5c 01       	movw	r10, r24
     542:	69 01       	movw	r12, r18
     544:	7a 01       	movw	r14, r20
	
	if (slider < 5) slider = 5;
     546:	20 e0       	ldi	r18, 0x00	; 0
     548:	30 e0       	ldi	r19, 0x00	; 0
     54a:	40 ea       	ldi	r20, 0xA0	; 160
     54c:	50 e4       	ldi	r21, 0x40	; 64
     54e:	c7 01       	movw	r24, r14
     550:	b6 01       	movw	r22, r12
     552:	ed d4       	rcall	.+2522   	; 0xf2e <__cmpsf2>
     554:	88 23       	and	r24, r24
     556:	94 f0       	brlt	.+36     	; 0x57c <motor_regulate+0x56>
	if (slider > 250) slider = 250;
     558:	20 e0       	ldi	r18, 0x00	; 0
     55a:	30 e0       	ldi	r19, 0x00	; 0
     55c:	4a e7       	ldi	r20, 0x7A	; 122
     55e:	53 e4       	ldi	r21, 0x43	; 67
     560:	c7 01       	movw	r24, r14
     562:	b6 01       	movw	r22, r12
     564:	33 d6       	rcall	.+3174   	; 0x11cc <__gesf2>
     566:	18 16       	cp	r1, r24
     568:	8c f4       	brge	.+34     	; 0x58c <motor_regulate+0x66>
     56a:	0f 2e       	mov	r0, r31
     56c:	c1 2c       	mov	r12, r1
     56e:	d1 2c       	mov	r13, r1
     570:	fa e7       	ldi	r31, 0x7A	; 122
     572:	ef 2e       	mov	r14, r31
     574:	f3 e4       	ldi	r31, 0x43	; 67
     576:	ff 2e       	mov	r15, r31
     578:	f0 2d       	mov	r31, r0
     57a:	08 c0       	rjmp	.+16     	; 0x58c <motor_regulate+0x66>
}


void motor_regulate(float encoder_position, float slider){
	
	if (slider < 5) slider = 5;
     57c:	0f 2e       	mov	r0, r31
     57e:	c1 2c       	mov	r12, r1
     580:	d1 2c       	mov	r13, r1
     582:	f0 ea       	ldi	r31, 0xA0	; 160
     584:	ef 2e       	mov	r14, r31
     586:	f0 e4       	ldi	r31, 0x40	; 64
     588:	ff 2e       	mov	r15, r31
     58a:	f0 2d       	mov	r31, r0
	if (slider > 250) slider = 250;
	
	float error = slider - encoder_position;
     58c:	a5 01       	movw	r20, r10
     58e:	94 01       	movw	r18, r8
     590:	c7 01       	movw	r24, r14
     592:	b6 01       	movw	r22, r12
     594:	67 d4       	rcall	.+2254   	; 0xe64 <__subsf3>
     596:	6b 01       	movw	r12, r22
     598:	7c 01       	movw	r14, r24
	integrated_error += error;
     59a:	20 91 0a 02 	lds	r18, 0x020A	; 0x80020a <integrated_error>
     59e:	30 91 0b 02 	lds	r19, 0x020B	; 0x80020b <integrated_error+0x1>
     5a2:	40 91 0c 02 	lds	r20, 0x020C	; 0x80020c <integrated_error+0x2>
     5a6:	50 91 0d 02 	lds	r21, 0x020D	; 0x80020d <integrated_error+0x3>
     5aa:	5d d4       	rcall	.+2234   	; 0xe66 <__addsf3>
     5ac:	2b 01       	movw	r4, r22
     5ae:	3c 01       	movw	r6, r24
     5b0:	60 93 0a 02 	sts	0x020A, r22	; 0x80020a <integrated_error>
     5b4:	70 93 0b 02 	sts	0x020B, r23	; 0x80020b <integrated_error+0x1>
     5b8:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <integrated_error+0x2>
     5bc:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <integrated_error+0x3>
	velocity = 0.95 * velocity + 0.05 * (error - prev_position_error);
     5c0:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <prev_position_error>
     5c4:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <prev_position_error+0x1>
     5c8:	40 91 08 02 	lds	r20, 0x0208	; 0x800208 <prev_position_error+0x2>
     5cc:	50 91 09 02 	lds	r21, 0x0209	; 0x800209 <prev_position_error+0x3>
     5d0:	c7 01       	movw	r24, r14
     5d2:	b6 01       	movw	r22, r12
     5d4:	47 d4       	rcall	.+2190   	; 0xe64 <__subsf3>
     5d6:	2d ec       	ldi	r18, 0xCD	; 205
     5d8:	3c ec       	ldi	r19, 0xCC	; 204
     5da:	4c e4       	ldi	r20, 0x4C	; 76
     5dc:	5d e3       	ldi	r21, 0x3D	; 61
     5de:	fa d5       	rcall	.+3060   	; 0x11d4 <__mulsf3>
     5e0:	4b 01       	movw	r8, r22
     5e2:	5c 01       	movw	r10, r24
     5e4:	23 e3       	ldi	r18, 0x33	; 51
     5e6:	33 e3       	ldi	r19, 0x33	; 51
     5e8:	43 e7       	ldi	r20, 0x73	; 115
     5ea:	5f e3       	ldi	r21, 0x3F	; 63
     5ec:	60 91 02 02 	lds	r22, 0x0202	; 0x800202 <__data_end>
     5f0:	70 91 03 02 	lds	r23, 0x0203	; 0x800203 <__data_end+0x1>
     5f4:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <__data_end+0x2>
     5f8:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <__data_end+0x3>
     5fc:	eb d5       	rcall	.+3030   	; 0x11d4 <__mulsf3>
     5fe:	9b 01       	movw	r18, r22
     600:	ac 01       	movw	r20, r24
     602:	c5 01       	movw	r24, r10
     604:	b4 01       	movw	r22, r8
     606:	2f d4       	rcall	.+2142   	; 0xe66 <__addsf3>
     608:	4b 01       	movw	r8, r22
     60a:	5c 01       	movw	r10, r24
     60c:	60 93 02 02 	sts	0x0202, r22	; 0x800202 <__data_end>
     610:	70 93 03 02 	sts	0x0203, r23	; 0x800203 <__data_end+0x1>
     614:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <__data_end+0x2>
     618:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <__data_end+0x3>

	float voltage = Ki * integrated_error + Kp * error + Kd * velocity;
     61c:	2e ed       	ldi	r18, 0xDE	; 222
     61e:	3d e6       	ldi	r19, 0x6D	; 109
     620:	4e ed       	ldi	r20, 0xDE	; 222
     622:	5b e3       	ldi	r21, 0x3B	; 59
     624:	c3 01       	movw	r24, r6
     626:	b2 01       	movw	r22, r4
     628:	d5 d5       	rcall	.+2986   	; 0x11d4 <__mulsf3>
     62a:	2b 01       	movw	r4, r22
     62c:	3c 01       	movw	r6, r24
     62e:	2b e4       	ldi	r18, 0x4B	; 75
     630:	37 e3       	ldi	r19, 0x37	; 55
     632:	49 e5       	ldi	r20, 0x59	; 89
     634:	50 e4       	ldi	r21, 0x40	; 64
     636:	c7 01       	movw	r24, r14
     638:	b6 01       	movw	r22, r12
     63a:	cc d5       	rcall	.+2968   	; 0x11d4 <__mulsf3>
     63c:	9b 01       	movw	r18, r22
     63e:	ac 01       	movw	r20, r24
     640:	c3 01       	movw	r24, r6
     642:	b2 01       	movw	r22, r4
     644:	10 d4       	rcall	.+2080   	; 0xe66 <__addsf3>
     646:	2b 01       	movw	r4, r22
     648:	3c 01       	movw	r6, r24
     64a:	2f e8       	ldi	r18, 0x8F	; 143
     64c:	32 ec       	ldi	r19, 0xC2	; 194
     64e:	47 e0       	ldi	r20, 0x07	; 7
     650:	52 e4       	ldi	r21, 0x42	; 66
     652:	c5 01       	movw	r24, r10
     654:	b4 01       	movw	r22, r8
     656:	be d5       	rcall	.+2940   	; 0x11d4 <__mulsf3>
     658:	9b 01       	movw	r18, r22
     65a:	ac 01       	movw	r20, r24
     65c:	c3 01       	movw	r24, r6
     65e:	b2 01       	movw	r22, r4
     660:	02 d4       	rcall	.+2052   	; 0xe66 <__addsf3>
     662:	4b 01       	movw	r8, r22

	prev_position_error = error;
     664:	5c 01       	movw	r10, r24
     666:	c0 92 06 02 	sts	0x0206, r12	; 0x800206 <prev_position_error>
     66a:	d0 92 07 02 	sts	0x0207, r13	; 0x800207 <prev_position_error+0x1>
     66e:	e0 92 08 02 	sts	0x0208, r14	; 0x800208 <prev_position_error+0x2>
     672:	f0 92 09 02 	sts	0x0209, r15	; 0x800209 <prev_position_error+0x3>

	bool voltage_negative = (voltage < 0);

	if (voltage_negative) {
     676:	20 e0       	ldi	r18, 0x00	; 0
     678:	30 e0       	ldi	r19, 0x00	; 0
     67a:	a9 01       	movw	r20, r18
     67c:	58 d4       	rcall	.+2224   	; 0xf2e <__cmpsf2>
     67e:	88 23       	and	r24, r24
		voltage = -voltage;
     680:	24 f4       	brge	.+8      	; 0x68a <motor_regulate+0x164>
     682:	c5 01       	movw	r24, r10
     684:	b4 01       	movw	r22, r8
	
	float error = slider - encoder_position;
	integrated_error += error;
	velocity = 0.95 * velocity + 0.05 * (error - prev_position_error);

	float voltage = Ki * integrated_error + Kp * error + Kd * velocity;
     686:	90 58       	subi	r25, 0x80	; 128
     688:	02 c0       	rjmp	.+4      	; 0x68e <motor_regulate+0x168>

	if (voltage_negative) {
		voltage = -voltage;
	}

	voltage += deadband;
     68a:	c5 01       	movw	r24, r10
     68c:	b4 01       	movw	r22, r8
     68e:	20 e0       	ldi	r18, 0x00	; 0
     690:	30 e0       	ldi	r19, 0x00	; 0
     692:	40 ea       	ldi	r20, 0xA0	; 160
     694:	51 e4       	ldi	r21, 0x41	; 65
     696:	e7 d3       	rcall	.+1998   	; 0xe66 <__addsf3>
     698:	2b 01       	movw	r4, r22

	if (voltage > 200) {
     69a:	3c 01       	movw	r6, r24
     69c:	20 e0       	ldi	r18, 0x00	; 0
     69e:	30 e0       	ldi	r19, 0x00	; 0
     6a0:	48 e4       	ldi	r20, 0x48	; 72
     6a2:	53 e4       	ldi	r21, 0x43	; 67
     6a4:	93 d5       	rcall	.+2854   	; 0x11cc <__gesf2>
     6a6:	18 16       	cp	r1, r24
		voltage = 200;
     6a8:	44 f4       	brge	.+16     	; 0x6ba <motor_regulate+0x194>
     6aa:	0f 2e       	mov	r0, r31
     6ac:	41 2c       	mov	r4, r1
     6ae:	51 2c       	mov	r5, r1
     6b0:	f8 e4       	ldi	r31, 0x48	; 72
     6b2:	6f 2e       	mov	r6, r31
     6b4:	f3 e4       	ldi	r31, 0x43	; 67
	}

	motor_set((uint8_t)voltage, voltage_negative ? DIR_LEFT : DIR_RIGHT);
     6b6:	7f 2e       	mov	r7, r31
     6b8:	f0 2d       	mov	r31, r0
     6ba:	20 e0       	ldi	r18, 0x00	; 0
     6bc:	30 e0       	ldi	r19, 0x00	; 0
     6be:	a9 01       	movw	r20, r18
     6c0:	c5 01       	movw	r24, r10
     6c2:	b4 01       	movw	r22, r8
     6c4:	34 d4       	rcall	.+2152   	; 0xf2e <__cmpsf2>
     6c6:	88 1f       	adc	r24, r24
     6c8:	88 27       	eor	r24, r24
     6ca:	88 1f       	adc	r24, r24
     6cc:	91 e0       	ldi	r25, 0x01	; 1
     6ce:	f8 2e       	mov	r15, r24
     6d0:	f9 26       	eor	r15, r25
     6d2:	c3 01       	movw	r24, r6
     6d4:	b2 01       	movw	r22, r4
     6d6:	9c d4       	rcall	.+2360   	; 0x1010 <__fixunssfsi>
     6d8:	86 2f       	mov	r24, r22
     6da:	6f 2d       	mov	r22, r15
     6dc:	f3 de       	rcall	.-538    	; 0x4c4 <motor_set>
}
     6de:	ff 90       	pop	r15
     6e0:	ef 90       	pop	r14
     6e2:	df 90       	pop	r13
     6e4:	cf 90       	pop	r12
     6e6:	bf 90       	pop	r11
     6e8:	af 90       	pop	r10
     6ea:	9f 90       	pop	r9
     6ec:	8f 90       	pop	r8
     6ee:	7f 90       	pop	r7
     6f0:	6f 90       	pop	r6
     6f2:	5f 90       	pop	r5
     6f4:	4f 90       	pop	r4
     6f6:	08 95       	ret

000006f8 <motor_reset_encoder>:


void motor_reset_encoder() {
	// Pulse !reset pin
	ENCODER_PORT &= ~(1 << ENCODER_RST_PIN);
     6f8:	e2 e0       	ldi	r30, 0x02	; 2
     6fa:	f1 e0       	ldi	r31, 0x01	; 1
     6fc:	80 81       	ld	r24, Z
     6fe:	8f 7b       	andi	r24, 0xBF	; 191
     700:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     702:	85 e3       	ldi	r24, 0x35	; 53
     704:	8a 95       	dec	r24
     706:	f1 f7       	brne	.-4      	; 0x704 <motor_reset_encoder+0xc>
     708:	00 00       	nop
	_delay_us(10);
	ENCODER_PORT |= (1 << ENCODER_RST_PIN);
     70a:	80 81       	ld	r24, Z
     70c:	80 64       	ori	r24, 0x40	; 64
     70e:	80 83       	st	Z, r24
     710:	08 95       	ret

00000712 <motor_get_position>:
}

float motor_get_position() {
	// Enable output
	ENCODER_PORT &= ~(1 << ENCODER_NOE_PIN);
     712:	e2 e0       	ldi	r30, 0x02	; 2
     714:	f1 e0       	ldi	r31, 0x01	; 1
     716:	80 81       	ld	r24, Z
     718:	8f 7d       	andi	r24, 0xDF	; 223
     71a:	80 83       	st	Z, r24
	
	// Select MSB
	ENCODER_PORT &= ~(1 << ENCODER_SEL_PIN);
     71c:	80 81       	ld	r24, Z
     71e:	87 7f       	andi	r24, 0xF7	; 247
     720:	80 83       	st	Z, r24
     722:	8a e6       	ldi	r24, 0x6A	; 106
     724:	8a 95       	dec	r24
     726:	f1 f7       	brne	.-4      	; 0x724 <motor_get_position+0x12>
     728:	00 c0       	rjmp	.+0      	; 0x72a <motor_get_position+0x18>

	_delay_us(20);

	int8_t msb = ENCODER_DATA;
     72a:	a6 e0       	ldi	r26, 0x06	; 6
     72c:	b1 e0       	ldi	r27, 0x01	; 1
     72e:	6c 91       	ld	r22, X
	
	// Select LSB
	ENCODER_PORT |= (1 << ENCODER_SEL_PIN);
     730:	80 81       	ld	r24, Z
     732:	88 60       	ori	r24, 0x08	; 8
     734:	80 83       	st	Z, r24
     736:	8a e6       	ldi	r24, 0x6A	; 106
     738:	8a 95       	dec	r24
     73a:	f1 f7       	brne	.-4      	; 0x738 <motor_get_position+0x26>
     73c:	00 c0       	rjmp	.+0      	; 0x73e <motor_get_position+0x2c>
	
	_delay_us(20);

	uint8_t lsb = ENCODER_DATA;
     73e:	9c 91       	ld	r25, X

	// Disable output
	ENCODER_PORT |= (1 << ENCODER_NOE_PIN);
     740:	80 81       	ld	r24, Z
     742:	80 62       	ori	r24, 0x20	; 32
     744:	80 83       	st	Z, r24
	
	//Calculate scaled encoder position
	float enc_pos = (msb << 8) | lsb;
	return 255.0 * enc_pos / -8657.0;
     746:	06 2e       	mov	r0, r22
     748:	00 0c       	add	r0, r0
     74a:	77 0b       	sbc	r23, r23
     74c:	76 2f       	mov	r23, r22
     74e:	66 27       	eor	r22, r22
     750:	69 2b       	or	r22, r25
     752:	07 2e       	mov	r0, r23
     754:	00 0c       	add	r0, r0
     756:	88 0b       	sbc	r24, r24
     758:	99 0b       	sbc	r25, r25
     75a:	88 d4       	rcall	.+2320   	; 0x106c <__floatsisf>
     75c:	20 e0       	ldi	r18, 0x00	; 0
     75e:	30 e0       	ldi	r19, 0x00	; 0
     760:	4f e7       	ldi	r20, 0x7F	; 127
     762:	53 e4       	ldi	r21, 0x43	; 67
     764:	37 d5       	rcall	.+2670   	; 0x11d4 <__mulsf3>
     766:	20 e0       	ldi	r18, 0x00	; 0
     768:	34 e4       	ldi	r19, 0x44	; 68
     76a:	47 e0       	ldi	r20, 0x07	; 7
     76c:	56 ec       	ldi	r21, 0xC6	; 198
     76e:	e3 c3       	rjmp	.+1990   	; 0xf36 <__divsf3>

00000770 <motor_calibrate_position>:
	uint8_t buffer[] = {0x50, 0x00, speed, 0x01, 0x00, 0x02, 0x00, 0x03, 0x00};
	TWI_Start_Transceiver_With_Data(buffer, 9);
}


void motor_calibrate_position(){
     770:	0f 93       	push	r16
     772:	1f 93       	push	r17
     774:	cf 93       	push	r28
		// Home the motor to the left edge
		motor_enable();
     776:	df 93       	push	r29
		motor_set(100, DIR_LEFT);
     778:	9f de       	rcall	.-706    	; 0x4b8 <motor_enable>
     77a:	60 e0       	ldi	r22, 0x00	; 0
     77c:	84 e6       	ldi	r24, 0x64	; 100
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     77e:	a2 de       	rcall	.-700    	; 0x4c4 <motor_set>
     780:	2f ef       	ldi	r18, 0xFF	; 255
     782:	33 ec       	ldi	r19, 0xC3	; 195
     784:	49 e0       	ldi	r20, 0x09	; 9
     786:	21 50       	subi	r18, 0x01	; 1
     788:	30 40       	sbci	r19, 0x00	; 0
     78a:	40 40       	sbci	r20, 0x00	; 0
     78c:	e1 f7       	brne	.-8      	; 0x786 <motor_calibrate_position+0x16>

		_delay_ms(200);
		motor_reset_encoder();
     78e:	00 c0       	rjmp	.+0      	; 0x790 <motor_calibrate_position+0x20>
     790:	00 00       	nop
		
		int consecutive_same = 0;
     792:	b2 df       	rcall	.-156    	; 0x6f8 <motor_reset_encoder>
		int16_t stationary_value = 0;
		while(consecutive_same < 10) {
			int16_t encoder_reading = motor_get_position();
     794:	c0 e0       	ldi	r28, 0x00	; 0
     796:	d0 e0       	ldi	r29, 0x00	; 0
     798:	00 e0       	ldi	r16, 0x00	; 0
     79a:	10 e0       	ldi	r17, 0x00	; 0
			if (encoder_reading == stationary_value) {
     79c:	ba df       	rcall	.-140    	; 0x712 <motor_get_position>
     79e:	33 d4       	rcall	.+2150   	; 0x1006 <__fixsfsi>
     7a0:	c6 17       	cp	r28, r22
				consecutive_same++;
     7a2:	d7 07       	cpc	r29, r23
     7a4:	11 f4       	brne	.+4      	; 0x7aa <motor_calibrate_position+0x3a>
     7a6:	0f 5f       	subi	r16, 0xFF	; 255
     7a8:	1f 4f       	sbci	r17, 0xFF	; 255
     7aa:	2f ef       	ldi	r18, 0xFF	; 255
     7ac:	39 ef       	ldi	r19, 0xF9	; 249
     7ae:	40 e0       	ldi	r20, 0x00	; 0
     7b0:	21 50       	subi	r18, 0x01	; 1
     7b2:	30 40       	sbci	r19, 0x00	; 0
     7b4:	40 40       	sbci	r20, 0x00	; 0
     7b6:	e1 f7       	brne	.-8      	; 0x7b0 <motor_calibrate_position+0x40>
		_delay_ms(200);
		motor_reset_encoder();
		
		int consecutive_same = 0;
		int16_t stationary_value = 0;
		while(consecutive_same < 10) {
     7b8:	00 c0       	rjmp	.+0      	; 0x7ba <motor_calibrate_position+0x4a>
     7ba:	00 00       	nop
				stationary_value = encoder_reading;
			}
			_delay_ms(20);
		}
		
		motor_set(0, DIR_LEFT);
     7bc:	eb 01       	movw	r28, r22
     7be:	0a 30       	cpi	r16, 0x0A	; 10
     7c0:	11 05       	cpc	r17, r1
     7c2:	64 f3       	brlt	.-40     	; 0x79c <motor_calibrate_position+0x2c>
}
     7c4:	60 e0       	ldi	r22, 0x00	; 0
     7c6:	80 e0       	ldi	r24, 0x00	; 0
     7c8:	7d de       	rcall	.-774    	; 0x4c4 <motor_set>
     7ca:	df 91       	pop	r29
     7cc:	cf 91       	pop	r28
     7ce:	1f 91       	pop	r17
     7d0:	0f 91       	pop	r16
     7d2:	08 95       	ret

000007d4 <shooter_init>:
#define SHOOTER_PORT PORTF
#define SHOOTER_PIN 1


void shooter_init() {
	SHOOTER_DDR |= (1 << SHOOTER_PIN);
     7d4:	81 9a       	sbi	0x10, 1	; 16
	SHOOTER_PORT &= ~(1 << SHOOTER_PIN);
     7d6:	89 98       	cbi	0x11, 1	; 17
     7d8:	08 95       	ret

000007da <shooter_shoot>:
}

void shooter_shoot() {
	SHOOTER_PORT |= (1 << SHOOTER_PIN);
     7da:	89 9a       	sbi	0x11, 1	; 17
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	81 ee       	ldi	r24, 0xE1	; 225
     7e0:	94 e0       	ldi	r25, 0x04	; 4
     7e2:	21 50       	subi	r18, 0x01	; 1
     7e4:	80 40       	sbci	r24, 0x00	; 0
     7e6:	90 40       	sbci	r25, 0x00	; 0
     7e8:	e1 f7       	brne	.-8      	; 0x7e2 <shooter_shoot+0x8>
     7ea:	00 c0       	rjmp	.+0      	; 0x7ec <shooter_shoot+0x12>
     7ec:	00 00       	nop
	_delay_ms(SHOOTER_PULSE_DURATION_MS);
	SHOOTER_PORT &= ~(1 << SHOOTER_PIN);
     7ee:	89 98       	cbi	0x11, 1	; 17
     7f0:	08 95       	ret

000007f2 <delay_var_us>:
#include "motor.h"

#include "song.h"


void delay_var_us(int us) {
     7f2:	cf 93       	push	r28
     7f4:	df 93       	push	r29
     7f6:	1f 92       	push	r1
     7f8:	1f 92       	push	r1
     7fa:	cd b7       	in	r28, 0x3d	; 61
     7fc:	de b7       	in	r29, 0x3e	; 62
	for(volatile int i = 0; i < us; i++) {
     7fe:	1a 82       	std	Y+2, r1	; 0x02
     800:	19 82       	std	Y+1, r1	; 0x01
     802:	29 81       	ldd	r18, Y+1	; 0x01
     804:	3a 81       	ldd	r19, Y+2	; 0x02
     806:	28 17       	cp	r18, r24
     808:	39 07       	cpc	r19, r25
     80a:	7c f4       	brge	.+30     	; 0x82a <delay_var_us+0x38>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     80c:	25 e0       	ldi	r18, 0x05	; 5
     80e:	2a 95       	dec	r18
     810:	f1 f7       	brne	.-4      	; 0x80e <delay_var_us+0x1c>
     812:	00 00       	nop
     814:	29 81       	ldd	r18, Y+1	; 0x01
     816:	3a 81       	ldd	r19, Y+2	; 0x02
     818:	2f 5f       	subi	r18, 0xFF	; 255
     81a:	3f 4f       	sbci	r19, 0xFF	; 255
     81c:	3a 83       	std	Y+2, r19	; 0x02
     81e:	29 83       	std	Y+1, r18	; 0x01
     820:	29 81       	ldd	r18, Y+1	; 0x01
     822:	3a 81       	ldd	r19, Y+2	; 0x02
     824:	28 17       	cp	r18, r24
     826:	39 07       	cpc	r19, r25
     828:	8c f3       	brlt	.-30     	; 0x80c <delay_var_us+0x1a>
		_delay_us(1);
	}
}
     82a:	0f 90       	pop	r0
     82c:	0f 90       	pop	r0
     82e:	df 91       	pop	r29
     830:	cf 91       	pop	r28
     832:	08 95       	ret

00000834 <buzz>:

const int motor_amplitude = 200;


void buzz(long frequency, long length) {
     834:	8f 92       	push	r8
     836:	9f 92       	push	r9
     838:	af 92       	push	r10
     83a:	bf 92       	push	r11
     83c:	cf 92       	push	r12
     83e:	df 92       	push	r13
     840:	ef 92       	push	r14
     842:	ff 92       	push	r15
     844:	1f 93       	push	r17
     846:	cf 93       	push	r28
     848:	df 93       	push	r29
     84a:	cd b7       	in	r28, 0x3d	; 61
     84c:	de b7       	in	r29, 0x3e	; 62
     84e:	28 97       	sbiw	r28, 0x08	; 8
     850:	0f b6       	in	r0, 0x3f	; 63
     852:	f8 94       	cli
     854:	de bf       	out	0x3e, r29	; 62
     856:	0f be       	out	0x3f, r0	; 63
     858:	cd bf       	out	0x3d, r28	; 61
     85a:	4b 01       	movw	r8, r22
     85c:	5c 01       	movw	r10, r24
     85e:	69 01       	movw	r12, r18
     860:	7a 01       	movw	r14, r20
	volatile long delayValue = 1000000 / frequency / 2;
     862:	60 e2       	ldi	r22, 0x20	; 32
     864:	71 ea       	ldi	r23, 0xA1	; 161
     866:	87 e0       	ldi	r24, 0x07	; 7
     868:	90 e0       	ldi	r25, 0x00	; 0
     86a:	a5 01       	movw	r20, r10
     86c:	94 01       	movw	r18, r8
     86e:	46 d5       	rcall	.+2700   	; 0x12fc <__divmodsi4>
     870:	29 83       	std	Y+1, r18	; 0x01
     872:	3a 83       	std	Y+2, r19	; 0x02
     874:	4b 83       	std	Y+3, r20	; 0x03
     876:	5c 83       	std	Y+4, r21	; 0x04
	volatile long numCycles = frequency * length / 1000;
     878:	a5 01       	movw	r20, r10
     87a:	94 01       	movw	r18, r8
     87c:	c7 01       	movw	r24, r14
     87e:	b6 01       	movw	r22, r12
     880:	0c d5       	rcall	.+2584   	; 0x129a <__mulsi3>
     882:	28 ee       	ldi	r18, 0xE8	; 232
     884:	33 e0       	ldi	r19, 0x03	; 3
     886:	40 e0       	ldi	r20, 0x00	; 0
     888:	50 e0       	ldi	r21, 0x00	; 0
     88a:	38 d5       	rcall	.+2672   	; 0x12fc <__divmodsi4>
     88c:	2d 83       	std	Y+5, r18	; 0x05
     88e:	3e 83       	std	Y+6, r19	; 0x06
     890:	4f 83       	std	Y+7, r20	; 0x07
     892:	58 87       	std	Y+8, r21	; 0x08

	for (long i = 0; i < numCycles; i++) {
     894:	8d 81       	ldd	r24, Y+5	; 0x05
     896:	9e 81       	ldd	r25, Y+6	; 0x06
     898:	af 81       	ldd	r26, Y+7	; 0x07
     89a:	b8 85       	ldd	r27, Y+8	; 0x08
     89c:	18 16       	cp	r1, r24
     89e:	19 06       	cpc	r1, r25
     8a0:	1a 06       	cpc	r1, r26
     8a2:	1b 06       	cpc	r1, r27
     8a4:	4c f5       	brge	.+82     	; 0x8f8 <buzz+0xc4>
     8a6:	8f ef       	ldi	r24, 0xFF	; 255
     8a8:	88 16       	cp	r8, r24
     8aa:	98 06       	cpc	r9, r24
     8ac:	a8 06       	cpc	r10, r24
     8ae:	b8 06       	cpc	r11, r24
     8b0:	11 f0       	breq	.+4      	; 0x8b6 <buzz+0x82>
     8b2:	18 ec       	ldi	r17, 0xC8	; 200
     8b4:	01 c0       	rjmp	.+2      	; 0x8b8 <buzz+0x84>
     8b6:	10 e0       	ldi	r17, 0x00	; 0
     8b8:	c1 2c       	mov	r12, r1
     8ba:	d1 2c       	mov	r13, r1
     8bc:	76 01       	movw	r14, r12
		motor_set((frequency != -1) ? motor_amplitude : 0, DIR_LEFT);
     8be:	8f ef       	ldi	r24, 0xFF	; 255
     8c0:	88 16       	cp	r8, r24
     8c2:	98 06       	cpc	r9, r24
     8c4:	a8 06       	cpc	r10, r24
     8c6:	b8 06       	cpc	r11, r24
     8c8:	d9 f4       	brne	.+54     	; 0x900 <buzz+0xcc>
		delay_var_us(delayValue);
		motor_set((frequency != -1) ? motor_amplitude : 0, DIR_RIGHT);
     8ca:	23 c0       	rjmp	.+70     	; 0x912 <buzz+0xde>
     8cc:	61 e0       	ldi	r22, 0x01	; 1
     8ce:	81 2f       	mov	r24, r17
		delay_var_us(delayValue);
     8d0:	f9 dd       	rcall	.-1038   	; 0x4c4 <motor_set>
     8d2:	89 81       	ldd	r24, Y+1	; 0x01
     8d4:	9a 81       	ldd	r25, Y+2	; 0x02
     8d6:	ab 81       	ldd	r26, Y+3	; 0x03
     8d8:	bc 81       	ldd	r27, Y+4	; 0x04

void buzz(long frequency, long length) {
	volatile long delayValue = 1000000 / frequency / 2;
	volatile long numCycles = frequency * length / 1000;

	for (long i = 0; i < numCycles; i++) {
     8da:	8b df       	rcall	.-234    	; 0x7f2 <delay_var_us>
     8dc:	8f ef       	ldi	r24, 0xFF	; 255
     8de:	c8 1a       	sub	r12, r24
     8e0:	d8 0a       	sbc	r13, r24
     8e2:	e8 0a       	sbc	r14, r24
     8e4:	f8 0a       	sbc	r15, r24
     8e6:	8d 81       	ldd	r24, Y+5	; 0x05
     8e8:	9e 81       	ldd	r25, Y+6	; 0x06
     8ea:	af 81       	ldd	r26, Y+7	; 0x07
     8ec:	b8 85       	ldd	r27, Y+8	; 0x08
     8ee:	c8 16       	cp	r12, r24
     8f0:	d9 06       	cpc	r13, r25
     8f2:	ea 06       	cpc	r14, r26
		delay_var_us(delayValue);
		motor_set((frequency != -1) ? motor_amplitude : 0, DIR_RIGHT);
		delay_var_us(delayValue);
	}
	
	motor_set(0, DIR_RIGHT);
     8f4:	fb 06       	cpc	r15, r27
     8f6:	1c f3       	brlt	.-58     	; 0x8be <buzz+0x8a>
     8f8:	61 e0       	ldi	r22, 0x01	; 1
}
     8fa:	80 e0       	ldi	r24, 0x00	; 0
void buzz(long frequency, long length) {
	volatile long delayValue = 1000000 / frequency / 2;
	volatile long numCycles = frequency * length / 1000;

	for (long i = 0; i < numCycles; i++) {
		motor_set((frequency != -1) ? motor_amplitude : 0, DIR_LEFT);
     8fc:	e3 dd       	rcall	.-1082   	; 0x4c4 <motor_set>
     8fe:	12 c0       	rjmp	.+36     	; 0x924 <buzz+0xf0>
     900:	60 e0       	ldi	r22, 0x00	; 0
		delay_var_us(delayValue);
     902:	88 ec       	ldi	r24, 0xC8	; 200
     904:	df dd       	rcall	.-1090   	; 0x4c4 <motor_set>
     906:	89 81       	ldd	r24, Y+1	; 0x01
     908:	9a 81       	ldd	r25, Y+2	; 0x02
     90a:	ab 81       	ldd	r26, Y+3	; 0x03
void buzz(long frequency, long length) {
	volatile long delayValue = 1000000 / frequency / 2;
	volatile long numCycles = frequency * length / 1000;

	for (long i = 0; i < numCycles; i++) {
		motor_set((frequency != -1) ? motor_amplitude : 0, DIR_LEFT);
     90c:	bc 81       	ldd	r27, Y+4	; 0x04
     90e:	71 df       	rcall	.-286    	; 0x7f2 <delay_var_us>
     910:	dd cf       	rjmp	.-70     	; 0x8cc <buzz+0x98>
     912:	60 e0       	ldi	r22, 0x00	; 0
		delay_var_us(delayValue);
     914:	80 e0       	ldi	r24, 0x00	; 0
     916:	d6 dd       	rcall	.-1108   	; 0x4c4 <motor_set>
     918:	89 81       	ldd	r24, Y+1	; 0x01
     91a:	9a 81       	ldd	r25, Y+2	; 0x02
     91c:	ab 81       	ldd	r26, Y+3	; 0x03
     91e:	bc 81       	ldd	r27, Y+4	; 0x04
     920:	68 df       	rcall	.-304    	; 0x7f2 <delay_var_us>
		motor_set((frequency != -1) ? motor_amplitude : 0, DIR_RIGHT);
		delay_var_us(delayValue);
	}
	
	motor_set(0, DIR_RIGHT);
}
     922:	d4 cf       	rjmp	.-88     	; 0x8cc <buzz+0x98>
     924:	28 96       	adiw	r28, 0x08	; 8
     926:	0f b6       	in	r0, 0x3f	; 63
     928:	f8 94       	cli
     92a:	de bf       	out	0x3e, r29	; 62
     92c:	0f be       	out	0x3f, r0	; 63
     92e:	cd bf       	out	0x3d, r28	; 61
     930:	df 91       	pop	r29
     932:	cf 91       	pop	r28
     934:	1f 91       	pop	r17
     936:	ff 90       	pop	r15
     938:	ef 90       	pop	r14
     93a:	df 90       	pop	r13
     93c:	cf 90       	pop	r12
     93e:	bf 90       	pop	r11
     940:	af 90       	pop	r10
     942:	9f 90       	pop	r9
     944:	8f 90       	pop	r8
     946:	08 95       	ret

00000948 <song_play>:

void song_play(SoundSong_t song) {
     948:	8f 92       	push	r8
     94a:	9f 92       	push	r9
     94c:	af 92       	push	r10
     94e:	bf 92       	push	r11
     950:	cf 92       	push	r12
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
	uint32_t i;
	switch(song) {
     958:	81 30       	cpi	r24, 0x01	; 1
     95a:	d1 f0       	breq	.+52     	; 0x990 <song_play+0x48>
     95c:	30 f0       	brcs	.+12     	; 0x96a <song_play+0x22>
     95e:	82 30       	cpi	r24, 0x02	; 2
     960:	99 f1       	breq	.+102    	; 0x9c8 <song_play+0x80>
     962:	83 30       	cpi	r24, 0x03	; 3
     964:	09 f4       	brne	.+2      	; 0x968 <song_play+0x20>
     966:	5a c0       	rjmp	.+180    	; 0xa1c <song_play+0xd4>
     968:	62 c0       	rjmp	.+196    	; 0xa2e <song_play+0xe6>
		case SONG_END:
			buzz(1000, 120);
     96a:	28 e7       	ldi	r18, 0x78	; 120
     96c:	30 e0       	ldi	r19, 0x00	; 0
     96e:	40 e0       	ldi	r20, 0x00	; 0
     970:	50 e0       	ldi	r21, 0x00	; 0
     972:	68 ee       	ldi	r22, 0xE8	; 232
     974:	73 e0       	ldi	r23, 0x03	; 3
     976:	80 e0       	ldi	r24, 0x00	; 0
     978:	90 e0       	ldi	r25, 0x00	; 0
     97a:	5c df       	rcall	.-328    	; 0x834 <buzz>
			buzz(800, 120);
     97c:	28 e7       	ldi	r18, 0x78	; 120
     97e:	30 e0       	ldi	r19, 0x00	; 0
     980:	40 e0       	ldi	r20, 0x00	; 0
     982:	50 e0       	ldi	r21, 0x00	; 0
     984:	60 e2       	ldi	r22, 0x20	; 32
     986:	73 e0       	ldi	r23, 0x03	; 3
     988:	80 e0       	ldi	r24, 0x00	; 0
     98a:	90 e0       	ldi	r25, 0x00	; 0
     98c:	53 df       	rcall	.-346    	; 0x834 <buzz>
			break;
     98e:	4f c0       	rjmp	.+158    	; 0xa2e <song_play+0xe6>
		case SONG_START:
			buzz(2000, 50);
     990:	22 e3       	ldi	r18, 0x32	; 50
     992:	30 e0       	ldi	r19, 0x00	; 0
     994:	40 e0       	ldi	r20, 0x00	; 0
     996:	50 e0       	ldi	r21, 0x00	; 0
     998:	60 ed       	ldi	r22, 0xD0	; 208
     99a:	77 e0       	ldi	r23, 0x07	; 7
     99c:	80 e0       	ldi	r24, 0x00	; 0
     99e:	90 e0       	ldi	r25, 0x00	; 0
     9a0:	49 df       	rcall	.-366    	; 0x834 <buzz>
			buzz(3000, 50);
     9a2:	22 e3       	ldi	r18, 0x32	; 50
     9a4:	30 e0       	ldi	r19, 0x00	; 0
     9a6:	40 e0       	ldi	r20, 0x00	; 0
     9a8:	50 e0       	ldi	r21, 0x00	; 0
     9aa:	68 eb       	ldi	r22, 0xB8	; 184
     9ac:	7b e0       	ldi	r23, 0x0B	; 11
     9ae:	80 e0       	ldi	r24, 0x00	; 0
     9b0:	90 e0       	ldi	r25, 0x00	; 0
     9b2:	40 df       	rcall	.-384    	; 0x834 <buzz>
			buzz(4000, 50);
     9b4:	22 e3       	ldi	r18, 0x32	; 50
     9b6:	30 e0       	ldi	r19, 0x00	; 0
     9b8:	40 e0       	ldi	r20, 0x00	; 0
     9ba:	50 e0       	ldi	r21, 0x00	; 0
     9bc:	60 ea       	ldi	r22, 0xA0	; 160
     9be:	7f e0       	ldi	r23, 0x0F	; 15
     9c0:	80 e0       	ldi	r24, 0x00	; 0
     9c2:	90 e0       	ldi	r25, 0x00	; 0
     9c4:	37 df       	rcall	.-402    	; 0x834 <buzz>
			break;
     9c6:	33 c0       	rjmp	.+102    	; 0xa2e <song_play+0xe6>
	motor_set(0, DIR_RIGHT);
}

void song_play(SoundSong_t song) {
	uint32_t i;
	switch(song) {
     9c8:	c1 2c       	mov	r12, r1
     9ca:	d1 2c       	mov	r13, r1
     9cc:	76 01       	movw	r14, r12
			buzz(3000, 50);
			buzz(4000, 50);
			break;
		case SONG_LOADING:
			for(i = 0; i < 120; i++) {
				buzz(i * i * i / 120, 6);
     9ce:	0f 2e       	mov	r0, r31
     9d0:	f8 e7       	ldi	r31, 0x78	; 120
     9d2:	8f 2e       	mov	r8, r31
     9d4:	91 2c       	mov	r9, r1
     9d6:	a1 2c       	mov	r10, r1
     9d8:	b1 2c       	mov	r11, r1
     9da:	f0 2d       	mov	r31, r0
     9dc:	a7 01       	movw	r20, r14
     9de:	96 01       	movw	r18, r12
     9e0:	c7 01       	movw	r24, r14
     9e2:	b6 01       	movw	r22, r12
     9e4:	5a d4       	rcall	.+2228   	; 0x129a <__mulsi3>
     9e6:	9b 01       	movw	r18, r22
     9e8:	ac 01       	movw	r20, r24
     9ea:	c7 01       	movw	r24, r14
     9ec:	b6 01       	movw	r22, r12
     9ee:	55 d4       	rcall	.+2218   	; 0x129a <__mulsi3>
     9f0:	a5 01       	movw	r20, r10
     9f2:	94 01       	movw	r18, r8
     9f4:	61 d4       	rcall	.+2242   	; 0x12b8 <__udivmodsi4>
     9f6:	ca 01       	movw	r24, r20
     9f8:	b9 01       	movw	r22, r18
     9fa:	26 e0       	ldi	r18, 0x06	; 6
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e0       	ldi	r21, 0x00	; 0
     a02:	18 df       	rcall	.-464    	; 0x834 <buzz>
			buzz(2000, 50);
			buzz(3000, 50);
			buzz(4000, 50);
			break;
		case SONG_LOADING:
			for(i = 0; i < 120; i++) {
     a04:	8f ef       	ldi	r24, 0xFF	; 255
     a06:	c8 1a       	sub	r12, r24
     a08:	d8 0a       	sbc	r13, r24
     a0a:	e8 0a       	sbc	r14, r24
     a0c:	f8 0a       	sbc	r15, r24
     a0e:	88 e7       	ldi	r24, 0x78	; 120
     a10:	c8 16       	cp	r12, r24
     a12:	d1 04       	cpc	r13, r1
     a14:	e1 04       	cpc	r14, r1
     a16:	f1 04       	cpc	r15, r1
     a18:	09 f7       	brne	.-62     	; 0x9dc <song_play+0x94>
				buzz(i * i * i / 120, 6);
			}
			break;
		case SONG_BEEP:
			buzz(4000, 20);
     a1a:	09 c0       	rjmp	.+18     	; 0xa2e <song_play+0xe6>
     a1c:	24 e1       	ldi	r18, 0x14	; 20
     a1e:	30 e0       	ldi	r19, 0x00	; 0
     a20:	40 e0       	ldi	r20, 0x00	; 0
     a22:	50 e0       	ldi	r21, 0x00	; 0
     a24:	60 ea       	ldi	r22, 0xA0	; 160
     a26:	7f e0       	ldi	r23, 0x0F	; 15
     a28:	80 e0       	ldi	r24, 0x00	; 0
     a2a:	90 e0       	ldi	r25, 0x00	; 0
     a2c:	03 df       	rcall	.-506    	; 0x834 <buzz>
			break;
	}
}
     a2e:	ff 90       	pop	r15
     a30:	ef 90       	pop	r14
     a32:	df 90       	pop	r13
     a34:	cf 90       	pop	r12
     a36:	bf 90       	pop	r11
     a38:	af 90       	pop	r10
     a3a:	9f 90       	pop	r9
     a3c:	8f 90       	pop	r8
     a3e:	08 95       	ret

00000a40 <TWI_Master_Initialise>:
    {
      msg[ i ] = TWI_buf[ i ];
    }
  }
  return( TWI_statusReg.lastTransOK );                                   
}
     a40:	8c e0       	ldi	r24, 0x0C	; 12
     a42:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
     a46:	8f ef       	ldi	r24, 0xFF	; 255
     a48:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     a4c:	84 e0       	ldi	r24, 0x04	; 4
     a4e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     a52:	08 95       	ret

00000a54 <TWI_Start_Transceiver_With_Data>:
     a54:	cf 93       	push	r28
     a56:	df 93       	push	r29
     a58:	ec 01       	movw	r28, r24
     a5a:	ec eb       	ldi	r30, 0xBC	; 188
     a5c:	f0 e0       	ldi	r31, 0x00	; 0
     a5e:	90 81       	ld	r25, Z
     a60:	90 fd       	sbrc	r25, 0
     a62:	fd cf       	rjmp	.-6      	; 0xa5e <TWI_Start_Transceiver_With_Data+0xa>
     a64:	60 93 10 02 	sts	0x0210, r22	; 0x800210 <TWI_msgSize>
     a68:	88 81       	ld	r24, Y
     a6a:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <TWI_buf>
     a6e:	80 fd       	sbrc	r24, 0
     a70:	13 c0       	rjmp	.+38     	; 0xa98 <TWI_Start_Transceiver_With_Data+0x44>
     a72:	62 30       	cpi	r22, 0x02	; 2
     a74:	88 f0       	brcs	.+34     	; 0xa98 <TWI_Start_Transceiver_With_Data+0x44>
     a76:	fe 01       	movw	r30, r28
     a78:	31 96       	adiw	r30, 0x01	; 1
     a7a:	a2 e1       	ldi	r26, 0x12	; 18
     a7c:	b2 e0       	ldi	r27, 0x02	; 2
     a7e:	62 50       	subi	r22, 0x02	; 2
     a80:	26 2f       	mov	r18, r22
     a82:	30 e0       	ldi	r19, 0x00	; 0
     a84:	2e 5f       	subi	r18, 0xFE	; 254
     a86:	3f 4f       	sbci	r19, 0xFF	; 255
     a88:	ce 01       	movw	r24, r28
     a8a:	82 0f       	add	r24, r18
     a8c:	93 1f       	adc	r25, r19
     a8e:	21 91       	ld	r18, Z+
     a90:	2d 93       	st	X+, r18
     a92:	e8 17       	cp	r30, r24
     a94:	f9 07       	cpc	r31, r25
     a96:	d9 f7       	brne	.-10     	; 0xa8e <TWI_Start_Transceiver_With_Data+0x3a>
     a98:	10 92 0f 02 	sts	0x020F, r1	; 0x80020f <TWI_statusReg>
     a9c:	88 ef       	ldi	r24, 0xF8	; 248
     a9e:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
     aa2:	85 ea       	ldi	r24, 0xA5	; 165
     aa4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     aa8:	df 91       	pop	r29
     aaa:	cf 91       	pop	r28
     aac:	08 95       	ret

00000aae <__vector_39>:
that is whenever a TWI event has occurred. This function should not be called directly from the main
application.
****************************************************************************/

ISR(TWI_vect)
{
     aae:	1f 92       	push	r1
     ab0:	0f 92       	push	r0
     ab2:	0f b6       	in	r0, 0x3f	; 63
     ab4:	0f 92       	push	r0
     ab6:	11 24       	eor	r1, r1
     ab8:	0b b6       	in	r0, 0x3b	; 59
     aba:	0f 92       	push	r0
     abc:	2f 93       	push	r18
     abe:	3f 93       	push	r19
     ac0:	8f 93       	push	r24
     ac2:	9f 93       	push	r25
     ac4:	af 93       	push	r26
     ac6:	bf 93       	push	r27
     ac8:	ef 93       	push	r30
     aca:	ff 93       	push	r31
  static unsigned char TWI_bufPtr;
  
  switch (TWSR)
     acc:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     ad0:	8e 2f       	mov	r24, r30
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	fc 01       	movw	r30, r24
     ad6:	38 97       	sbiw	r30, 0x08	; 8
     ad8:	e1 35       	cpi	r30, 0x51	; 81
     ada:	f1 05       	cpc	r31, r1
     adc:	08 f0       	brcs	.+2      	; 0xae0 <__vector_39+0x32>
     ade:	57 c0       	rjmp	.+174    	; 0xb8e <__vector_39+0xe0>
     ae0:	88 27       	eor	r24, r24
     ae2:	ee 58       	subi	r30, 0x8E	; 142
     ae4:	ff 4f       	sbci	r31, 0xFF	; 255
     ae6:	8f 4f       	sbci	r24, 0xFF	; 255
     ae8:	25 c4       	rjmp	.+2122   	; 0x1334 <__tablejump2__>
  {
    case TWI_START:             // START has been transmitted  
    case TWI_REP_START:         // Repeated START has been transmitted
      TWI_bufPtr = 0;                                     // Set buffer pointer to the TWI Address location
     aea:	10 92 0e 02 	sts	0x020E, r1	; 0x80020e <TWI_bufPtr.1672>
    case TWI_MTX_ADR_ACK:       // SLA+W has been tramsmitted and ACK received
    case TWI_MTX_DATA_ACK:      // Data byte has been tramsmitted and ACK received
      if (TWI_bufPtr < TWI_msgSize)
     aee:	e0 91 0e 02 	lds	r30, 0x020E	; 0x80020e <TWI_bufPtr.1672>
     af2:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <TWI_msgSize>
     af6:	e8 17       	cp	r30, r24
     af8:	70 f4       	brcc	.+28     	; 0xb16 <__vector_39+0x68>
      {
        TWDR = TWI_buf[TWI_bufPtr++];
     afa:	81 e0       	ldi	r24, 0x01	; 1
     afc:	8e 0f       	add	r24, r30
     afe:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <TWI_bufPtr.1672>
     b02:	f0 e0       	ldi	r31, 0x00	; 0
     b04:	ef 5e       	subi	r30, 0xEF	; 239
     b06:	fd 4f       	sbci	r31, 0xFD	; 253
     b08:	80 81       	ld	r24, Z
     b0a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
        TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     b0e:	85 e8       	ldi	r24, 0x85	; 133
     b10:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     b14:	43 c0       	rjmp	.+134    	; 0xb9c <__vector_39+0xee>
               (1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interupt and clear the flag to send byte
               (0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           //
               (0<<TWWC);                                 //  
      }else                    // Send STOP after last byte
      {
        TWI_statusReg.lastTransOK = TRUE;                 // Set status bits to completed successfully. 
     b16:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <TWI_statusReg>
     b1a:	81 60       	ori	r24, 0x01	; 1
     b1c:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <TWI_statusReg>
        TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     b20:	84 e9       	ldi	r24, 0x94	; 148
     b22:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     b26:	3a c0       	rjmp	.+116    	; 0xb9c <__vector_39+0xee>
               (0<<TWEA)|(0<<TWSTA)|(1<<TWSTO)|           // Initiate a STOP condition.
               (0<<TWWC);                                 //
      }
      break;
    case TWI_MRX_DATA_ACK:      // Data byte has been received and ACK tramsmitted
      TWI_buf[TWI_bufPtr++] = TWDR;
     b28:	e0 91 0e 02 	lds	r30, 0x020E	; 0x80020e <TWI_bufPtr.1672>
     b2c:	81 e0       	ldi	r24, 0x01	; 1
     b2e:	8e 0f       	add	r24, r30
     b30:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <TWI_bufPtr.1672>
     b34:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     b38:	f0 e0       	ldi	r31, 0x00	; 0
     b3a:	ef 5e       	subi	r30, 0xEF	; 239
     b3c:	fd 4f       	sbci	r31, 0xFD	; 253
     b3e:	80 83       	st	Z, r24
    case TWI_MRX_ADR_ACK:       // SLA+R has been tramsmitted and ACK received
      if (TWI_bufPtr < (TWI_msgSize-1) )                  // Detect the last byte to NACK it.
     b40:	20 91 0e 02 	lds	r18, 0x020E	; 0x80020e <TWI_bufPtr.1672>
     b44:	30 e0       	ldi	r19, 0x00	; 0
     b46:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <TWI_msgSize>
     b4a:	90 e0       	ldi	r25, 0x00	; 0
     b4c:	01 97       	sbiw	r24, 0x01	; 1
     b4e:	28 17       	cp	r18, r24
     b50:	39 07       	cpc	r19, r25
     b52:	24 f4       	brge	.+8      	; 0xb5c <__vector_39+0xae>
      {
        TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     b54:	85 ec       	ldi	r24, 0xC5	; 197
     b56:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     b5a:	20 c0       	rjmp	.+64     	; 0xb9c <__vector_39+0xee>
               (1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interupt and clear the flag to read next byte
               (1<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // Send ACK after reception
               (0<<TWWC);                                 //  
      }else                    // Send NACK after next reception
      {
        TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     b5c:	85 e8       	ldi	r24, 0x85	; 133
     b5e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     b62:	1c c0       	rjmp	.+56     	; 0xb9c <__vector_39+0xee>
               (0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // Send NACK after reception
               (0<<TWWC);                                 // 
      }    
      break; 
    case TWI_MRX_DATA_NACK:     // Data byte has been received and NACK tramsmitted
      TWI_buf[TWI_bufPtr] = TWDR;
     b64:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     b68:	e0 91 0e 02 	lds	r30, 0x020E	; 0x80020e <TWI_bufPtr.1672>
     b6c:	f0 e0       	ldi	r31, 0x00	; 0
     b6e:	ef 5e       	subi	r30, 0xEF	; 239
     b70:	fd 4f       	sbci	r31, 0xFD	; 253
     b72:	80 83       	st	Z, r24
      TWI_statusReg.lastTransOK = TRUE;                 // Set status bits to completed successfully. 
     b74:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <TWI_statusReg>
     b78:	81 60       	ori	r24, 0x01	; 1
     b7a:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <TWI_statusReg>
      TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     b7e:	84 e9       	ldi	r24, 0x94	; 148
     b80:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
             (0<<TWIE)|(1<<TWINT)|                      // Disable TWI Interrupt and clear the flag
             (0<<TWEA)|(0<<TWSTA)|(1<<TWSTO)|           // Initiate a STOP condition.
             (0<<TWWC);                                 //
      break;      
     b84:	0b c0       	rjmp	.+22     	; 0xb9c <__vector_39+0xee>
    case TWI_ARB_LOST:          // Arbitration lost
      TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     b86:	85 ea       	ldi	r24, 0xA5	; 165
     b88:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
             (1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interupt and clear the flag
             (0<<TWEA)|(1<<TWSTA)|(0<<TWSTO)|           // Initiate a (RE)START condition.
             (0<<TWWC);                                 //
      break;
     b8c:	07 c0       	rjmp	.+14     	; 0xb9c <__vector_39+0xee>
    case TWI_MTX_ADR_NACK:      // SLA+W has been tramsmitted and NACK received
    case TWI_MRX_ADR_NACK:      // SLA+R has been tramsmitted and NACK received    
    case TWI_MTX_DATA_NACK:     // Data byte has been tramsmitted and NACK received
    case TWI_BUS_ERROR:         // Bus error due to an illegal START or STOP condition
    default:     
      TWI_state = TWSR;                                 // Store TWSR and automatically sets clears noErrors bit.
     b8e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     b92:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
                                                        // Reset TWI Interface
      TWCR = (1<<TWEN)|                                 // Enable TWI-interface and release TWI pins
     b96:	84 e0       	ldi	r24, 0x04	; 4
     b98:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
             (0<<TWIE)|(0<<TWINT)|                      // Disable Interupt
             (0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // No Signal requests
             (0<<TWWC);                                 //
  }
}
     b9c:	ff 91       	pop	r31
     b9e:	ef 91       	pop	r30
     ba0:	bf 91       	pop	r27
     ba2:	af 91       	pop	r26
     ba4:	9f 91       	pop	r25
     ba6:	8f 91       	pop	r24
     ba8:	3f 91       	pop	r19
     baa:	2f 91       	pop	r18
     bac:	0f 90       	pop	r0
     bae:	0b be       	out	0x3b, r0	; 59
     bb0:	0f 90       	pop	r0
     bb2:	0f be       	out	0x3f, r0	; 63
     bb4:	0f 90       	pop	r0
     bb6:	1f 90       	pop	r1
     bb8:	18 95       	reti

00000bba <mcp_reset>:
	MCP_CMD_REQ_SEND_base = 0x80,
	MCP_CMD_READ_STATUS = 0xA0,
	MCP_CMD_RESET = 0xC0
} McpCommand_t;

void mcp_reset() {
     bba:	cf 93       	push	r28
     bbc:	df 93       	push	r29
     bbe:	1f 92       	push	r1
     bc0:	cd b7       	in	r28, 0x3d	; 61
     bc2:	de b7       	in	r29, 0x3e	; 62
	uint8_t buffer[] = {MCP_CMD_RESET};
     bc4:	80 ec       	ldi	r24, 0xC0	; 192
     bc6:	89 83       	std	Y+1, r24	; 0x01
	spi_trancieve(buffer, NULL, 1);
     bc8:	41 e0       	ldi	r20, 0x01	; 1
     bca:	50 e0       	ldi	r21, 0x00	; 0
     bcc:	60 e0       	ldi	r22, 0x00	; 0
     bce:	70 e0       	ldi	r23, 0x00	; 0
     bd0:	ce 01       	movw	r24, r28
     bd2:	01 96       	adiw	r24, 0x01	; 1
     bd4:	cf d0       	rcall	.+414    	; 0xd74 <spi_trancieve>
}
     bd6:	0f 90       	pop	r0
     bd8:	df 91       	pop	r29
     bda:	cf 91       	pop	r28
     bdc:	08 95       	ret

00000bde <mcp_read>:

uint8_t mcp_read(uint8_t addr) {
     bde:	cf 93       	push	r28
     be0:	df 93       	push	r29
     be2:	00 d0       	rcall	.+0      	; 0xbe4 <mcp_read+0x6>
     be4:	cd b7       	in	r28, 0x3d	; 61
     be6:	de b7       	in	r29, 0x3e	; 62
	uint8_t buffer[] = {MCP_CMD_READ, addr, 0x00};
     be8:	93 e0       	ldi	r25, 0x03	; 3
     bea:	99 83       	std	Y+1, r25	; 0x01
     bec:	8a 83       	std	Y+2, r24	; 0x02
     bee:	1b 82       	std	Y+3, r1	; 0x03
	spi_trancieve(buffer, buffer, 3);
     bf0:	43 e0       	ldi	r20, 0x03	; 3
     bf2:	50 e0       	ldi	r21, 0x00	; 0
     bf4:	be 01       	movw	r22, r28
     bf6:	6f 5f       	subi	r22, 0xFF	; 255
     bf8:	7f 4f       	sbci	r23, 0xFF	; 255
     bfa:	cb 01       	movw	r24, r22
     bfc:	bb d0       	rcall	.+374    	; 0xd74 <spi_trancieve>
	return buffer[2];
}
     bfe:	8b 81       	ldd	r24, Y+3	; 0x03
     c00:	0f 90       	pop	r0
     c02:	0f 90       	pop	r0
     c04:	0f 90       	pop	r0
     c06:	df 91       	pop	r29
     c08:	cf 91       	pop	r28
     c0a:	08 95       	ret

00000c0c <mcp_write>:


void mcp_write(uint8_t addr, uint8_t value) {
     c0c:	cf 93       	push	r28
     c0e:	df 93       	push	r29
     c10:	00 d0       	rcall	.+0      	; 0xc12 <mcp_write+0x6>
     c12:	cd b7       	in	r28, 0x3d	; 61
     c14:	de b7       	in	r29, 0x3e	; 62
	uint8_t buffer[] = {MCP_CMD_WRITE, addr, value};
     c16:	92 e0       	ldi	r25, 0x02	; 2
     c18:	99 83       	std	Y+1, r25	; 0x01
     c1a:	8a 83       	std	Y+2, r24	; 0x02
     c1c:	6b 83       	std	Y+3, r22	; 0x03
	spi_trancieve(buffer, NULL, 3);
     c1e:	43 e0       	ldi	r20, 0x03	; 3
     c20:	50 e0       	ldi	r21, 0x00	; 0
     c22:	60 e0       	ldi	r22, 0x00	; 0
     c24:	70 e0       	ldi	r23, 0x00	; 0
     c26:	ce 01       	movw	r24, r28
     c28:	01 96       	adiw	r24, 0x01	; 1
     c2a:	a4 d0       	rcall	.+328    	; 0xd74 <spi_trancieve>
}
     c2c:	0f 90       	pop	r0
     c2e:	0f 90       	pop	r0
     c30:	0f 90       	pop	r0
     c32:	df 91       	pop	r29
     c34:	cf 91       	pop	r28
     c36:	08 95       	ret

00000c38 <mcp_modify_bit>:

void mcp_modify_bit(uint8_t addr, uint8_t mask, uint8_t value) {
     c38:	cf 93       	push	r28
     c3a:	df 93       	push	r29
     c3c:	00 d0       	rcall	.+0      	; 0xc3e <mcp_modify_bit+0x6>
     c3e:	1f 92       	push	r1
     c40:	cd b7       	in	r28, 0x3d	; 61
     c42:	de b7       	in	r29, 0x3e	; 62
	uint8_t buffer[] = {MCP_CMD_BIT_MODIFY, addr, mask, value};
     c44:	95 e0       	ldi	r25, 0x05	; 5
     c46:	99 83       	std	Y+1, r25	; 0x01
     c48:	8a 83       	std	Y+2, r24	; 0x02
     c4a:	6b 83       	std	Y+3, r22	; 0x03
     c4c:	4c 83       	std	Y+4, r20	; 0x04
	spi_trancieve(buffer, NULL, 4);
     c4e:	44 e0       	ldi	r20, 0x04	; 4
     c50:	50 e0       	ldi	r21, 0x00	; 0
     c52:	60 e0       	ldi	r22, 0x00	; 0
     c54:	70 e0       	ldi	r23, 0x00	; 0
     c56:	ce 01       	movw	r24, r28
     c58:	01 96       	adiw	r24, 0x01	; 1
     c5a:	8c d0       	rcall	.+280    	; 0xd74 <spi_trancieve>
}
     c5c:	0f 90       	pop	r0
     c5e:	0f 90       	pop	r0
     c60:	0f 90       	pop	r0
     c62:	0f 90       	pop	r0
     c64:	df 91       	pop	r29
     c66:	cf 91       	pop	r28
     c68:	08 95       	ret

00000c6a <mcp_request_to_send>:

void mcp_request_to_send(bool buffer0, bool buffer1, bool buffer2) {
     c6a:	cf 93       	push	r28
     c6c:	df 93       	push	r29
     c6e:	1f 92       	push	r1
     c70:	cd b7       	in	r28, 0x3d	; 61
     c72:	de b7       	in	r29, 0x3e	; 62
	uint8_t cmd = MCP_CMD_REQ_SEND_base;
	if (buffer0) cmd |= (1 << 0);
     c74:	88 23       	and	r24, r24
     c76:	11 f0       	breq	.+4      	; 0xc7c <mcp_request_to_send+0x12>
     c78:	81 e8       	ldi	r24, 0x81	; 129
     c7a:	01 c0       	rjmp	.+2      	; 0xc7e <mcp_request_to_send+0x14>
	uint8_t buffer[] = {MCP_CMD_BIT_MODIFY, addr, mask, value};
	spi_trancieve(buffer, NULL, 4);
}

void mcp_request_to_send(bool buffer0, bool buffer1, bool buffer2) {
	uint8_t cmd = MCP_CMD_REQ_SEND_base;
     c7c:	80 e8       	ldi	r24, 0x80	; 128
	if (buffer0) cmd |= (1 << 0);
	if (buffer1) cmd |= (1 << 1);
     c7e:	61 11       	cpse	r22, r1
     c80:	82 60       	ori	r24, 0x02	; 2
	if (buffer2) cmd |= (1 << 2);
     c82:	41 11       	cpse	r20, r1
     c84:	84 60       	ori	r24, 0x04	; 4

	uint8_t buffer[] = {cmd};
     c86:	89 83       	std	Y+1, r24	; 0x01

	spi_trancieve(buffer, NULL, 1);
     c88:	41 e0       	ldi	r20, 0x01	; 1
     c8a:	50 e0       	ldi	r21, 0x00	; 0
     c8c:	60 e0       	ldi	r22, 0x00	; 0
     c8e:	70 e0       	ldi	r23, 0x00	; 0
     c90:	ce 01       	movw	r24, r28
     c92:	01 96       	adiw	r24, 0x01	; 1
     c94:	6f d0       	rcall	.+222    	; 0xd74 <spi_trancieve>
}
     c96:	0f 90       	pop	r0
     c98:	df 91       	pop	r29
     c9a:	cf 91       	pop	r28
     c9c:	08 95       	ret

00000c9e <mcp_read_status>:

McpStatus_t mcp_read_status() {
     c9e:	1f 93       	push	r17
     ca0:	cf 93       	push	r28
     ca2:	df 93       	push	r29
     ca4:	00 d0       	rcall	.+0      	; 0xca6 <mcp_read_status+0x8>
     ca6:	cd b7       	in	r28, 0x3d	; 61
     ca8:	de b7       	in	r29, 0x3e	; 62
	// Retry until read succeeds
	while (true) {
		uint8_t buffer[] = {MCP_CMD_READ_STATUS, 0x00, 0x00};
     caa:	10 ea       	ldi	r17, 0xA0	; 160
     cac:	19 83       	std	Y+1, r17	; 0x01
     cae:	1a 82       	std	Y+2, r1	; 0x02
     cb0:	1b 82       	std	Y+3, r1	; 0x03
		spi_trancieve(buffer, buffer, 3);
     cb2:	43 e0       	ldi	r20, 0x03	; 3
     cb4:	50 e0       	ldi	r21, 0x00	; 0
     cb6:	be 01       	movw	r22, r28
     cb8:	6f 5f       	subi	r22, 0xFF	; 255
     cba:	7f 4f       	sbci	r23, 0xFF	; 255
     cbc:	cb 01       	movw	r24, r22
     cbe:	5a d0       	rcall	.+180    	; 0xd74 <spi_trancieve>

		if (buffer[1] == buffer[2]) {
     cc0:	9a 81       	ldd	r25, Y+2	; 0x02
     cc2:	8b 81       	ldd	r24, Y+3	; 0x03
     cc4:	98 13       	cpse	r25, r24
     cc6:	f2 cf       	rjmp	.-28     	; 0xcac <mcp_read_status+0xe>
			return *((McpStatus_t*)(buffer + 1));
		}
	}
}
     cc8:	89 2f       	mov	r24, r25
     cca:	0f 90       	pop	r0
     ccc:	0f 90       	pop	r0
     cce:	0f 90       	pop	r0
     cd0:	df 91       	pop	r29
     cd2:	cf 91       	pop	r28
     cd4:	1f 91       	pop	r17
     cd6:	08 95       	ret

00000cd8 <pwm_init>:
	TCCR1A = (1 << WGM11) | (0 << WGM10) | (1 << COM1B1) | (0 << COM1B0);
	TCCR1B = (1 << WGM13) | (1 << WGM12) | (1 << CS11);
}

void pwm_set_duty_cycle(uint8_t duty_cycle) {
	OCR1B = (uint16_t)((uint32_t)duty_cycle * TC_TOP / 100);
     cd8:	80 e4       	ldi	r24, 0x40	; 64
     cda:	9c e9       	ldi	r25, 0x9C	; 156
     cdc:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x700087>
     ce0:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x700086>
     ce4:	26 9a       	sbi	0x04, 6	; 4
     ce6:	80 e2       	ldi	r24, 0x20	; 32
     ce8:	9e e4       	ldi	r25, 0x4E	; 78
     cea:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x70008b>
     cee:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x70008a>
     cf2:	82 e2       	ldi	r24, 0x22	; 34
     cf4:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
     cf8:	8a e1       	ldi	r24, 0x1A	; 26
     cfa:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
     cfe:	08 95       	ret

00000d00 <pwm_set_pulse_width>:


uint16_t prev_pulse_width;

void pwm_set_pulse_width(uint16_t pulse_width_us) {
	if (pulse_width_us < 900) {
     d00:	84 38       	cpi	r24, 0x84	; 132
     d02:	23 e0       	ldi	r18, 0x03	; 3
     d04:	92 07       	cpc	r25, r18
     d06:	38 f4       	brcc	.+14     	; 0xd16 <pwm_set_pulse_width+0x16>
		OCR1B = 2 * 900;
     d08:	88 e0       	ldi	r24, 0x08	; 8
     d0a:	97 e0       	ldi	r25, 0x07	; 7
     d0c:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x70008b>
     d10:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x70008a>
     d14:	08 95       	ret
	} else if (pulse_width_us > 2100) {
     d16:	85 33       	cpi	r24, 0x35	; 53
     d18:	28 e0       	ldi	r18, 0x08	; 8
     d1a:	92 07       	cpc	r25, r18
     d1c:	38 f0       	brcs	.+14     	; 0xd2c <pwm_set_pulse_width+0x2c>
		OCR1B = 2 * 2100;
     d1e:	88 e6       	ldi	r24, 0x68	; 104
     d20:	90 e1       	ldi	r25, 0x10	; 16
     d22:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x70008b>
     d26:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x70008a>
     d2a:	08 95       	ret
	} else {
		OCR1B = (pulse_width_us * 2);
     d2c:	88 0f       	add	r24, r24
     d2e:	99 1f       	adc	r25, r25
     d30:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x70008b>
     d34:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x70008a>
     d38:	08 95       	ret

00000d3a <pwm_set_servo_deflection>:
	//Set servo
	const int min_pulse_us = 900;
	const int max_pulse_us = 2100;
	const int max_deflection = 100;
	
	pwm_set_pulse_width(min_pulse_us + 
     d3a:	28 2f       	mov	r18, r24
     d3c:	30 e0       	ldi	r19, 0x00	; 0
     d3e:	a0 eb       	ldi	r26, 0xB0	; 176
     d40:	b4 e0       	ldi	r27, 0x04	; 4
     d42:	00 d3       	rcall	.+1536   	; 0x1344 <__umulhisi3>
     d44:	24 e6       	ldi	r18, 0x64	; 100
     d46:	30 e0       	ldi	r19, 0x00	; 0
     d48:	40 e0       	ldi	r20, 0x00	; 0
     d4a:	50 e0       	ldi	r21, 0x00	; 0
     d4c:	b5 d2       	rcall	.+1386   	; 0x12b8 <__udivmodsi4>
     d4e:	c9 01       	movw	r24, r18
     d50:	8c 57       	subi	r24, 0x7C	; 124
     d52:	9c 4f       	sbci	r25, 0xFC	; 252
     d54:	d5 cf       	rjmp	.-86     	; 0xd00 <pwm_set_pulse_width>
     d56:	08 95       	ret

00000d58 <spi_init>:
#define MOSI_PIN 2
#define MISO_PIN 3
#define SCK_PIN 1

void spi_init() {
	SPI_DDR |= (1 << SPI_SS_PIN) | (1 << SS_PIN) | (1 << MOSI_PIN) | (1 << SCK_PIN);
     d58:	84 b1       	in	r24, 0x04	; 4
     d5a:	87 68       	ori	r24, 0x87	; 135
     d5c:	84 b9       	out	0x04, r24	; 4
	SPI_DDR &= ~(1 << MISO_PIN);
     d5e:	23 98       	cbi	0x04, 3	; 4
	SPI_PORT |= (1 << SPI_SS_PIN);
     d60:	28 9a       	sbi	0x05, 0	; 5
	SPI_PORT |= (1 << SS_PIN);
     d62:	2f 9a       	sbi	0x05, 7	; 5

	PRR0 &= ~(1 << PRSPI);
     d64:	e4 e6       	ldi	r30, 0x64	; 100
     d66:	f0 e0       	ldi	r31, 0x00	; 0
     d68:	80 81       	ld	r24, Z
     d6a:	8b 7f       	andi	r24, 0xFB	; 251
     d6c:	80 83       	st	Z, r24

	SPCR = (1 << MSTR) | (1<< CPHA) | (1 << CPOL) | (1 << SPE) | (1 << SPR0);
     d6e:	8d e5       	ldi	r24, 0x5D	; 93
     d70:	8c bd       	out	0x2c, r24	; 44
     d72:	08 95       	ret

00000d74 <spi_trancieve>:
}

void spi_trancieve(uint8_t* tx_buffer, uint8_t* rx_buffer, int length) {
	SPI_PORT &= ~(1 << SS_PIN);
     d74:	2f 98       	cbi	0x05, 7	; 5
	
	for(int i = 0; i < length; i++) {
     d76:	14 16       	cp	r1, r20
     d78:	15 06       	cpc	r1, r21
     d7a:	94 f4       	brge	.+36     	; 0xda0 <spi_trancieve+0x2c>
     d7c:	fc 01       	movw	r30, r24
     d7e:	db 01       	movw	r26, r22
     d80:	48 0f       	add	r20, r24
     d82:	59 1f       	adc	r21, r25
		SPDR = tx_buffer[i];
     d84:	91 91       	ld	r25, Z+
     d86:	9e bd       	out	0x2e, r25	; 46
		
		// Wait for word transmission to complete
		while (!(SPSR & (1 << SPIF))) { };
     d88:	0d b4       	in	r0, 0x2d	; 45
     d8a:	07 fe       	sbrs	r0, 7
     d8c:	fd cf       	rjmp	.-6      	; 0xd88 <spi_trancieve+0x14>

		if (rx_buffer != NULL) {
     d8e:	61 15       	cp	r22, r1
     d90:	71 05       	cpc	r23, r1
     d92:	11 f0       	breq	.+4      	; 0xd98 <spi_trancieve+0x24>
			rx_buffer[i] = SPDR;
     d94:	9e b5       	in	r25, 0x2e	; 46
     d96:	9c 93       	st	X, r25
     d98:	11 96       	adiw	r26, 0x01	; 1
}

void spi_trancieve(uint8_t* tx_buffer, uint8_t* rx_buffer, int length) {
	SPI_PORT &= ~(1 << SS_PIN);
	
	for(int i = 0; i < length; i++) {
     d9a:	e4 17       	cp	r30, r20
     d9c:	f5 07       	cpc	r31, r21
     d9e:	91 f7       	brne	.-28     	; 0xd84 <spi_trancieve+0x10>
		if (rx_buffer != NULL) {
			rx_buffer[i] = SPDR;
		}
	}

	SPI_PORT |= (1 << SS_PIN);
     da0:	2f 9a       	sbi	0x05, 7	; 5
     da2:	08 95       	ret

00000da4 <main>:
#include "drivers/song.h"

#define SERVO_DEFLECTION_OFFSET 50

int main(void)
{
     da4:	cf 93       	push	r28
     da6:	df 93       	push	r29
     da8:	cd b7       	in	r28, 0x3d	; 61
     daa:	de b7       	in	r29, 0x3e	; 62
     dac:	2b 97       	sbiw	r28, 0x0b	; 11
     dae:	0f b6       	in	r0, 0x3f	; 63
     db0:	f8 94       	cli
     db2:	de bf       	out	0x3e, r29	; 62
     db4:	0f be       	out	0x3f, r0	; 63
	spi_init();
	can_init();
	pwm_init();
	adc_init();
	adc_init_channel(AdcCh_CH0);
     db6:	cd bf       	out	0x3d, r28	; 61
	motor_init();
	shooter_init();
     db8:	cf df       	rcall	.-98     	; 0xd58 <spi_init>
     dba:	93 da       	rcall	.-2778   	; 0x2e2 <can_init>
	sei();
     dbc:	8d df       	rcall	.-230    	; 0xcd8 <pwm_init>

	pwm_set_servo_deflection(SERVO_DEFLECTION_OFFSET);
     dbe:	1d da       	rcall	.-3014   	; 0x1fa <adc_init>
     dc0:	80 e0       	ldi	r24, 0x00	; 0
	
	motor_calibrate_position();
     dc2:	25 da       	rcall	.-2998   	; 0x20e <adc_init_channel>
	
	motor_reset_encoder();
     dc4:	56 db       	rcall	.-2388   	; 0x472 <motor_init>
     dc6:	06 dd       	rcall	.-1524   	; 0x7d4 <shooter_init>
	
	//Declaration of game variables
	int8_t joystick_x = 0;
	uint8_t slider_data = 0;
     dc8:	78 94       	sei
					pwm_set_servo_deflection(joystick_x);
					
					if (should_shoot) shooter_shoot();
					
					// Send the return message
					frame.id = 0x120;
     dca:	82 e3       	ldi	r24, 0x32	; 50
					frame.length = 0x2;
     dcc:	b6 df       	rcall	.-148    	; 0xd3a <pwm_set_servo_deflection>
     dce:	d0 dc       	rcall	.-1632   	; 0x770 <motor_calibrate_position>
	uint8_t should_shoot = 0;


	while (1)
	{
		motor_regulate(motor_get_position(), slider_data);
     dd0:	93 dc       	rcall	.-1754   	; 0x6f8 <motor_reset_encoder>
     dd2:	b1 2c       	mov	r11, r1
     dd4:	00 e2       	ldi	r16, 0x20	; 32
     dd6:	11 e0       	ldi	r17, 0x01	; 1
     dd8:	68 94       	set
     dda:	aa 24       	eor	r10, r10
     ddc:	a1 f8       	bld	r10, 1
     dde:	99 dc       	rcall	.-1742   	; 0x712 <motor_get_position>
     de0:	6b 01       	movw	r12, r22
     de2:	7c 01       	movw	r14, r24
     de4:	6b 2d       	mov	r22, r11
     de6:	70 e0       	ldi	r23, 0x00	; 0
     de8:	80 e0       	ldi	r24, 0x00	; 0
     dea:	90 e0       	ldi	r25, 0x00	; 0
		
		CanFrame_t frame;
		if (can_rx_message(&frame)) {
     dec:	3d d1       	rcall	.+634    	; 0x1068 <__floatunsisf>
     dee:	9b 01       	movw	r18, r22
     df0:	ac 01       	movw	r20, r24
     df2:	c7 01       	movw	r24, r14
     df4:	b6 01       	movw	r22, r12
			switch (frame.data.u8[3]){
     df6:	97 db       	rcall	.-2258   	; 0x526 <motor_regulate>
     df8:	ce 01       	movw	r24, r28
     dfa:	01 96       	adiw	r24, 0x01	; 1
     dfc:	e9 da       	rcall	.-2606   	; 0x3d0 <can_rx_message>
     dfe:	88 23       	and	r24, r24
     e00:	51 f1       	breq	.+84     	; 0xe56 <main+0xb2>
     e02:	8f 81       	ldd	r24, Y+7	; 0x07
     e04:	82 30       	cpi	r24, 0x02	; 2
     e06:	61 f0       	breq	.+24     	; 0xe20 <main+0x7c>
				case 1:
					song_play(SONG_END);
     e08:	18 f4       	brcc	.+6      	; 0xe10 <main+0x6c>
					break;
				case 2:
					song_play(SONG_START);
     e0a:	81 30       	cpi	r24, 0x01	; 1
     e0c:	31 f0       	breq	.+12     	; 0xe1a <main+0x76>
     e0e:	11 c0       	rjmp	.+34     	; 0xe32 <main+0x8e>
					break;
				case 3:
					song_play(SONG_LOADING);
					break;
				case 4:
					song_play(SONG_BEEP);
     e10:	83 30       	cpi	r24, 0x03	; 3
     e12:	49 f0       	breq	.+18     	; 0xe26 <main+0x82>
					break;
				default:
					joystick_x = frame.data.i8[0];
					slider_data = frame.data.u8[1];
     e14:	84 30       	cpi	r24, 0x04	; 4
					should_shoot = frame.data.u8[2];
     e16:	51 f0       	breq	.+20     	; 0xe2c <main+0x88>
					
					pwm_set_servo_deflection(joystick_x);
     e18:	0c c0       	rjmp	.+24     	; 0xe32 <main+0x8e>
     e1a:	80 e0       	ldi	r24, 0x00	; 0
     e1c:	95 dd       	rcall	.-1238   	; 0x948 <song_play>
					
					if (should_shoot) shooter_shoot();
     e1e:	1b c0       	rjmp	.+54     	; 0xe56 <main+0xb2>
     e20:	81 e0       	ldi	r24, 0x01	; 1
     e22:	92 dd       	rcall	.-1244   	; 0x948 <song_play>
					
					// Send the return message
					frame.id = 0x120;
     e24:	18 c0       	rjmp	.+48     	; 0xe56 <main+0xb2>
     e26:	8a 2d       	mov	r24, r10
					frame.length = 0x2;
     e28:	8f dd       	rcall	.-1250   	; 0x948 <song_play>
					
					frame.data.u8[0] = adc_read(AdcCh_CH0);
     e2a:	15 c0       	rjmp	.+42     	; 0xe56 <main+0xb2>
     e2c:	83 e0       	ldi	r24, 0x03	; 3
     e2e:	8c dd       	rcall	.-1256   	; 0x948 <song_play>
     e30:	12 c0       	rjmp	.+36     	; 0xe56 <main+0xb2>
					frame.data.u8[1] = motor_get_position();
     e32:	bd 80       	ldd	r11, Y+5	; 0x05
     e34:	fe 80       	ldd	r15, Y+6	; 0x06
     e36:	8c 81       	ldd	r24, Y+4	; 0x04
     e38:	80 df       	rcall	.-256    	; 0xd3a <pwm_set_servo_deflection>
     e3a:	f1 10       	cpse	r15, r1
					can_tx_message(&frame);
     e3c:	ce dc       	rcall	.-1636   	; 0x7da <shooter_shoot>
     e3e:	1a 83       	std	Y+2, r17	; 0x02
     e40:	09 83       	std	Y+1, r16	; 0x01
     e42:	ab 82       	std	Y+3, r10	; 0x03
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     e44:	80 e0       	ldi	r24, 0x00	; 0
     e46:	3f da       	rcall	.-2946   	; 0x2c6 <adc_read>
     e48:	8c 83       	std	Y+4, r24	; 0x04
     e4a:	63 dc       	rcall	.-1850   	; 0x712 <motor_get_position>
     e4c:	e1 d0       	rcall	.+450    	; 0x1010 <__fixunssfsi>
     e4e:	6d 83       	std	Y+5, r22	; 0x05
					break;
			}
		}
		
		_delay_ms(10);
    }
     e50:	ce 01       	movw	r24, r28
     e52:	01 96       	adiw	r24, 0x01	; 1
     e54:	78 da       	rcall	.-2832   	; 0x346 <can_tx_message>
     e56:	8f e3       	ldi	r24, 0x3F	; 63
     e58:	9c e9       	ldi	r25, 0x9C	; 156
     e5a:	01 97       	sbiw	r24, 0x01	; 1
     e5c:	f1 f7       	brne	.-4      	; 0xe5a <main+0xb6>
     e5e:	00 c0       	rjmp	.+0      	; 0xe60 <main+0xbc>
     e60:	00 00       	nop
     e62:	bd cf       	rjmp	.-134    	; 0xdde <main+0x3a>

00000e64 <__subsf3>:
     e64:	50 58       	subi	r21, 0x80	; 128

00000e66 <__addsf3>:
     e66:	bb 27       	eor	r27, r27
     e68:	aa 27       	eor	r26, r26
     e6a:	0e d0       	rcall	.+28     	; 0xe88 <__addsf3x>
     e6c:	75 c1       	rjmp	.+746    	; 0x1158 <__fp_round>
     e6e:	66 d1       	rcall	.+716    	; 0x113c <__fp_pscA>
     e70:	30 f0       	brcs	.+12     	; 0xe7e <__addsf3+0x18>
     e72:	6b d1       	rcall	.+726    	; 0x114a <__fp_pscB>
     e74:	20 f0       	brcs	.+8      	; 0xe7e <__addsf3+0x18>
     e76:	31 f4       	brne	.+12     	; 0xe84 <__addsf3+0x1e>
     e78:	9f 3f       	cpi	r25, 0xFF	; 255
     e7a:	11 f4       	brne	.+4      	; 0xe80 <__addsf3+0x1a>
     e7c:	1e f4       	brtc	.+6      	; 0xe84 <__addsf3+0x1e>
     e7e:	5b c1       	rjmp	.+694    	; 0x1136 <__fp_nan>
     e80:	0e f4       	brtc	.+2      	; 0xe84 <__addsf3+0x1e>
     e82:	e0 95       	com	r30
     e84:	e7 fb       	bst	r30, 7
     e86:	51 c1       	rjmp	.+674    	; 0x112a <__fp_inf>

00000e88 <__addsf3x>:
     e88:	e9 2f       	mov	r30, r25
     e8a:	77 d1       	rcall	.+750    	; 0x117a <__fp_split3>
     e8c:	80 f3       	brcs	.-32     	; 0xe6e <__addsf3+0x8>
     e8e:	ba 17       	cp	r27, r26
     e90:	62 07       	cpc	r22, r18
     e92:	73 07       	cpc	r23, r19
     e94:	84 07       	cpc	r24, r20
     e96:	95 07       	cpc	r25, r21
     e98:	18 f0       	brcs	.+6      	; 0xea0 <__addsf3x+0x18>
     e9a:	71 f4       	brne	.+28     	; 0xeb8 <__addsf3x+0x30>
     e9c:	9e f5       	brtc	.+102    	; 0xf04 <__addsf3x+0x7c>
     e9e:	8f c1       	rjmp	.+798    	; 0x11be <__fp_zero>
     ea0:	0e f4       	brtc	.+2      	; 0xea4 <__addsf3x+0x1c>
     ea2:	e0 95       	com	r30
     ea4:	0b 2e       	mov	r0, r27
     ea6:	ba 2f       	mov	r27, r26
     ea8:	a0 2d       	mov	r26, r0
     eaa:	0b 01       	movw	r0, r22
     eac:	b9 01       	movw	r22, r18
     eae:	90 01       	movw	r18, r0
     eb0:	0c 01       	movw	r0, r24
     eb2:	ca 01       	movw	r24, r20
     eb4:	a0 01       	movw	r20, r0
     eb6:	11 24       	eor	r1, r1
     eb8:	ff 27       	eor	r31, r31
     eba:	59 1b       	sub	r21, r25
     ebc:	99 f0       	breq	.+38     	; 0xee4 <__addsf3x+0x5c>
     ebe:	59 3f       	cpi	r21, 0xF9	; 249
     ec0:	50 f4       	brcc	.+20     	; 0xed6 <__addsf3x+0x4e>
     ec2:	50 3e       	cpi	r21, 0xE0	; 224
     ec4:	68 f1       	brcs	.+90     	; 0xf20 <__addsf3x+0x98>
     ec6:	1a 16       	cp	r1, r26
     ec8:	f0 40       	sbci	r31, 0x00	; 0
     eca:	a2 2f       	mov	r26, r18
     ecc:	23 2f       	mov	r18, r19
     ece:	34 2f       	mov	r19, r20
     ed0:	44 27       	eor	r20, r20
     ed2:	58 5f       	subi	r21, 0xF8	; 248
     ed4:	f3 cf       	rjmp	.-26     	; 0xebc <__addsf3x+0x34>
     ed6:	46 95       	lsr	r20
     ed8:	37 95       	ror	r19
     eda:	27 95       	ror	r18
     edc:	a7 95       	ror	r26
     ede:	f0 40       	sbci	r31, 0x00	; 0
     ee0:	53 95       	inc	r21
     ee2:	c9 f7       	brne	.-14     	; 0xed6 <__addsf3x+0x4e>
     ee4:	7e f4       	brtc	.+30     	; 0xf04 <__addsf3x+0x7c>
     ee6:	1f 16       	cp	r1, r31
     ee8:	ba 0b       	sbc	r27, r26
     eea:	62 0b       	sbc	r22, r18
     eec:	73 0b       	sbc	r23, r19
     eee:	84 0b       	sbc	r24, r20
     ef0:	ba f0       	brmi	.+46     	; 0xf20 <__addsf3x+0x98>
     ef2:	91 50       	subi	r25, 0x01	; 1
     ef4:	a1 f0       	breq	.+40     	; 0xf1e <__addsf3x+0x96>
     ef6:	ff 0f       	add	r31, r31
     ef8:	bb 1f       	adc	r27, r27
     efa:	66 1f       	adc	r22, r22
     efc:	77 1f       	adc	r23, r23
     efe:	88 1f       	adc	r24, r24
     f00:	c2 f7       	brpl	.-16     	; 0xef2 <__addsf3x+0x6a>
     f02:	0e c0       	rjmp	.+28     	; 0xf20 <__addsf3x+0x98>
     f04:	ba 0f       	add	r27, r26
     f06:	62 1f       	adc	r22, r18
     f08:	73 1f       	adc	r23, r19
     f0a:	84 1f       	adc	r24, r20
     f0c:	48 f4       	brcc	.+18     	; 0xf20 <__addsf3x+0x98>
     f0e:	87 95       	ror	r24
     f10:	77 95       	ror	r23
     f12:	67 95       	ror	r22
     f14:	b7 95       	ror	r27
     f16:	f7 95       	ror	r31
     f18:	9e 3f       	cpi	r25, 0xFE	; 254
     f1a:	08 f0       	brcs	.+2      	; 0xf1e <__addsf3x+0x96>
     f1c:	b3 cf       	rjmp	.-154    	; 0xe84 <__addsf3+0x1e>
     f1e:	93 95       	inc	r25
     f20:	88 0f       	add	r24, r24
     f22:	08 f0       	brcs	.+2      	; 0xf26 <__addsf3x+0x9e>
     f24:	99 27       	eor	r25, r25
     f26:	ee 0f       	add	r30, r30
     f28:	97 95       	ror	r25
     f2a:	87 95       	ror	r24
     f2c:	08 95       	ret

00000f2e <__cmpsf2>:
     f2e:	d9 d0       	rcall	.+434    	; 0x10e2 <__fp_cmp>
     f30:	08 f4       	brcc	.+2      	; 0xf34 <__cmpsf2+0x6>
     f32:	81 e0       	ldi	r24, 0x01	; 1
     f34:	08 95       	ret

00000f36 <__divsf3>:
     f36:	0c d0       	rcall	.+24     	; 0xf50 <__divsf3x>
     f38:	0f c1       	rjmp	.+542    	; 0x1158 <__fp_round>
     f3a:	07 d1       	rcall	.+526    	; 0x114a <__fp_pscB>
     f3c:	40 f0       	brcs	.+16     	; 0xf4e <__divsf3+0x18>
     f3e:	fe d0       	rcall	.+508    	; 0x113c <__fp_pscA>
     f40:	30 f0       	brcs	.+12     	; 0xf4e <__divsf3+0x18>
     f42:	21 f4       	brne	.+8      	; 0xf4c <__divsf3+0x16>
     f44:	5f 3f       	cpi	r21, 0xFF	; 255
     f46:	19 f0       	breq	.+6      	; 0xf4e <__divsf3+0x18>
     f48:	f0 c0       	rjmp	.+480    	; 0x112a <__fp_inf>
     f4a:	51 11       	cpse	r21, r1
     f4c:	39 c1       	rjmp	.+626    	; 0x11c0 <__fp_szero>
     f4e:	f3 c0       	rjmp	.+486    	; 0x1136 <__fp_nan>

00000f50 <__divsf3x>:
     f50:	14 d1       	rcall	.+552    	; 0x117a <__fp_split3>
     f52:	98 f3       	brcs	.-26     	; 0xf3a <__divsf3+0x4>

00000f54 <__divsf3_pse>:
     f54:	99 23       	and	r25, r25
     f56:	c9 f3       	breq	.-14     	; 0xf4a <__divsf3+0x14>
     f58:	55 23       	and	r21, r21
     f5a:	b1 f3       	breq	.-20     	; 0xf48 <__divsf3+0x12>
     f5c:	95 1b       	sub	r25, r21
     f5e:	55 0b       	sbc	r21, r21
     f60:	bb 27       	eor	r27, r27
     f62:	aa 27       	eor	r26, r26
     f64:	62 17       	cp	r22, r18
     f66:	73 07       	cpc	r23, r19
     f68:	84 07       	cpc	r24, r20
     f6a:	38 f0       	brcs	.+14     	; 0xf7a <__divsf3_pse+0x26>
     f6c:	9f 5f       	subi	r25, 0xFF	; 255
     f6e:	5f 4f       	sbci	r21, 0xFF	; 255
     f70:	22 0f       	add	r18, r18
     f72:	33 1f       	adc	r19, r19
     f74:	44 1f       	adc	r20, r20
     f76:	aa 1f       	adc	r26, r26
     f78:	a9 f3       	breq	.-22     	; 0xf64 <__divsf3_pse+0x10>
     f7a:	33 d0       	rcall	.+102    	; 0xfe2 <__divsf3_pse+0x8e>
     f7c:	0e 2e       	mov	r0, r30
     f7e:	3a f0       	brmi	.+14     	; 0xf8e <__divsf3_pse+0x3a>
     f80:	e0 e8       	ldi	r30, 0x80	; 128
     f82:	30 d0       	rcall	.+96     	; 0xfe4 <__divsf3_pse+0x90>
     f84:	91 50       	subi	r25, 0x01	; 1
     f86:	50 40       	sbci	r21, 0x00	; 0
     f88:	e6 95       	lsr	r30
     f8a:	00 1c       	adc	r0, r0
     f8c:	ca f7       	brpl	.-14     	; 0xf80 <__divsf3_pse+0x2c>
     f8e:	29 d0       	rcall	.+82     	; 0xfe2 <__divsf3_pse+0x8e>
     f90:	fe 2f       	mov	r31, r30
     f92:	27 d0       	rcall	.+78     	; 0xfe2 <__divsf3_pse+0x8e>
     f94:	66 0f       	add	r22, r22
     f96:	77 1f       	adc	r23, r23
     f98:	88 1f       	adc	r24, r24
     f9a:	bb 1f       	adc	r27, r27
     f9c:	26 17       	cp	r18, r22
     f9e:	37 07       	cpc	r19, r23
     fa0:	48 07       	cpc	r20, r24
     fa2:	ab 07       	cpc	r26, r27
     fa4:	b0 e8       	ldi	r27, 0x80	; 128
     fa6:	09 f0       	breq	.+2      	; 0xfaa <__divsf3_pse+0x56>
     fa8:	bb 0b       	sbc	r27, r27
     faa:	80 2d       	mov	r24, r0
     fac:	bf 01       	movw	r22, r30
     fae:	ff 27       	eor	r31, r31
     fb0:	93 58       	subi	r25, 0x83	; 131
     fb2:	5f 4f       	sbci	r21, 0xFF	; 255
     fb4:	2a f0       	brmi	.+10     	; 0xfc0 <__divsf3_pse+0x6c>
     fb6:	9e 3f       	cpi	r25, 0xFE	; 254
     fb8:	51 05       	cpc	r21, r1
     fba:	68 f0       	brcs	.+26     	; 0xfd6 <__divsf3_pse+0x82>
     fbc:	b6 c0       	rjmp	.+364    	; 0x112a <__fp_inf>
     fbe:	00 c1       	rjmp	.+512    	; 0x11c0 <__fp_szero>
     fc0:	5f 3f       	cpi	r21, 0xFF	; 255
     fc2:	ec f3       	brlt	.-6      	; 0xfbe <__divsf3_pse+0x6a>
     fc4:	98 3e       	cpi	r25, 0xE8	; 232
     fc6:	dc f3       	brlt	.-10     	; 0xfbe <__divsf3_pse+0x6a>
     fc8:	86 95       	lsr	r24
     fca:	77 95       	ror	r23
     fcc:	67 95       	ror	r22
     fce:	b7 95       	ror	r27
     fd0:	f7 95       	ror	r31
     fd2:	9f 5f       	subi	r25, 0xFF	; 255
     fd4:	c9 f7       	brne	.-14     	; 0xfc8 <__divsf3_pse+0x74>
     fd6:	88 0f       	add	r24, r24
     fd8:	91 1d       	adc	r25, r1
     fda:	96 95       	lsr	r25
     fdc:	87 95       	ror	r24
     fde:	97 f9       	bld	r25, 7
     fe0:	08 95       	ret
     fe2:	e1 e0       	ldi	r30, 0x01	; 1
     fe4:	66 0f       	add	r22, r22
     fe6:	77 1f       	adc	r23, r23
     fe8:	88 1f       	adc	r24, r24
     fea:	bb 1f       	adc	r27, r27
     fec:	62 17       	cp	r22, r18
     fee:	73 07       	cpc	r23, r19
     ff0:	84 07       	cpc	r24, r20
     ff2:	ba 07       	cpc	r27, r26
     ff4:	20 f0       	brcs	.+8      	; 0xffe <__divsf3_pse+0xaa>
     ff6:	62 1b       	sub	r22, r18
     ff8:	73 0b       	sbc	r23, r19
     ffa:	84 0b       	sbc	r24, r20
     ffc:	ba 0b       	sbc	r27, r26
     ffe:	ee 1f       	adc	r30, r30
    1000:	88 f7       	brcc	.-30     	; 0xfe4 <__divsf3_pse+0x90>
    1002:	e0 95       	com	r30
    1004:	08 95       	ret

00001006 <__fixsfsi>:
    1006:	04 d0       	rcall	.+8      	; 0x1010 <__fixunssfsi>
    1008:	68 94       	set
    100a:	b1 11       	cpse	r27, r1
    100c:	d9 c0       	rjmp	.+434    	; 0x11c0 <__fp_szero>
    100e:	08 95       	ret

00001010 <__fixunssfsi>:
    1010:	bc d0       	rcall	.+376    	; 0x118a <__fp_splitA>
    1012:	88 f0       	brcs	.+34     	; 0x1036 <__fixunssfsi+0x26>
    1014:	9f 57       	subi	r25, 0x7F	; 127
    1016:	90 f0       	brcs	.+36     	; 0x103c <__fixunssfsi+0x2c>
    1018:	b9 2f       	mov	r27, r25
    101a:	99 27       	eor	r25, r25
    101c:	b7 51       	subi	r27, 0x17	; 23
    101e:	a0 f0       	brcs	.+40     	; 0x1048 <__fixunssfsi+0x38>
    1020:	d1 f0       	breq	.+52     	; 0x1056 <__fixunssfsi+0x46>
    1022:	66 0f       	add	r22, r22
    1024:	77 1f       	adc	r23, r23
    1026:	88 1f       	adc	r24, r24
    1028:	99 1f       	adc	r25, r25
    102a:	1a f0       	brmi	.+6      	; 0x1032 <__fixunssfsi+0x22>
    102c:	ba 95       	dec	r27
    102e:	c9 f7       	brne	.-14     	; 0x1022 <__fixunssfsi+0x12>
    1030:	12 c0       	rjmp	.+36     	; 0x1056 <__fixunssfsi+0x46>
    1032:	b1 30       	cpi	r27, 0x01	; 1
    1034:	81 f0       	breq	.+32     	; 0x1056 <__fixunssfsi+0x46>
    1036:	c3 d0       	rcall	.+390    	; 0x11be <__fp_zero>
    1038:	b1 e0       	ldi	r27, 0x01	; 1
    103a:	08 95       	ret
    103c:	c0 c0       	rjmp	.+384    	; 0x11be <__fp_zero>
    103e:	67 2f       	mov	r22, r23
    1040:	78 2f       	mov	r23, r24
    1042:	88 27       	eor	r24, r24
    1044:	b8 5f       	subi	r27, 0xF8	; 248
    1046:	39 f0       	breq	.+14     	; 0x1056 <__fixunssfsi+0x46>
    1048:	b9 3f       	cpi	r27, 0xF9	; 249
    104a:	cc f3       	brlt	.-14     	; 0x103e <__fixunssfsi+0x2e>
    104c:	86 95       	lsr	r24
    104e:	77 95       	ror	r23
    1050:	67 95       	ror	r22
    1052:	b3 95       	inc	r27
    1054:	d9 f7       	brne	.-10     	; 0x104c <__fixunssfsi+0x3c>
    1056:	3e f4       	brtc	.+14     	; 0x1066 <__fixunssfsi+0x56>
    1058:	90 95       	com	r25
    105a:	80 95       	com	r24
    105c:	70 95       	com	r23
    105e:	61 95       	neg	r22
    1060:	7f 4f       	sbci	r23, 0xFF	; 255
    1062:	8f 4f       	sbci	r24, 0xFF	; 255
    1064:	9f 4f       	sbci	r25, 0xFF	; 255
    1066:	08 95       	ret

00001068 <__floatunsisf>:
    1068:	e8 94       	clt
    106a:	09 c0       	rjmp	.+18     	; 0x107e <__floatsisf+0x12>

0000106c <__floatsisf>:
    106c:	97 fb       	bst	r25, 7
    106e:	3e f4       	brtc	.+14     	; 0x107e <__floatsisf+0x12>
    1070:	90 95       	com	r25
    1072:	80 95       	com	r24
    1074:	70 95       	com	r23
    1076:	61 95       	neg	r22
    1078:	7f 4f       	sbci	r23, 0xFF	; 255
    107a:	8f 4f       	sbci	r24, 0xFF	; 255
    107c:	9f 4f       	sbci	r25, 0xFF	; 255
    107e:	99 23       	and	r25, r25
    1080:	a9 f0       	breq	.+42     	; 0x10ac <__floatsisf+0x40>
    1082:	f9 2f       	mov	r31, r25
    1084:	96 e9       	ldi	r25, 0x96	; 150
    1086:	bb 27       	eor	r27, r27
    1088:	93 95       	inc	r25
    108a:	f6 95       	lsr	r31
    108c:	87 95       	ror	r24
    108e:	77 95       	ror	r23
    1090:	67 95       	ror	r22
    1092:	b7 95       	ror	r27
    1094:	f1 11       	cpse	r31, r1
    1096:	f8 cf       	rjmp	.-16     	; 0x1088 <__floatsisf+0x1c>
    1098:	fa f4       	brpl	.+62     	; 0x10d8 <__floatsisf+0x6c>
    109a:	bb 0f       	add	r27, r27
    109c:	11 f4       	brne	.+4      	; 0x10a2 <__floatsisf+0x36>
    109e:	60 ff       	sbrs	r22, 0
    10a0:	1b c0       	rjmp	.+54     	; 0x10d8 <__floatsisf+0x6c>
    10a2:	6f 5f       	subi	r22, 0xFF	; 255
    10a4:	7f 4f       	sbci	r23, 0xFF	; 255
    10a6:	8f 4f       	sbci	r24, 0xFF	; 255
    10a8:	9f 4f       	sbci	r25, 0xFF	; 255
    10aa:	16 c0       	rjmp	.+44     	; 0x10d8 <__floatsisf+0x6c>
    10ac:	88 23       	and	r24, r24
    10ae:	11 f0       	breq	.+4      	; 0x10b4 <__floatsisf+0x48>
    10b0:	96 e9       	ldi	r25, 0x96	; 150
    10b2:	11 c0       	rjmp	.+34     	; 0x10d6 <__floatsisf+0x6a>
    10b4:	77 23       	and	r23, r23
    10b6:	21 f0       	breq	.+8      	; 0x10c0 <__floatsisf+0x54>
    10b8:	9e e8       	ldi	r25, 0x8E	; 142
    10ba:	87 2f       	mov	r24, r23
    10bc:	76 2f       	mov	r23, r22
    10be:	05 c0       	rjmp	.+10     	; 0x10ca <__floatsisf+0x5e>
    10c0:	66 23       	and	r22, r22
    10c2:	71 f0       	breq	.+28     	; 0x10e0 <__floatsisf+0x74>
    10c4:	96 e8       	ldi	r25, 0x86	; 134
    10c6:	86 2f       	mov	r24, r22
    10c8:	70 e0       	ldi	r23, 0x00	; 0
    10ca:	60 e0       	ldi	r22, 0x00	; 0
    10cc:	2a f0       	brmi	.+10     	; 0x10d8 <__floatsisf+0x6c>
    10ce:	9a 95       	dec	r25
    10d0:	66 0f       	add	r22, r22
    10d2:	77 1f       	adc	r23, r23
    10d4:	88 1f       	adc	r24, r24
    10d6:	da f7       	brpl	.-10     	; 0x10ce <__floatsisf+0x62>
    10d8:	88 0f       	add	r24, r24
    10da:	96 95       	lsr	r25
    10dc:	87 95       	ror	r24
    10de:	97 f9       	bld	r25, 7
    10e0:	08 95       	ret

000010e2 <__fp_cmp>:
    10e2:	99 0f       	add	r25, r25
    10e4:	00 08       	sbc	r0, r0
    10e6:	55 0f       	add	r21, r21
    10e8:	aa 0b       	sbc	r26, r26
    10ea:	e0 e8       	ldi	r30, 0x80	; 128
    10ec:	fe ef       	ldi	r31, 0xFE	; 254
    10ee:	16 16       	cp	r1, r22
    10f0:	17 06       	cpc	r1, r23
    10f2:	e8 07       	cpc	r30, r24
    10f4:	f9 07       	cpc	r31, r25
    10f6:	c0 f0       	brcs	.+48     	; 0x1128 <__fp_cmp+0x46>
    10f8:	12 16       	cp	r1, r18
    10fa:	13 06       	cpc	r1, r19
    10fc:	e4 07       	cpc	r30, r20
    10fe:	f5 07       	cpc	r31, r21
    1100:	98 f0       	brcs	.+38     	; 0x1128 <__fp_cmp+0x46>
    1102:	62 1b       	sub	r22, r18
    1104:	73 0b       	sbc	r23, r19
    1106:	84 0b       	sbc	r24, r20
    1108:	95 0b       	sbc	r25, r21
    110a:	39 f4       	brne	.+14     	; 0x111a <__fp_cmp+0x38>
    110c:	0a 26       	eor	r0, r26
    110e:	61 f0       	breq	.+24     	; 0x1128 <__fp_cmp+0x46>
    1110:	23 2b       	or	r18, r19
    1112:	24 2b       	or	r18, r20
    1114:	25 2b       	or	r18, r21
    1116:	21 f4       	brne	.+8      	; 0x1120 <__fp_cmp+0x3e>
    1118:	08 95       	ret
    111a:	0a 26       	eor	r0, r26
    111c:	09 f4       	brne	.+2      	; 0x1120 <__fp_cmp+0x3e>
    111e:	a1 40       	sbci	r26, 0x01	; 1
    1120:	a6 95       	lsr	r26
    1122:	8f ef       	ldi	r24, 0xFF	; 255
    1124:	81 1d       	adc	r24, r1
    1126:	81 1d       	adc	r24, r1
    1128:	08 95       	ret

0000112a <__fp_inf>:
    112a:	97 f9       	bld	r25, 7
    112c:	9f 67       	ori	r25, 0x7F	; 127
    112e:	80 e8       	ldi	r24, 0x80	; 128
    1130:	70 e0       	ldi	r23, 0x00	; 0
    1132:	60 e0       	ldi	r22, 0x00	; 0
    1134:	08 95       	ret

00001136 <__fp_nan>:
    1136:	9f ef       	ldi	r25, 0xFF	; 255
    1138:	80 ec       	ldi	r24, 0xC0	; 192
    113a:	08 95       	ret

0000113c <__fp_pscA>:
    113c:	00 24       	eor	r0, r0
    113e:	0a 94       	dec	r0
    1140:	16 16       	cp	r1, r22
    1142:	17 06       	cpc	r1, r23
    1144:	18 06       	cpc	r1, r24
    1146:	09 06       	cpc	r0, r25
    1148:	08 95       	ret

0000114a <__fp_pscB>:
    114a:	00 24       	eor	r0, r0
    114c:	0a 94       	dec	r0
    114e:	12 16       	cp	r1, r18
    1150:	13 06       	cpc	r1, r19
    1152:	14 06       	cpc	r1, r20
    1154:	05 06       	cpc	r0, r21
    1156:	08 95       	ret

00001158 <__fp_round>:
    1158:	09 2e       	mov	r0, r25
    115a:	03 94       	inc	r0
    115c:	00 0c       	add	r0, r0
    115e:	11 f4       	brne	.+4      	; 0x1164 <__fp_round+0xc>
    1160:	88 23       	and	r24, r24
    1162:	52 f0       	brmi	.+20     	; 0x1178 <__fp_round+0x20>
    1164:	bb 0f       	add	r27, r27
    1166:	40 f4       	brcc	.+16     	; 0x1178 <__fp_round+0x20>
    1168:	bf 2b       	or	r27, r31
    116a:	11 f4       	brne	.+4      	; 0x1170 <__fp_round+0x18>
    116c:	60 ff       	sbrs	r22, 0
    116e:	04 c0       	rjmp	.+8      	; 0x1178 <__fp_round+0x20>
    1170:	6f 5f       	subi	r22, 0xFF	; 255
    1172:	7f 4f       	sbci	r23, 0xFF	; 255
    1174:	8f 4f       	sbci	r24, 0xFF	; 255
    1176:	9f 4f       	sbci	r25, 0xFF	; 255
    1178:	08 95       	ret

0000117a <__fp_split3>:
    117a:	57 fd       	sbrc	r21, 7
    117c:	90 58       	subi	r25, 0x80	; 128
    117e:	44 0f       	add	r20, r20
    1180:	55 1f       	adc	r21, r21
    1182:	59 f0       	breq	.+22     	; 0x119a <__fp_splitA+0x10>
    1184:	5f 3f       	cpi	r21, 0xFF	; 255
    1186:	71 f0       	breq	.+28     	; 0x11a4 <__fp_splitA+0x1a>
    1188:	47 95       	ror	r20

0000118a <__fp_splitA>:
    118a:	88 0f       	add	r24, r24
    118c:	97 fb       	bst	r25, 7
    118e:	99 1f       	adc	r25, r25
    1190:	61 f0       	breq	.+24     	; 0x11aa <__fp_splitA+0x20>
    1192:	9f 3f       	cpi	r25, 0xFF	; 255
    1194:	79 f0       	breq	.+30     	; 0x11b4 <__fp_splitA+0x2a>
    1196:	87 95       	ror	r24
    1198:	08 95       	ret
    119a:	12 16       	cp	r1, r18
    119c:	13 06       	cpc	r1, r19
    119e:	14 06       	cpc	r1, r20
    11a0:	55 1f       	adc	r21, r21
    11a2:	f2 cf       	rjmp	.-28     	; 0x1188 <__fp_split3+0xe>
    11a4:	46 95       	lsr	r20
    11a6:	f1 df       	rcall	.-30     	; 0x118a <__fp_splitA>
    11a8:	08 c0       	rjmp	.+16     	; 0x11ba <__fp_splitA+0x30>
    11aa:	16 16       	cp	r1, r22
    11ac:	17 06       	cpc	r1, r23
    11ae:	18 06       	cpc	r1, r24
    11b0:	99 1f       	adc	r25, r25
    11b2:	f1 cf       	rjmp	.-30     	; 0x1196 <__fp_splitA+0xc>
    11b4:	86 95       	lsr	r24
    11b6:	71 05       	cpc	r23, r1
    11b8:	61 05       	cpc	r22, r1
    11ba:	08 94       	sec
    11bc:	08 95       	ret

000011be <__fp_zero>:
    11be:	e8 94       	clt

000011c0 <__fp_szero>:
    11c0:	bb 27       	eor	r27, r27
    11c2:	66 27       	eor	r22, r22
    11c4:	77 27       	eor	r23, r23
    11c6:	cb 01       	movw	r24, r22
    11c8:	97 f9       	bld	r25, 7
    11ca:	08 95       	ret

000011cc <__gesf2>:
    11cc:	8a df       	rcall	.-236    	; 0x10e2 <__fp_cmp>
    11ce:	08 f4       	brcc	.+2      	; 0x11d2 <__gesf2+0x6>
    11d0:	8f ef       	ldi	r24, 0xFF	; 255
    11d2:	08 95       	ret

000011d4 <__mulsf3>:
    11d4:	0b d0       	rcall	.+22     	; 0x11ec <__mulsf3x>
    11d6:	c0 cf       	rjmp	.-128    	; 0x1158 <__fp_round>
    11d8:	b1 df       	rcall	.-158    	; 0x113c <__fp_pscA>
    11da:	28 f0       	brcs	.+10     	; 0x11e6 <__mulsf3+0x12>
    11dc:	b6 df       	rcall	.-148    	; 0x114a <__fp_pscB>
    11de:	18 f0       	brcs	.+6      	; 0x11e6 <__mulsf3+0x12>
    11e0:	95 23       	and	r25, r21
    11e2:	09 f0       	breq	.+2      	; 0x11e6 <__mulsf3+0x12>
    11e4:	a2 cf       	rjmp	.-188    	; 0x112a <__fp_inf>
    11e6:	a7 cf       	rjmp	.-178    	; 0x1136 <__fp_nan>
    11e8:	11 24       	eor	r1, r1
    11ea:	ea cf       	rjmp	.-44     	; 0x11c0 <__fp_szero>

000011ec <__mulsf3x>:
    11ec:	c6 df       	rcall	.-116    	; 0x117a <__fp_split3>
    11ee:	a0 f3       	brcs	.-24     	; 0x11d8 <__mulsf3+0x4>

000011f0 <__mulsf3_pse>:
    11f0:	95 9f       	mul	r25, r21
    11f2:	d1 f3       	breq	.-12     	; 0x11e8 <__mulsf3+0x14>
    11f4:	95 0f       	add	r25, r21
    11f6:	50 e0       	ldi	r21, 0x00	; 0
    11f8:	55 1f       	adc	r21, r21
    11fa:	62 9f       	mul	r22, r18
    11fc:	f0 01       	movw	r30, r0
    11fe:	72 9f       	mul	r23, r18
    1200:	bb 27       	eor	r27, r27
    1202:	f0 0d       	add	r31, r0
    1204:	b1 1d       	adc	r27, r1
    1206:	63 9f       	mul	r22, r19
    1208:	aa 27       	eor	r26, r26
    120a:	f0 0d       	add	r31, r0
    120c:	b1 1d       	adc	r27, r1
    120e:	aa 1f       	adc	r26, r26
    1210:	64 9f       	mul	r22, r20
    1212:	66 27       	eor	r22, r22
    1214:	b0 0d       	add	r27, r0
    1216:	a1 1d       	adc	r26, r1
    1218:	66 1f       	adc	r22, r22
    121a:	82 9f       	mul	r24, r18
    121c:	22 27       	eor	r18, r18
    121e:	b0 0d       	add	r27, r0
    1220:	a1 1d       	adc	r26, r1
    1222:	62 1f       	adc	r22, r18
    1224:	73 9f       	mul	r23, r19
    1226:	b0 0d       	add	r27, r0
    1228:	a1 1d       	adc	r26, r1
    122a:	62 1f       	adc	r22, r18
    122c:	83 9f       	mul	r24, r19
    122e:	a0 0d       	add	r26, r0
    1230:	61 1d       	adc	r22, r1
    1232:	22 1f       	adc	r18, r18
    1234:	74 9f       	mul	r23, r20
    1236:	33 27       	eor	r19, r19
    1238:	a0 0d       	add	r26, r0
    123a:	61 1d       	adc	r22, r1
    123c:	23 1f       	adc	r18, r19
    123e:	84 9f       	mul	r24, r20
    1240:	60 0d       	add	r22, r0
    1242:	21 1d       	adc	r18, r1
    1244:	82 2f       	mov	r24, r18
    1246:	76 2f       	mov	r23, r22
    1248:	6a 2f       	mov	r22, r26
    124a:	11 24       	eor	r1, r1
    124c:	9f 57       	subi	r25, 0x7F	; 127
    124e:	50 40       	sbci	r21, 0x00	; 0
    1250:	8a f0       	brmi	.+34     	; 0x1274 <__mulsf3_pse+0x84>
    1252:	e1 f0       	breq	.+56     	; 0x128c <__mulsf3_pse+0x9c>
    1254:	88 23       	and	r24, r24
    1256:	4a f0       	brmi	.+18     	; 0x126a <__mulsf3_pse+0x7a>
    1258:	ee 0f       	add	r30, r30
    125a:	ff 1f       	adc	r31, r31
    125c:	bb 1f       	adc	r27, r27
    125e:	66 1f       	adc	r22, r22
    1260:	77 1f       	adc	r23, r23
    1262:	88 1f       	adc	r24, r24
    1264:	91 50       	subi	r25, 0x01	; 1
    1266:	50 40       	sbci	r21, 0x00	; 0
    1268:	a9 f7       	brne	.-22     	; 0x1254 <__mulsf3_pse+0x64>
    126a:	9e 3f       	cpi	r25, 0xFE	; 254
    126c:	51 05       	cpc	r21, r1
    126e:	70 f0       	brcs	.+28     	; 0x128c <__mulsf3_pse+0x9c>
    1270:	5c cf       	rjmp	.-328    	; 0x112a <__fp_inf>
    1272:	a6 cf       	rjmp	.-180    	; 0x11c0 <__fp_szero>
    1274:	5f 3f       	cpi	r21, 0xFF	; 255
    1276:	ec f3       	brlt	.-6      	; 0x1272 <__mulsf3_pse+0x82>
    1278:	98 3e       	cpi	r25, 0xE8	; 232
    127a:	dc f3       	brlt	.-10     	; 0x1272 <__mulsf3_pse+0x82>
    127c:	86 95       	lsr	r24
    127e:	77 95       	ror	r23
    1280:	67 95       	ror	r22
    1282:	b7 95       	ror	r27
    1284:	f7 95       	ror	r31
    1286:	e7 95       	ror	r30
    1288:	9f 5f       	subi	r25, 0xFF	; 255
    128a:	c1 f7       	brne	.-16     	; 0x127c <__mulsf3_pse+0x8c>
    128c:	fe 2b       	or	r31, r30
    128e:	88 0f       	add	r24, r24
    1290:	91 1d       	adc	r25, r1
    1292:	96 95       	lsr	r25
    1294:	87 95       	ror	r24
    1296:	97 f9       	bld	r25, 7
    1298:	08 95       	ret

0000129a <__mulsi3>:
    129a:	db 01       	movw	r26, r22
    129c:	8f 93       	push	r24
    129e:	9f 93       	push	r25
    12a0:	60 d0       	rcall	.+192    	; 0x1362 <__muluhisi3>
    12a2:	bf 91       	pop	r27
    12a4:	af 91       	pop	r26
    12a6:	a2 9f       	mul	r26, r18
    12a8:	80 0d       	add	r24, r0
    12aa:	91 1d       	adc	r25, r1
    12ac:	a3 9f       	mul	r26, r19
    12ae:	90 0d       	add	r25, r0
    12b0:	b2 9f       	mul	r27, r18
    12b2:	90 0d       	add	r25, r0
    12b4:	11 24       	eor	r1, r1
    12b6:	08 95       	ret

000012b8 <__udivmodsi4>:
    12b8:	a1 e2       	ldi	r26, 0x21	; 33
    12ba:	1a 2e       	mov	r1, r26
    12bc:	aa 1b       	sub	r26, r26
    12be:	bb 1b       	sub	r27, r27
    12c0:	fd 01       	movw	r30, r26
    12c2:	0d c0       	rjmp	.+26     	; 0x12de <__udivmodsi4_ep>

000012c4 <__udivmodsi4_loop>:
    12c4:	aa 1f       	adc	r26, r26
    12c6:	bb 1f       	adc	r27, r27
    12c8:	ee 1f       	adc	r30, r30
    12ca:	ff 1f       	adc	r31, r31
    12cc:	a2 17       	cp	r26, r18
    12ce:	b3 07       	cpc	r27, r19
    12d0:	e4 07       	cpc	r30, r20
    12d2:	f5 07       	cpc	r31, r21
    12d4:	20 f0       	brcs	.+8      	; 0x12de <__udivmodsi4_ep>
    12d6:	a2 1b       	sub	r26, r18
    12d8:	b3 0b       	sbc	r27, r19
    12da:	e4 0b       	sbc	r30, r20
    12dc:	f5 0b       	sbc	r31, r21

000012de <__udivmodsi4_ep>:
    12de:	66 1f       	adc	r22, r22
    12e0:	77 1f       	adc	r23, r23
    12e2:	88 1f       	adc	r24, r24
    12e4:	99 1f       	adc	r25, r25
    12e6:	1a 94       	dec	r1
    12e8:	69 f7       	brne	.-38     	; 0x12c4 <__udivmodsi4_loop>
    12ea:	60 95       	com	r22
    12ec:	70 95       	com	r23
    12ee:	80 95       	com	r24
    12f0:	90 95       	com	r25
    12f2:	9b 01       	movw	r18, r22
    12f4:	ac 01       	movw	r20, r24
    12f6:	bd 01       	movw	r22, r26
    12f8:	cf 01       	movw	r24, r30
    12fa:	08 95       	ret

000012fc <__divmodsi4>:
    12fc:	05 2e       	mov	r0, r21
    12fe:	97 fb       	bst	r25, 7
    1300:	16 f4       	brtc	.+4      	; 0x1306 <__divmodsi4+0xa>
    1302:	00 94       	com	r0
    1304:	0f d0       	rcall	.+30     	; 0x1324 <__negsi2>
    1306:	57 fd       	sbrc	r21, 7
    1308:	05 d0       	rcall	.+10     	; 0x1314 <__divmodsi4_neg2>
    130a:	d6 df       	rcall	.-84     	; 0x12b8 <__udivmodsi4>
    130c:	07 fc       	sbrc	r0, 7
    130e:	02 d0       	rcall	.+4      	; 0x1314 <__divmodsi4_neg2>
    1310:	46 f4       	brtc	.+16     	; 0x1322 <__divmodsi4_exit>
    1312:	08 c0       	rjmp	.+16     	; 0x1324 <__negsi2>

00001314 <__divmodsi4_neg2>:
    1314:	50 95       	com	r21
    1316:	40 95       	com	r20
    1318:	30 95       	com	r19
    131a:	21 95       	neg	r18
    131c:	3f 4f       	sbci	r19, 0xFF	; 255
    131e:	4f 4f       	sbci	r20, 0xFF	; 255
    1320:	5f 4f       	sbci	r21, 0xFF	; 255

00001322 <__divmodsi4_exit>:
    1322:	08 95       	ret

00001324 <__negsi2>:
    1324:	90 95       	com	r25
    1326:	80 95       	com	r24
    1328:	70 95       	com	r23
    132a:	61 95       	neg	r22
    132c:	7f 4f       	sbci	r23, 0xFF	; 255
    132e:	8f 4f       	sbci	r24, 0xFF	; 255
    1330:	9f 4f       	sbci	r25, 0xFF	; 255
    1332:	08 95       	ret

00001334 <__tablejump2__>:
    1334:	ee 0f       	add	r30, r30
    1336:	ff 1f       	adc	r31, r31
    1338:	88 1f       	adc	r24, r24
    133a:	8b bf       	out	0x3b, r24	; 59
    133c:	07 90       	elpm	r0, Z+
    133e:	f6 91       	elpm	r31, Z
    1340:	e0 2d       	mov	r30, r0
    1342:	19 94       	eijmp

00001344 <__umulhisi3>:
    1344:	a2 9f       	mul	r26, r18
    1346:	b0 01       	movw	r22, r0
    1348:	b3 9f       	mul	r27, r19
    134a:	c0 01       	movw	r24, r0
    134c:	a3 9f       	mul	r26, r19
    134e:	70 0d       	add	r23, r0
    1350:	81 1d       	adc	r24, r1
    1352:	11 24       	eor	r1, r1
    1354:	91 1d       	adc	r25, r1
    1356:	b2 9f       	mul	r27, r18
    1358:	70 0d       	add	r23, r0
    135a:	81 1d       	adc	r24, r1
    135c:	11 24       	eor	r1, r1
    135e:	91 1d       	adc	r25, r1
    1360:	08 95       	ret

00001362 <__muluhisi3>:
    1362:	f0 df       	rcall	.-32     	; 0x1344 <__umulhisi3>
    1364:	a5 9f       	mul	r26, r21
    1366:	90 0d       	add	r25, r0
    1368:	b4 9f       	mul	r27, r20
    136a:	90 0d       	add	r25, r0
    136c:	a4 9f       	mul	r26, r20
    136e:	80 0d       	add	r24, r0
    1370:	91 1d       	adc	r25, r1
    1372:	11 24       	eor	r1, r1
    1374:	08 95       	ret

00001376 <_exit>:
    1376:	f8 94       	cli

00001378 <__stop_program>:
    1378:	ff cf       	rjmp	.-2      	; 0x1378 <__stop_program>
