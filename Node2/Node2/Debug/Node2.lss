
Node2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800200  000010b6  0000114a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000010b6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  00800202  00800202  0000114c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000114c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000117c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f0  00000000  00000000  000011bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002681  00000000  00000000  000013ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000166d  00000000  00000000  00003a2d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011dc  00000000  00000000  0000509a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000410  00000000  00000000  00006278  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c43  00000000  00000000  00006688  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ea5  00000000  00000000  000072cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000178  00000000  00000000  00008170  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	c2 c0       	rjmp	.+388    	; 0x186 <__ctors_end>
       2:	00 00       	nop
       4:	df c0       	rjmp	.+446    	; 0x1c4 <__bad_interrupt>
       6:	00 00       	nop
       8:	dd c0       	rjmp	.+442    	; 0x1c4 <__bad_interrupt>
       a:	00 00       	nop
       c:	db c0       	rjmp	.+438    	; 0x1c4 <__bad_interrupt>
       e:	00 00       	nop
      10:	d9 c0       	rjmp	.+434    	; 0x1c4 <__bad_interrupt>
      12:	00 00       	nop
      14:	d7 c0       	rjmp	.+430    	; 0x1c4 <__bad_interrupt>
      16:	00 00       	nop
      18:	d5 c0       	rjmp	.+426    	; 0x1c4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	d3 c0       	rjmp	.+422    	; 0x1c4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	d1 c0       	rjmp	.+418    	; 0x1c4 <__bad_interrupt>
      22:	00 00       	nop
      24:	cf c0       	rjmp	.+414    	; 0x1c4 <__bad_interrupt>
      26:	00 00       	nop
      28:	cd c0       	rjmp	.+410    	; 0x1c4 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	cb c0       	rjmp	.+406    	; 0x1c4 <__bad_interrupt>
      2e:	00 00       	nop
      30:	c9 c0       	rjmp	.+402    	; 0x1c4 <__bad_interrupt>
      32:	00 00       	nop
      34:	c7 c0       	rjmp	.+398    	; 0x1c4 <__bad_interrupt>
      36:	00 00       	nop
      38:	c5 c0       	rjmp	.+394    	; 0x1c4 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	c3 c0       	rjmp	.+390    	; 0x1c4 <__bad_interrupt>
      3e:	00 00       	nop
      40:	c1 c0       	rjmp	.+386    	; 0x1c4 <__bad_interrupt>
      42:	00 00       	nop
      44:	bf c0       	rjmp	.+382    	; 0x1c4 <__bad_interrupt>
      46:	00 00       	nop
      48:	bd c0       	rjmp	.+378    	; 0x1c4 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	bb c0       	rjmp	.+374    	; 0x1c4 <__bad_interrupt>
      4e:	00 00       	nop
      50:	b9 c0       	rjmp	.+370    	; 0x1c4 <__bad_interrupt>
      52:	00 00       	nop
      54:	b7 c0       	rjmp	.+366    	; 0x1c4 <__bad_interrupt>
      56:	00 00       	nop
      58:	b5 c0       	rjmp	.+362    	; 0x1c4 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	b3 c0       	rjmp	.+358    	; 0x1c4 <__bad_interrupt>
      5e:	00 00       	nop
      60:	b1 c0       	rjmp	.+354    	; 0x1c4 <__bad_interrupt>
      62:	00 00       	nop
      64:	af c0       	rjmp	.+350    	; 0x1c4 <__bad_interrupt>
      66:	00 00       	nop
      68:	ad c0       	rjmp	.+346    	; 0x1c4 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	ab c0       	rjmp	.+342    	; 0x1c4 <__bad_interrupt>
      6e:	00 00       	nop
      70:	a9 c0       	rjmp	.+338    	; 0x1c4 <__bad_interrupt>
      72:	00 00       	nop
      74:	a7 c0       	rjmp	.+334    	; 0x1c4 <__bad_interrupt>
      76:	00 00       	nop
      78:	a5 c0       	rjmp	.+330    	; 0x1c4 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	a3 c0       	rjmp	.+326    	; 0x1c4 <__bad_interrupt>
      7e:	00 00       	nop
      80:	a1 c0       	rjmp	.+322    	; 0x1c4 <__bad_interrupt>
      82:	00 00       	nop
      84:	9f c0       	rjmp	.+318    	; 0x1c4 <__bad_interrupt>
      86:	00 00       	nop
      88:	9d c0       	rjmp	.+314    	; 0x1c4 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	9b c0       	rjmp	.+310    	; 0x1c4 <__bad_interrupt>
      8e:	00 00       	nop
      90:	99 c0       	rjmp	.+306    	; 0x1c4 <__bad_interrupt>
      92:	00 00       	nop
      94:	97 c0       	rjmp	.+302    	; 0x1c4 <__bad_interrupt>
      96:	00 00       	nop
      98:	95 c0       	rjmp	.+298    	; 0x1c4 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	b2 c2       	rjmp	.+1380   	; 0x602 <__vector_39>
      9e:	00 00       	nop
      a0:	91 c0       	rjmp	.+290    	; 0x1c4 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	8f c0       	rjmp	.+286    	; 0x1c4 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	8d c0       	rjmp	.+282    	; 0x1c4 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	8b c0       	rjmp	.+278    	; 0x1c4 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	89 c0       	rjmp	.+274    	; 0x1c4 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	87 c0       	rjmp	.+270    	; 0x1c4 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	85 c0       	rjmp	.+266    	; 0x1c4 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	83 c0       	rjmp	.+262    	; 0x1c4 <__bad_interrupt>
      be:	00 00       	nop
      c0:	81 c0       	rjmp	.+258    	; 0x1c4 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	7f c0       	rjmp	.+254    	; 0x1c4 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	7d c0       	rjmp	.+250    	; 0x1c4 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	7b c0       	rjmp	.+246    	; 0x1c4 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	79 c0       	rjmp	.+242    	; 0x1c4 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	77 c0       	rjmp	.+238    	; 0x1c4 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	75 c0       	rjmp	.+234    	; 0x1c4 <__bad_interrupt>
      da:	00 00       	nop
      dc:	73 c0       	rjmp	.+230    	; 0x1c4 <__bad_interrupt>
      de:	00 00       	nop
      e0:	71 c0       	rjmp	.+226    	; 0x1c4 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	1f 03       	fmul	r17, r23
      e6:	71 03       	mulsu	r23, r17
      e8:	71 03       	mulsu	r23, r17
      ea:	71 03       	mulsu	r23, r17
      ec:	71 03       	mulsu	r23, r17
      ee:	71 03       	mulsu	r23, r17
      f0:	71 03       	mulsu	r23, r17
      f2:	71 03       	mulsu	r23, r17
      f4:	1f 03       	fmul	r17, r23
      f6:	71 03       	mulsu	r23, r17
      f8:	71 03       	mulsu	r23, r17
      fa:	71 03       	mulsu	r23, r17
      fc:	71 03       	mulsu	r23, r17
      fe:	71 03       	mulsu	r23, r17
     100:	71 03       	mulsu	r23, r17
     102:	71 03       	mulsu	r23, r17
     104:	21 03       	mulsu	r18, r17
     106:	71 03       	mulsu	r23, r17
     108:	71 03       	mulsu	r23, r17
     10a:	71 03       	mulsu	r23, r17
     10c:	71 03       	mulsu	r23, r17
     10e:	71 03       	mulsu	r23, r17
     110:	71 03       	mulsu	r23, r17
     112:	71 03       	mulsu	r23, r17
     114:	71 03       	mulsu	r23, r17
     116:	71 03       	mulsu	r23, r17
     118:	71 03       	mulsu	r23, r17
     11a:	71 03       	mulsu	r23, r17
     11c:	71 03       	mulsu	r23, r17
     11e:	71 03       	mulsu	r23, r17
     120:	71 03       	mulsu	r23, r17
     122:	71 03       	mulsu	r23, r17
     124:	21 03       	mulsu	r18, r17
     126:	71 03       	mulsu	r23, r17
     128:	71 03       	mulsu	r23, r17
     12a:	71 03       	mulsu	r23, r17
     12c:	71 03       	mulsu	r23, r17
     12e:	71 03       	mulsu	r23, r17
     130:	71 03       	mulsu	r23, r17
     132:	71 03       	mulsu	r23, r17
     134:	71 03       	mulsu	r23, r17
     136:	71 03       	mulsu	r23, r17
     138:	71 03       	mulsu	r23, r17
     13a:	71 03       	mulsu	r23, r17
     13c:	71 03       	mulsu	r23, r17
     13e:	71 03       	mulsu	r23, r17
     140:	71 03       	mulsu	r23, r17
     142:	71 03       	mulsu	r23, r17
     144:	6d 03       	fmul	r22, r21
     146:	71 03       	mulsu	r23, r17
     148:	71 03       	mulsu	r23, r17
     14a:	71 03       	mulsu	r23, r17
     14c:	71 03       	mulsu	r23, r17
     14e:	71 03       	mulsu	r23, r17
     150:	71 03       	mulsu	r23, r17
     152:	71 03       	mulsu	r23, r17
     154:	4a 03       	fmul	r20, r18
     156:	71 03       	mulsu	r23, r17
     158:	71 03       	mulsu	r23, r17
     15a:	71 03       	mulsu	r23, r17
     15c:	71 03       	mulsu	r23, r17
     15e:	71 03       	mulsu	r23, r17
     160:	71 03       	mulsu	r23, r17
     162:	71 03       	mulsu	r23, r17
     164:	71 03       	mulsu	r23, r17
     166:	71 03       	mulsu	r23, r17
     168:	71 03       	mulsu	r23, r17
     16a:	71 03       	mulsu	r23, r17
     16c:	71 03       	mulsu	r23, r17
     16e:	71 03       	mulsu	r23, r17
     170:	71 03       	mulsu	r23, r17
     172:	71 03       	mulsu	r23, r17
     174:	3e 03       	fmul	r19, r22
     176:	71 03       	mulsu	r23, r17
     178:	71 03       	mulsu	r23, r17
     17a:	71 03       	mulsu	r23, r17
     17c:	71 03       	mulsu	r23, r17
     17e:	71 03       	mulsu	r23, r17
     180:	71 03       	mulsu	r23, r17
     182:	71 03       	mulsu	r23, r17
     184:	5c 03       	fmul	r21, r20

00000186 <__ctors_end>:
     186:	11 24       	eor	r1, r1
     188:	1f be       	out	0x3f, r1	; 63
     18a:	cf ef       	ldi	r28, 0xFF	; 255
     18c:	d1 e2       	ldi	r29, 0x21	; 33
     18e:	de bf       	out	0x3e, r29	; 62
     190:	cd bf       	out	0x3d, r28	; 61
     192:	00 e0       	ldi	r16, 0x00	; 0
     194:	0c bf       	out	0x3c, r16	; 60

00000196 <__do_copy_data>:
     196:	12 e0       	ldi	r17, 0x02	; 2
     198:	a0 e0       	ldi	r26, 0x00	; 0
     19a:	b2 e0       	ldi	r27, 0x02	; 2
     19c:	e6 eb       	ldi	r30, 0xB6	; 182
     19e:	f0 e1       	ldi	r31, 0x10	; 16
     1a0:	00 e0       	ldi	r16, 0x00	; 0
     1a2:	0b bf       	out	0x3b, r16	; 59
     1a4:	02 c0       	rjmp	.+4      	; 0x1aa <__do_copy_data+0x14>
     1a6:	07 90       	elpm	r0, Z+
     1a8:	0d 92       	st	X+, r0
     1aa:	a2 30       	cpi	r26, 0x02	; 2
     1ac:	b1 07       	cpc	r27, r17
     1ae:	d9 f7       	brne	.-10     	; 0x1a6 <__do_copy_data+0x10>

000001b0 <__do_clear_bss>:
     1b0:	22 e0       	ldi	r18, 0x02	; 2
     1b2:	a2 e0       	ldi	r26, 0x02	; 2
     1b4:	b2 e0       	ldi	r27, 0x02	; 2
     1b6:	01 c0       	rjmp	.+2      	; 0x1ba <.do_clear_bss_start>

000001b8 <.do_clear_bss_loop>:
     1b8:	1d 92       	st	X+, r1

000001ba <.do_clear_bss_start>:
     1ba:	af 30       	cpi	r26, 0x0F	; 15
     1bc:	b2 07       	cpc	r27, r18
     1be:	e1 f7       	brne	.-8      	; 0x1b8 <.do_clear_bss_loop>
     1c0:	9b d3       	rcall	.+1846   	; 0x8f8 <main>
     1c2:	77 c7       	rjmp	.+3822   	; 0x10b2 <_exit>

000001c4 <__bad_interrupt>:
     1c4:	1d cf       	rjmp	.-454    	; 0x0 <__vectors>

000001c6 <_set_channel>:

#include "adc.h"
#include <avr/io.h>

void _set_channel(AdcCh_t ch) {
	ADMUX &= ~0x1F;
     1c6:	ec e7       	ldi	r30, 0x7C	; 124
     1c8:	f0 e0       	ldi	r31, 0x00	; 0
     1ca:	90 81       	ld	r25, Z
     1cc:	90 7e       	andi	r25, 0xE0	; 224
     1ce:	90 83       	st	Z, r25
	ADMUX |= ((int)ch) & 0x1F;
     1d0:	90 81       	ld	r25, Z
     1d2:	28 2f       	mov	r18, r24
     1d4:	2f 71       	andi	r18, 0x1F	; 31
     1d6:	92 2b       	or	r25, r18
     1d8:	90 83       	st	Z, r25

	ADCSRB &= ~(1 << MUX5);
     1da:	eb e7       	ldi	r30, 0x7B	; 123
     1dc:	f0 e0       	ldi	r31, 0x00	; 0
     1de:	90 81       	ld	r25, Z
     1e0:	97 7f       	andi	r25, 0xF7	; 247
     1e2:	90 83       	st	Z, r25
	ADCSRB |= ((int)ch >> 5) << MUX5;
     1e4:	90 81       	ld	r25, Z
     1e6:	82 95       	swap	r24
     1e8:	86 95       	lsr	r24
     1ea:	87 70       	andi	r24, 0x07	; 7
     1ec:	88 0f       	add	r24, r24
     1ee:	88 0f       	add	r24, r24
     1f0:	88 0f       	add	r24, r24
     1f2:	89 2b       	or	r24, r25
     1f4:	80 83       	st	Z, r24
     1f6:	08 95       	ret

000001f8 <adc_init>:
}

void adc_init() {
	ADMUX = (1 << REFS0);
     1f8:	80 e4       	ldi	r24, 0x40	; 64
     1fa:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
	ADCSRB = (1 << MUX5);
     1fe:	88 e0       	ldi	r24, 0x08	; 8
     200:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
	//_set_channel(0);

	ADCSRA = (1 << ADEN);
     204:	80 e8       	ldi	r24, 0x80	; 128
     206:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
     20a:	08 95       	ret

0000020c <adc_init_channel>:
}

void adc_init_channel(AdcCh_t channel) {
     20c:	cf 93       	push	r28
     20e:	df 93       	push	r29
     210:	1f 92       	push	r1
     212:	1f 92       	push	r1
     214:	cd b7       	in	r28, 0x3d	; 61
     216:	de b7       	in	r29, 0x3e	; 62
	volatile int channel_number = (int)channel & 0b000111;
     218:	28 2f       	mov	r18, r24
     21a:	27 70       	andi	r18, 0x07	; 7
     21c:	30 e0       	ldi	r19, 0x00	; 0
     21e:	3a 83       	std	Y+2, r19	; 0x02
     220:	29 83       	std	Y+1, r18	; 0x01
	channel_number |= (channel >> 2) & 0b001000;
     222:	29 81       	ldd	r18, Y+1	; 0x01
     224:	3a 81       	ldd	r19, Y+2	; 0x02
     226:	86 95       	lsr	r24
     228:	86 95       	lsr	r24
     22a:	88 70       	andi	r24, 0x08	; 8
     22c:	a9 01       	movw	r20, r18
     22e:	48 2b       	or	r20, r24
     230:	ca 01       	movw	r24, r20
     232:	9a 83       	std	Y+2, r25	; 0x02
     234:	89 83       	std	Y+1, r24	; 0x01
	
	if (channel_number < 8) {
     236:	89 81       	ldd	r24, Y+1	; 0x01
     238:	9a 81       	ldd	r25, Y+2	; 0x02
     23a:	08 97       	sbiw	r24, 0x08	; 8
     23c:	ec f4       	brge	.+58     	; 0x278 <adc_init_channel+0x6c>
		DIDR0 |= (1 << channel_number);
     23e:	29 81       	ldd	r18, Y+1	; 0x01
     240:	3a 81       	ldd	r19, Y+2	; 0x02
     242:	ee e7       	ldi	r30, 0x7E	; 126
     244:	f0 e0       	ldi	r31, 0x00	; 0
     246:	40 81       	ld	r20, Z
     248:	81 e0       	ldi	r24, 0x01	; 1
     24a:	90 e0       	ldi	r25, 0x00	; 0
     24c:	bc 01       	movw	r22, r24
     24e:	02 c0       	rjmp	.+4      	; 0x254 <adc_init_channel+0x48>
     250:	66 0f       	add	r22, r22
     252:	77 1f       	adc	r23, r23
     254:	2a 95       	dec	r18
     256:	e2 f7       	brpl	.-8      	; 0x250 <adc_init_channel+0x44>
     258:	9b 01       	movw	r18, r22
     25a:	24 2b       	or	r18, r20
     25c:	20 83       	st	Z, r18
		DDRF &= ~(1 << channel_number);
     25e:	49 81       	ldd	r20, Y+1	; 0x01
     260:	5a 81       	ldd	r21, Y+2	; 0x02
     262:	20 b3       	in	r18, 0x10	; 16
     264:	02 c0       	rjmp	.+4      	; 0x26a <adc_init_channel+0x5e>
     266:	88 0f       	add	r24, r24
     268:	99 1f       	adc	r25, r25
     26a:	4a 95       	dec	r20
     26c:	e2 f7       	brpl	.-8      	; 0x266 <adc_init_channel+0x5a>
     26e:	80 95       	com	r24
     270:	90 95       	com	r25
     272:	82 23       	and	r24, r18
     274:	80 bb       	out	0x10, r24	; 16
     276:	21 c0       	rjmp	.+66     	; 0x2ba <adc_init_channel+0xae>
	} else {
		DIDR2 |= (1 << (channel_number - 8));
     278:	49 81       	ldd	r20, Y+1	; 0x01
     27a:	5a 81       	ldd	r21, Y+2	; 0x02
     27c:	ed e7       	ldi	r30, 0x7D	; 125
     27e:	f0 e0       	ldi	r31, 0x00	; 0
     280:	60 81       	ld	r22, Z
     282:	48 50       	subi	r20, 0x08	; 8
     284:	51 09       	sbc	r21, r1
     286:	81 e0       	ldi	r24, 0x01	; 1
     288:	90 e0       	ldi	r25, 0x00	; 0
     28a:	9c 01       	movw	r18, r24
     28c:	02 c0       	rjmp	.+4      	; 0x292 <adc_init_channel+0x86>
     28e:	22 0f       	add	r18, r18
     290:	33 1f       	adc	r19, r19
     292:	4a 95       	dec	r20
     294:	e2 f7       	brpl	.-8      	; 0x28e <adc_init_channel+0x82>
     296:	26 2b       	or	r18, r22
     298:	20 83       	st	Z, r18
		DDRK &= ~(1 << (channel_number - 8));
     29a:	29 81       	ldd	r18, Y+1	; 0x01
     29c:	3a 81       	ldd	r19, Y+2	; 0x02
     29e:	e7 e0       	ldi	r30, 0x07	; 7
     2a0:	f1 e0       	ldi	r31, 0x01	; 1
     2a2:	40 81       	ld	r20, Z
     2a4:	28 50       	subi	r18, 0x08	; 8
     2a6:	31 09       	sbc	r19, r1
     2a8:	02 c0       	rjmp	.+4      	; 0x2ae <adc_init_channel+0xa2>
     2aa:	88 0f       	add	r24, r24
     2ac:	99 1f       	adc	r25, r25
     2ae:	2a 95       	dec	r18
     2b0:	e2 f7       	brpl	.-8      	; 0x2aa <adc_init_channel+0x9e>
     2b2:	80 95       	com	r24
     2b4:	90 95       	com	r25
     2b6:	84 23       	and	r24, r20
     2b8:	80 83       	st	Z, r24
	}
}
     2ba:	0f 90       	pop	r0
     2bc:	0f 90       	pop	r0
     2be:	df 91       	pop	r29
     2c0:	cf 91       	pop	r28
     2c2:	08 95       	ret

000002c4 <adc_read>:

uint16_t adc_read(AdcCh_t channel) {
     2c4:	80 df       	rcall	.-256    	; 0x1c6 <_set_channel>
     2c6:	ea e7       	ldi	r30, 0x7A	; 122
     2c8:	f0 e0       	ldi	r31, 0x00	; 0
     2ca:	80 81       	ld	r24, Z
     2cc:	80 64       	ori	r24, 0x40	; 64
     2ce:	80 83       	st	Z, r24
     2d0:	80 81       	ld	r24, Z
     2d2:	84 ff       	sbrs	r24, 4
     2d4:	fd cf       	rjmp	.-6      	; 0x2d0 <adc_read+0xc>
     2d6:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
     2da:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
     2de:	08 95       	ret

000002e0 <can_init>:
     2e0:	16 d2       	rcall	.+1068   	; 0x70e <mcp_reset>
     2e2:	60 e8       	ldi	r22, 0x80	; 128
     2e4:	8f e0       	ldi	r24, 0x0F	; 15
     2e6:	3c d2       	rcall	.+1144   	; 0x760 <mcp_write>
     2e8:	60 e2       	ldi	r22, 0x20	; 32
     2ea:	8a e2       	ldi	r24, 0x2A	; 42
     2ec:	39 d2       	rcall	.+1138   	; 0x760 <mcp_write>
     2ee:	62 e9       	ldi	r22, 0x92	; 146
     2f0:	89 e2       	ldi	r24, 0x29	; 41
     2f2:	36 d2       	rcall	.+1132   	; 0x760 <mcp_write>
     2f4:	62 ec       	ldi	r22, 0xC2	; 194
     2f6:	88 e2       	ldi	r24, 0x28	; 40
     2f8:	33 d2       	rcall	.+1126   	; 0x760 <mcp_write>
     2fa:	60 e0       	ldi	r22, 0x00	; 0
     2fc:	8b e2       	ldi	r24, 0x2B	; 43
     2fe:	30 d2       	rcall	.+1120   	; 0x760 <mcp_write>
     300:	60 e0       	ldi	r22, 0x00	; 0
     302:	8c e2       	ldi	r24, 0x2C	; 44
     304:	2d d2       	rcall	.+1114   	; 0x760 <mcp_write>
     306:	60 e0       	ldi	r22, 0x00	; 0
     308:	8d e2       	ldi	r24, 0x2D	; 45
     30a:	2a d2       	rcall	.+1108   	; 0x760 <mcp_write>
     30c:	60 e0       	ldi	r22, 0x00	; 0
     30e:	8c e0       	ldi	r24, 0x0C	; 12
     310:	27 d2       	rcall	.+1102   	; 0x760 <mcp_write>
     312:	60 e0       	ldi	r22, 0x00	; 0
     314:	8d e0       	ldi	r24, 0x0D	; 13
     316:	24 d2       	rcall	.+1096   	; 0x760 <mcp_write>
     318:	60 e0       	ldi	r22, 0x00	; 0
     31a:	80 e6       	ldi	r24, 0x60	; 96
     31c:	21 d2       	rcall	.+1090   	; 0x760 <mcp_write>
     31e:	60 e0       	ldi	r22, 0x00	; 0
     320:	80 e7       	ldi	r24, 0x70	; 112
     322:	1e d2       	rcall	.+1084   	; 0x760 <mcp_write>
     324:	60 e0       	ldi	r22, 0x00	; 0
     326:	80 e2       	ldi	r24, 0x20	; 32
     328:	1b d2       	rcall	.+1078   	; 0x760 <mcp_write>
     32a:	60 e0       	ldi	r22, 0x00	; 0
     32c:	81 e2       	ldi	r24, 0x21	; 33
     32e:	18 d2       	rcall	.+1072   	; 0x760 <mcp_write>
     330:	60 e0       	ldi	r22, 0x00	; 0
     332:	82 e2       	ldi	r24, 0x22	; 34
     334:	15 d2       	rcall	.+1066   	; 0x760 <mcp_write>
     336:	60 e0       	ldi	r22, 0x00	; 0
     338:	83 e2       	ldi	r24, 0x23	; 35
     33a:	12 d2       	rcall	.+1060   	; 0x760 <mcp_write>
     33c:	64 e0       	ldi	r22, 0x04	; 4
     33e:	8f e0       	ldi	r24, 0x0F	; 15
     340:	0f c2       	rjmp	.+1054   	; 0x760 <mcp_write>
     342:	08 95       	ret

00000344 <can_tx_message>:
     344:	cf 92       	push	r12
     346:	df 92       	push	r13
     348:	ef 92       	push	r14
     34a:	ff 92       	push	r15
     34c:	1f 93       	push	r17
     34e:	cf 93       	push	r28
     350:	df 93       	push	r29
     352:	6c 01       	movw	r12, r24
     354:	63 e0       	ldi	r22, 0x03	; 3
     356:	80 e3       	ldi	r24, 0x30	; 48
     358:	03 d2       	rcall	.+1030   	; 0x760 <mcp_write>
     35a:	f6 01       	movw	r30, r12
     35c:	60 81       	ld	r22, Z
     35e:	71 81       	ldd	r23, Z+1	; 0x01
     360:	76 95       	lsr	r23
     362:	67 95       	ror	r22
     364:	76 95       	lsr	r23
     366:	67 95       	ror	r22
     368:	76 95       	lsr	r23
     36a:	67 95       	ror	r22
     36c:	81 e3       	ldi	r24, 0x31	; 49
     36e:	f8 d1       	rcall	.+1008   	; 0x760 <mcp_write>
     370:	f6 01       	movw	r30, r12
     372:	60 81       	ld	r22, Z
     374:	62 95       	swap	r22
     376:	66 0f       	add	r22, r22
     378:	60 7e       	andi	r22, 0xE0	; 224
     37a:	82 e3       	ldi	r24, 0x32	; 50
     37c:	f1 d1       	rcall	.+994    	; 0x760 <mcp_write>
     37e:	f6 01       	movw	r30, r12
     380:	62 81       	ldd	r22, Z+2	; 0x02
     382:	85 e3       	ldi	r24, 0x35	; 53
     384:	ed d1       	rcall	.+986    	; 0x760 <mcp_write>
     386:	f6 01       	movw	r30, r12
     388:	82 81       	ldd	r24, Z+2	; 0x02
     38a:	88 23       	and	r24, r24
     38c:	a1 f0       	breq	.+40     	; 0x3b6 <can_tx_message+0x72>
     38e:	76 01       	movw	r14, r12
     390:	f3 e0       	ldi	r31, 0x03	; 3
     392:	ef 0e       	add	r14, r31
     394:	f1 1c       	adc	r15, r1
     396:	16 e3       	ldi	r17, 0x36	; 54
     398:	c0 e0       	ldi	r28, 0x00	; 0
     39a:	d0 e0       	ldi	r29, 0x00	; 0
     39c:	f7 01       	movw	r30, r14
     39e:	61 91       	ld	r22, Z+
     3a0:	7f 01       	movw	r14, r30
     3a2:	81 2f       	mov	r24, r17
     3a4:	dd d1       	rcall	.+954    	; 0x760 <mcp_write>
     3a6:	21 96       	adiw	r28, 0x01	; 1
     3a8:	1f 5f       	subi	r17, 0xFF	; 255
     3aa:	f6 01       	movw	r30, r12
     3ac:	82 81       	ldd	r24, Z+2	; 0x02
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	c8 17       	cp	r28, r24
     3b2:	d9 07       	cpc	r29, r25
     3b4:	9c f3       	brlt	.-26     	; 0x39c <can_tx_message+0x58>
     3b6:	40 e0       	ldi	r20, 0x00	; 0
     3b8:	60 e0       	ldi	r22, 0x00	; 0
     3ba:	81 e0       	ldi	r24, 0x01	; 1
     3bc:	00 d2       	rcall	.+1024   	; 0x7be <mcp_request_to_send>
     3be:	df 91       	pop	r29
     3c0:	cf 91       	pop	r28
     3c2:	1f 91       	pop	r17
     3c4:	ff 90       	pop	r15
     3c6:	ef 90       	pop	r14
     3c8:	df 90       	pop	r13
     3ca:	cf 90       	pop	r12
     3cc:	08 95       	ret

000003ce <can_rx_message>:
     3ce:	cf 92       	push	r12
     3d0:	df 92       	push	r13
     3d2:	ef 92       	push	r14
     3d4:	ff 92       	push	r15
     3d6:	1f 93       	push	r17
     3d8:	cf 93       	push	r28
     3da:	df 93       	push	r29
     3dc:	7c 01       	movw	r14, r24
     3de:	09 d2       	rcall	.+1042   	; 0x7f2 <mcp_read_status>
     3e0:	80 ff       	sbrs	r24, 0
     3e2:	32 c0       	rjmp	.+100    	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
     3e4:	81 e6       	ldi	r24, 0x61	; 97
     3e6:	a5 d1       	rcall	.+842    	; 0x732 <mcp_read>
     3e8:	f7 01       	movw	r30, r14
     3ea:	10 82       	st	Z, r1
     3ec:	81 83       	std	Z+1, r24	; 0x01
     3ee:	82 e6       	ldi	r24, 0x62	; 98
     3f0:	a0 d1       	rcall	.+832    	; 0x732 <mcp_read>
     3f2:	f7 01       	movw	r30, r14
     3f4:	20 81       	ld	r18, Z
     3f6:	31 81       	ldd	r19, Z+1	; 0x01
     3f8:	28 2b       	or	r18, r24
     3fa:	31 83       	std	Z+1, r19	; 0x01
     3fc:	20 83       	st	Z, r18
     3fe:	85 e6       	ldi	r24, 0x65	; 101
     400:	98 d1       	rcall	.+816    	; 0x732 <mcp_read>
     402:	f7 01       	movw	r30, r14
     404:	82 83       	std	Z+2, r24	; 0x02
     406:	89 30       	cpi	r24, 0x09	; 9
     408:	18 f0       	brcs	.+6      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
     40a:	88 e0       	ldi	r24, 0x08	; 8
     40c:	82 83       	std	Z+2, r24	; 0x02
     40e:	02 c0       	rjmp	.+4      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
     410:	88 23       	and	r24, r24
     412:	a1 f0       	breq	.+40     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
     414:	67 01       	movw	r12, r14
     416:	f3 e0       	ldi	r31, 0x03	; 3
     418:	cf 0e       	add	r12, r31
     41a:	d1 1c       	adc	r13, r1
     41c:	16 e6       	ldi	r17, 0x66	; 102
     41e:	c0 e0       	ldi	r28, 0x00	; 0
     420:	d0 e0       	ldi	r29, 0x00	; 0
     422:	81 2f       	mov	r24, r17
     424:	86 d1       	rcall	.+780    	; 0x732 <mcp_read>
     426:	f6 01       	movw	r30, r12
     428:	81 93       	st	Z+, r24
     42a:	6f 01       	movw	r12, r30
     42c:	21 96       	adiw	r28, 0x01	; 1
     42e:	1f 5f       	subi	r17, 0xFF	; 255
     430:	f7 01       	movw	r30, r14
     432:	82 81       	ldd	r24, Z+2	; 0x02
     434:	90 e0       	ldi	r25, 0x00	; 0
     436:	c8 17       	cp	r28, r24
     438:	d9 07       	cpc	r29, r25
     43a:	9c f3       	brlt	.-26     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
     43c:	40 e0       	ldi	r20, 0x00	; 0
     43e:	61 e0       	ldi	r22, 0x01	; 1
     440:	8c e2       	ldi	r24, 0x2C	; 44
     442:	a4 d1       	rcall	.+840    	; 0x78c <mcp_modify_bit>
     444:	81 e0       	ldi	r24, 0x01	; 1
     446:	01 c0       	rjmp	.+2      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     448:	80 e0       	ldi	r24, 0x00	; 0
     44a:	df 91       	pop	r29
     44c:	cf 91       	pop	r28
     44e:	1f 91       	pop	r17
     450:	ff 90       	pop	r15
     452:	ef 90       	pop	r14
     454:	df 90       	pop	r13
     456:	cf 90       	pop	r12
     458:	08 95       	ret

0000045a <motor_disable>:
	motor_disable();
}


void motor_disable() {
	MOTOR_PORT &= ~(1 << EN_PIN);
     45a:	e2 e0       	ldi	r30, 0x02	; 2
     45c:	f1 e0       	ldi	r31, 0x01	; 1
     45e:	80 81       	ld	r24, Z
     460:	8f 7e       	andi	r24, 0xEF	; 239
     462:	80 83       	st	Z, r24
     464:	08 95       	ret

00000466 <motor_init>:
#define ENCODER_NOE_PIN 5
#define ENCODER_SEL_PIN 3
#define ENCODER_RST_PIN 6


void motor_init() {
     466:	cf 93       	push	r28
     468:	df 93       	push	r29
	ENCODER_DDR |= (1 << ENCODER_NOE_PIN);
     46a:	c1 e0       	ldi	r28, 0x01	; 1
     46c:	d1 e0       	ldi	r29, 0x01	; 1
     46e:	88 81       	ld	r24, Y
     470:	80 62       	ori	r24, 0x20	; 32
     472:	88 83       	st	Y, r24
	ENCODER_DDR |= (1 << ENCODER_SEL_PIN);
     474:	88 81       	ld	r24, Y
     476:	88 60       	ori	r24, 0x08	; 8
     478:	88 83       	st	Y, r24
	ENCODER_DDR |= (1 << ENCODER_RST_PIN);
     47a:	88 81       	ld	r24, Y
     47c:	80 64       	ori	r24, 0x40	; 64
     47e:	88 83       	st	Y, r24
	ENCODER_PORT |= (1 << ENCODER_NOE_PIN);
     480:	e2 e0       	ldi	r30, 0x02	; 2
     482:	f1 e0       	ldi	r31, 0x01	; 1
     484:	80 81       	ld	r24, Z
     486:	80 62       	ori	r24, 0x20	; 32
     488:	80 83       	st	Z, r24
	ENCODER_PORT &= ~(1 << ENCODER_SEL_PIN);
     48a:	80 81       	ld	r24, Z
     48c:	87 7f       	andi	r24, 0xF7	; 247
     48e:	80 83       	st	Z, r24
	ENCODER_PORT |= (1 << ENCODER_RST_PIN);
     490:	80 81       	ld	r24, Z
     492:	80 64       	ori	r24, 0x40	; 64

	TWI_Master_Initialise();
     494:	80 83       	st	Z, r24
	
	MOTOR_DDR |= (1 << EN_PIN);
     496:	7e d0       	rcall	.+252    	; 0x594 <TWI_Master_Initialise>
     498:	88 81       	ld	r24, Y
     49a:	80 61       	ori	r24, 0x10	; 16
	MOTOR_DDR |= (1 << DIR_PIN);
     49c:	88 83       	st	Y, r24
     49e:	88 81       	ld	r24, Y

	motor_disable();
     4a0:	82 60       	ori	r24, 0x02	; 2
     4a2:	88 83       	st	Y, r24
}
     4a4:	da df       	rcall	.-76     	; 0x45a <motor_disable>
     4a6:	df 91       	pop	r29
     4a8:	cf 91       	pop	r28
     4aa:	08 95       	ret

000004ac <motor_enable>:
void motor_disable() {
	MOTOR_PORT &= ~(1 << EN_PIN);
}

void motor_enable() {
	MOTOR_PORT |= (1 << EN_PIN);
     4ac:	e2 e0       	ldi	r30, 0x02	; 2
     4ae:	f1 e0       	ldi	r31, 0x01	; 1
     4b0:	80 81       	ld	r24, Z
     4b2:	80 61       	ori	r24, 0x10	; 16
     4b4:	80 83       	st	Z, r24
     4b6:	08 95       	ret

000004b8 <motor_set>:
}

void motor_set(uint8_t speed, motor_direction_t direction) {
     4b8:	cf 93       	push	r28
     4ba:	df 93       	push	r29
     4bc:	cd b7       	in	r28, 0x3d	; 61
     4be:	de b7       	in	r29, 0x3e	; 62
     4c0:	29 97       	sbiw	r28, 0x09	; 9
     4c2:	0f b6       	in	r0, 0x3f	; 63
     4c4:	f8 94       	cli
     4c6:	de bf       	out	0x3e, r29	; 62
     4c8:	0f be       	out	0x3f, r0	; 63
     4ca:	cd bf       	out	0x3d, r28	; 61
	// Set direction pin
	if (direction == DIR_RIGHT) {
     4cc:	61 30       	cpi	r22, 0x01	; 1
     4ce:	31 f4       	brne	.+12     	; 0x4dc <motor_set+0x24>
		MOTOR_PORT |= (1 << DIR_PIN);
     4d0:	e2 e0       	ldi	r30, 0x02	; 2
     4d2:	f1 e0       	ldi	r31, 0x01	; 1
     4d4:	90 81       	ld	r25, Z
     4d6:	92 60       	ori	r25, 0x02	; 2
     4d8:	90 83       	st	Z, r25
     4da:	05 c0       	rjmp	.+10     	; 0x4e6 <motor_set+0x2e>
	} else {
		MOTOR_PORT &= ~(1 << DIR_PIN);
     4dc:	e2 e0       	ldi	r30, 0x02	; 2
     4de:	f1 e0       	ldi	r31, 0x01	; 1
     4e0:	90 81       	ld	r25, Z
     4e2:	9d 7f       	andi	r25, 0xFD	; 253
     4e4:	90 83       	st	Z, r25
	}

	// Write speed
	uint8_t buffer[] = {0x50, 0x00, speed, 0x01, 0x00, 0x02, 0x00, 0x03, 0x00};
     4e6:	90 e5       	ldi	r25, 0x50	; 80
     4e8:	99 83       	std	Y+1, r25	; 0x01
     4ea:	1a 82       	std	Y+2, r1	; 0x02
     4ec:	8b 83       	std	Y+3, r24	; 0x03
     4ee:	81 e0       	ldi	r24, 0x01	; 1
     4f0:	8c 83       	std	Y+4, r24	; 0x04
     4f2:	1d 82       	std	Y+5, r1	; 0x05
     4f4:	82 e0       	ldi	r24, 0x02	; 2
     4f6:	8e 83       	std	Y+6, r24	; 0x06
     4f8:	1f 82       	std	Y+7, r1	; 0x07
     4fa:	83 e0       	ldi	r24, 0x03	; 3
     4fc:	88 87       	std	Y+8, r24	; 0x08
     4fe:	19 86       	std	Y+9, r1	; 0x09
	TWI_Start_Transceiver_With_Data(buffer, 9);
     500:	69 e0       	ldi	r22, 0x09	; 9
     502:	ce 01       	movw	r24, r28
     504:	01 96       	adiw	r24, 0x01	; 1
     506:	50 d0       	rcall	.+160    	; 0x5a8 <TWI_Start_Transceiver_With_Data>
}
     508:	29 96       	adiw	r28, 0x09	; 9
     50a:	0f b6       	in	r0, 0x3f	; 63
     50c:	f8 94       	cli
     50e:	de bf       	out	0x3e, r29	; 62
     510:	0f be       	out	0x3f, r0	; 63
     512:	cd bf       	out	0x3d, r28	; 61
     514:	df 91       	pop	r29
     516:	cf 91       	pop	r28
     518:	08 95       	ret

0000051a <motor_reset_encoder>:

void motor_reset_encoder() {
	// Pulse !reset pin
	ENCODER_PORT &= ~(1 << ENCODER_RST_PIN);
     51a:	e2 e0       	ldi	r30, 0x02	; 2
     51c:	f1 e0       	ldi	r31, 0x01	; 1
     51e:	80 81       	ld	r24, Z
     520:	8f 7b       	andi	r24, 0xBF	; 191
     522:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     524:	85 e3       	ldi	r24, 0x35	; 53
     526:	8a 95       	dec	r24
     528:	f1 f7       	brne	.-4      	; 0x526 <motor_reset_encoder+0xc>
     52a:	00 00       	nop
	_delay_us(10);
	ENCODER_PORT |= (1 << ENCODER_RST_PIN);
     52c:	80 81       	ld	r24, Z
     52e:	80 64       	ori	r24, 0x40	; 64
     530:	80 83       	st	Z, r24
     532:	08 95       	ret

00000534 <motor_read_encoder>:
}

int16_t motor_read_encoder() {
	// Enable output
	ENCODER_PORT &= ~(1 << ENCODER_NOE_PIN);
     534:	e2 e0       	ldi	r30, 0x02	; 2
     536:	f1 e0       	ldi	r31, 0x01	; 1
     538:	80 81       	ld	r24, Z
     53a:	8f 7d       	andi	r24, 0xDF	; 223
     53c:	80 83       	st	Z, r24
	
	// Select MSB
	ENCODER_PORT &= ~(1 << ENCODER_SEL_PIN);
     53e:	80 81       	ld	r24, Z
     540:	87 7f       	andi	r24, 0xF7	; 247
     542:	80 83       	st	Z, r24
     544:	8a e6       	ldi	r24, 0x6A	; 106
     546:	8a 95       	dec	r24
     548:	f1 f7       	brne	.-4      	; 0x546 <motor_read_encoder+0x12>
     54a:	00 c0       	rjmp	.+0      	; 0x54c <motor_read_encoder+0x18>

	_delay_us(20);

	int8_t msb = ENCODER_DATA;
     54c:	a6 e0       	ldi	r26, 0x06	; 6
     54e:	b1 e0       	ldi	r27, 0x01	; 1
     550:	8c 91       	ld	r24, X
	
	// Select LSB
	ENCODER_PORT |= (1 << ENCODER_SEL_PIN);
     552:	90 81       	ld	r25, Z
     554:	98 60       	ori	r25, 0x08	; 8
     556:	90 83       	st	Z, r25
     558:	9a e6       	ldi	r25, 0x6A	; 106
     55a:	9a 95       	dec	r25
     55c:	f1 f7       	brne	.-4      	; 0x55a <motor_read_encoder+0x26>
     55e:	00 c0       	rjmp	.+0      	; 0x560 <motor_read_encoder+0x2c>
	
	_delay_us(20);

	uint8_t lsb = ENCODER_DATA;
     560:	2c 91       	ld	r18, X

	// Disable output
	ENCODER_PORT |= (1 << ENCODER_NOE_PIN);
     562:	90 81       	ld	r25, Z
     564:	90 62       	ori	r25, 0x20	; 32
     566:	90 83       	st	Z, r25
	
	return (msb << 8) | lsb;
     568:	08 2e       	mov	r0, r24
     56a:	00 0c       	add	r0, r0
     56c:	99 0b       	sbc	r25, r25
     56e:	98 2f       	mov	r25, r24
     570:	88 27       	eor	r24, r24
}
     572:	82 2b       	or	r24, r18
     574:	08 95       	ret

00000576 <shooter_init>:
#define SHOOTER_PORT PORTF
#define SHOOTER_PIN 1


void shooter_init() {
	SHOOTER_DDR |= (1 << SHOOTER_PIN);
     576:	81 9a       	sbi	0x10, 1	; 16
	SHOOTER_PORT &= ~(1 << SHOOTER_PIN);
     578:	89 98       	cbi	0x11, 1	; 17
     57a:	08 95       	ret

0000057c <shooter_shoot>:
}

void shooter_shoot() {
	SHOOTER_PORT |= (1 << SHOOTER_PIN);
     57c:	89 9a       	sbi	0x11, 1	; 17
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     57e:	2f ef       	ldi	r18, 0xFF	; 255
     580:	81 ee       	ldi	r24, 0xE1	; 225
     582:	94 e0       	ldi	r25, 0x04	; 4
     584:	21 50       	subi	r18, 0x01	; 1
     586:	80 40       	sbci	r24, 0x00	; 0
     588:	90 40       	sbci	r25, 0x00	; 0
     58a:	e1 f7       	brne	.-8      	; 0x584 <shooter_shoot+0x8>
     58c:	00 c0       	rjmp	.+0      	; 0x58e <shooter_shoot+0x12>
     58e:	00 00       	nop
	_delay_ms(SHOOTER_PULSE_DURATION_MS);
	SHOOTER_PORT &= ~(1 << SHOOTER_PIN);
     590:	89 98       	cbi	0x11, 1	; 17
     592:	08 95       	ret

00000594 <TWI_Master_Initialise>:
    {
      msg[ i ] = TWI_buf[ i ];
    }
  }
  return( TWI_statusReg.lastTransOK );                                   
}
     594:	8c e0       	ldi	r24, 0x0C	; 12
     596:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
     59a:	8f ef       	ldi	r24, 0xFF	; 255
     59c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     5a0:	84 e0       	ldi	r24, 0x04	; 4
     5a2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     5a6:	08 95       	ret

000005a8 <TWI_Start_Transceiver_With_Data>:
     5a8:	cf 93       	push	r28
     5aa:	df 93       	push	r29
     5ac:	ec 01       	movw	r28, r24
     5ae:	ec eb       	ldi	r30, 0xBC	; 188
     5b0:	f0 e0       	ldi	r31, 0x00	; 0
     5b2:	90 81       	ld	r25, Z
     5b4:	90 fd       	sbrc	r25, 0
     5b6:	fd cf       	rjmp	.-6      	; 0x5b2 <TWI_Start_Transceiver_With_Data+0xa>
     5b8:	60 93 04 02 	sts	0x0204, r22	; 0x800204 <TWI_msgSize>
     5bc:	88 81       	ld	r24, Y
     5be:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <TWI_buf>
     5c2:	80 fd       	sbrc	r24, 0
     5c4:	13 c0       	rjmp	.+38     	; 0x5ec <TWI_Start_Transceiver_With_Data+0x44>
     5c6:	62 30       	cpi	r22, 0x02	; 2
     5c8:	88 f0       	brcs	.+34     	; 0x5ec <TWI_Start_Transceiver_With_Data+0x44>
     5ca:	fe 01       	movw	r30, r28
     5cc:	31 96       	adiw	r30, 0x01	; 1
     5ce:	a6 e0       	ldi	r26, 0x06	; 6
     5d0:	b2 e0       	ldi	r27, 0x02	; 2
     5d2:	62 50       	subi	r22, 0x02	; 2
     5d4:	26 2f       	mov	r18, r22
     5d6:	30 e0       	ldi	r19, 0x00	; 0
     5d8:	2e 5f       	subi	r18, 0xFE	; 254
     5da:	3f 4f       	sbci	r19, 0xFF	; 255
     5dc:	ce 01       	movw	r24, r28
     5de:	82 0f       	add	r24, r18
     5e0:	93 1f       	adc	r25, r19
     5e2:	21 91       	ld	r18, Z+
     5e4:	2d 93       	st	X+, r18
     5e6:	e8 17       	cp	r30, r24
     5e8:	f9 07       	cpc	r31, r25
     5ea:	d9 f7       	brne	.-10     	; 0x5e2 <TWI_Start_Transceiver_With_Data+0x3a>
     5ec:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <TWI_statusReg>
     5f0:	88 ef       	ldi	r24, 0xF8	; 248
     5f2:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
     5f6:	85 ea       	ldi	r24, 0xA5	; 165
     5f8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     5fc:	df 91       	pop	r29
     5fe:	cf 91       	pop	r28
     600:	08 95       	ret

00000602 <__vector_39>:
that is whenever a TWI event has occurred. This function should not be called directly from the main
application.
****************************************************************************/

ISR(TWI_vect)
{
     602:	1f 92       	push	r1
     604:	0f 92       	push	r0
     606:	0f b6       	in	r0, 0x3f	; 63
     608:	0f 92       	push	r0
     60a:	11 24       	eor	r1, r1
     60c:	0b b6       	in	r0, 0x3b	; 59
     60e:	0f 92       	push	r0
     610:	2f 93       	push	r18
     612:	3f 93       	push	r19
     614:	8f 93       	push	r24
     616:	9f 93       	push	r25
     618:	af 93       	push	r26
     61a:	bf 93       	push	r27
     61c:	ef 93       	push	r30
     61e:	ff 93       	push	r31
  static unsigned char TWI_bufPtr;
  
  switch (TWSR)
     620:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     624:	8e 2f       	mov	r24, r30
     626:	90 e0       	ldi	r25, 0x00	; 0
     628:	fc 01       	movw	r30, r24
     62a:	38 97       	sbiw	r30, 0x08	; 8
     62c:	e1 35       	cpi	r30, 0x51	; 81
     62e:	f1 05       	cpc	r31, r1
     630:	08 f0       	brcs	.+2      	; 0x634 <__vector_39+0x32>
     632:	57 c0       	rjmp	.+174    	; 0x6e2 <__vector_39+0xe0>
     634:	88 27       	eor	r24, r24
     636:	ee 58       	subi	r30, 0x8E	; 142
     638:	ff 4f       	sbci	r31, 0xFF	; 255
     63a:	8f 4f       	sbci	r24, 0xFF	; 255
     63c:	0f c5       	rjmp	.+2590   	; 0x105c <__tablejump2__>
  {
    case TWI_START:             // START has been transmitted  
    case TWI_REP_START:         // Repeated START has been transmitted
      TWI_bufPtr = 0;                                     // Set buffer pointer to the TWI Address location
     63e:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <__data_end>
    case TWI_MTX_ADR_ACK:       // SLA+W has been tramsmitted and ACK received
    case TWI_MTX_DATA_ACK:      // Data byte has been tramsmitted and ACK received
      if (TWI_bufPtr < TWI_msgSize)
     642:	e0 91 02 02 	lds	r30, 0x0202	; 0x800202 <__data_end>
     646:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <TWI_msgSize>
     64a:	e8 17       	cp	r30, r24
     64c:	70 f4       	brcc	.+28     	; 0x66a <__vector_39+0x68>
      {
        TWDR = TWI_buf[TWI_bufPtr++];
     64e:	81 e0       	ldi	r24, 0x01	; 1
     650:	8e 0f       	add	r24, r30
     652:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <__data_end>
     656:	f0 e0       	ldi	r31, 0x00	; 0
     658:	eb 5f       	subi	r30, 0xFB	; 251
     65a:	fd 4f       	sbci	r31, 0xFD	; 253
     65c:	80 81       	ld	r24, Z
     65e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
        TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     662:	85 e8       	ldi	r24, 0x85	; 133
     664:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     668:	43 c0       	rjmp	.+134    	; 0x6f0 <__vector_39+0xee>
               (1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interupt and clear the flag to send byte
               (0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           //
               (0<<TWWC);                                 //  
      }else                    // Send STOP after last byte
      {
        TWI_statusReg.lastTransOK = TRUE;                 // Set status bits to completed successfully. 
     66a:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <TWI_statusReg>
     66e:	81 60       	ori	r24, 0x01	; 1
     670:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <TWI_statusReg>
        TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     674:	84 e9       	ldi	r24, 0x94	; 148
     676:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     67a:	3a c0       	rjmp	.+116    	; 0x6f0 <__vector_39+0xee>
               (0<<TWEA)|(0<<TWSTA)|(1<<TWSTO)|           // Initiate a STOP condition.
               (0<<TWWC);                                 //
      }
      break;
    case TWI_MRX_DATA_ACK:      // Data byte has been received and ACK tramsmitted
      TWI_buf[TWI_bufPtr++] = TWDR;
     67c:	e0 91 02 02 	lds	r30, 0x0202	; 0x800202 <__data_end>
     680:	81 e0       	ldi	r24, 0x01	; 1
     682:	8e 0f       	add	r24, r30
     684:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <__data_end>
     688:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     68c:	f0 e0       	ldi	r31, 0x00	; 0
     68e:	eb 5f       	subi	r30, 0xFB	; 251
     690:	fd 4f       	sbci	r31, 0xFD	; 253
     692:	80 83       	st	Z, r24
    case TWI_MRX_ADR_ACK:       // SLA+R has been tramsmitted and ACK received
      if (TWI_bufPtr < (TWI_msgSize-1) )                  // Detect the last byte to NACK it.
     694:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__data_end>
     698:	30 e0       	ldi	r19, 0x00	; 0
     69a:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <TWI_msgSize>
     69e:	90 e0       	ldi	r25, 0x00	; 0
     6a0:	01 97       	sbiw	r24, 0x01	; 1
     6a2:	28 17       	cp	r18, r24
     6a4:	39 07       	cpc	r19, r25
     6a6:	24 f4       	brge	.+8      	; 0x6b0 <__vector_39+0xae>
      {
        TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     6a8:	85 ec       	ldi	r24, 0xC5	; 197
     6aa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     6ae:	20 c0       	rjmp	.+64     	; 0x6f0 <__vector_39+0xee>
               (1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interupt and clear the flag to read next byte
               (1<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // Send ACK after reception
               (0<<TWWC);                                 //  
      }else                    // Send NACK after next reception
      {
        TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     6b0:	85 e8       	ldi	r24, 0x85	; 133
     6b2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     6b6:	1c c0       	rjmp	.+56     	; 0x6f0 <__vector_39+0xee>
               (0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // Send NACK after reception
               (0<<TWWC);                                 // 
      }    
      break; 
    case TWI_MRX_DATA_NACK:     // Data byte has been received and NACK tramsmitted
      TWI_buf[TWI_bufPtr] = TWDR;
     6b8:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     6bc:	e0 91 02 02 	lds	r30, 0x0202	; 0x800202 <__data_end>
     6c0:	f0 e0       	ldi	r31, 0x00	; 0
     6c2:	eb 5f       	subi	r30, 0xFB	; 251
     6c4:	fd 4f       	sbci	r31, 0xFD	; 253
     6c6:	80 83       	st	Z, r24
      TWI_statusReg.lastTransOK = TRUE;                 // Set status bits to completed successfully. 
     6c8:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <TWI_statusReg>
     6cc:	81 60       	ori	r24, 0x01	; 1
     6ce:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <TWI_statusReg>
      TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     6d2:	84 e9       	ldi	r24, 0x94	; 148
     6d4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
             (0<<TWIE)|(1<<TWINT)|                      // Disable TWI Interrupt and clear the flag
             (0<<TWEA)|(0<<TWSTA)|(1<<TWSTO)|           // Initiate a STOP condition.
             (0<<TWWC);                                 //
      break;      
     6d8:	0b c0       	rjmp	.+22     	; 0x6f0 <__vector_39+0xee>
    case TWI_ARB_LOST:          // Arbitration lost
      TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     6da:	85 ea       	ldi	r24, 0xA5	; 165
     6dc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
             (1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interupt and clear the flag
             (0<<TWEA)|(1<<TWSTA)|(0<<TWSTO)|           // Initiate a (RE)START condition.
             (0<<TWWC);                                 //
      break;
     6e0:	07 c0       	rjmp	.+14     	; 0x6f0 <__vector_39+0xee>
    case TWI_MTX_ADR_NACK:      // SLA+W has been tramsmitted and NACK received
    case TWI_MRX_ADR_NACK:      // SLA+R has been tramsmitted and NACK received    
    case TWI_MTX_DATA_NACK:     // Data byte has been tramsmitted and NACK received
    case TWI_BUS_ERROR:         // Bus error due to an illegal START or STOP condition
    default:     
      TWI_state = TWSR;                                 // Store TWSR and automatically sets clears noErrors bit.
     6e2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     6e6:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
                                                        // Reset TWI Interface
      TWCR = (1<<TWEN)|                                 // Enable TWI-interface and release TWI pins
     6ea:	84 e0       	ldi	r24, 0x04	; 4
     6ec:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
             (0<<TWIE)|(0<<TWINT)|                      // Disable Interupt
             (0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // No Signal requests
             (0<<TWWC);                                 //
  }
}
     6f0:	ff 91       	pop	r31
     6f2:	ef 91       	pop	r30
     6f4:	bf 91       	pop	r27
     6f6:	af 91       	pop	r26
     6f8:	9f 91       	pop	r25
     6fa:	8f 91       	pop	r24
     6fc:	3f 91       	pop	r19
     6fe:	2f 91       	pop	r18
     700:	0f 90       	pop	r0
     702:	0b be       	out	0x3b, r0	; 59
     704:	0f 90       	pop	r0
     706:	0f be       	out	0x3f, r0	; 63
     708:	0f 90       	pop	r0
     70a:	1f 90       	pop	r1
     70c:	18 95       	reti

0000070e <mcp_reset>:
	MCP_CMD_REQ_SEND_base = 0x80,
	MCP_CMD_READ_STATUS = 0xA0,
	MCP_CMD_RESET = 0xC0
} McpCommand_t;

void mcp_reset() {
     70e:	cf 93       	push	r28
     710:	df 93       	push	r29
     712:	1f 92       	push	r1
     714:	cd b7       	in	r28, 0x3d	; 61
     716:	de b7       	in	r29, 0x3e	; 62
	uint8_t buffer[] = {MCP_CMD_RESET};
     718:	80 ec       	ldi	r24, 0xC0	; 192
     71a:	89 83       	std	Y+1, r24	; 0x01
	spi_trancieve(buffer, NULL, 1);
     71c:	41 e0       	ldi	r20, 0x01	; 1
     71e:	50 e0       	ldi	r21, 0x00	; 0
     720:	60 e0       	ldi	r22, 0x00	; 0
     722:	70 e0       	ldi	r23, 0x00	; 0
     724:	ce 01       	movw	r24, r28
     726:	01 96       	adiw	r24, 0x01	; 1
     728:	cf d0       	rcall	.+414    	; 0x8c8 <spi_trancieve>
}
     72a:	0f 90       	pop	r0
     72c:	df 91       	pop	r29
     72e:	cf 91       	pop	r28
     730:	08 95       	ret

00000732 <mcp_read>:

uint8_t mcp_read(uint8_t addr) {
     732:	cf 93       	push	r28
     734:	df 93       	push	r29
     736:	00 d0       	rcall	.+0      	; 0x738 <mcp_read+0x6>
     738:	cd b7       	in	r28, 0x3d	; 61
     73a:	de b7       	in	r29, 0x3e	; 62
	uint8_t buffer[] = {MCP_CMD_READ, addr, 0x00};
     73c:	93 e0       	ldi	r25, 0x03	; 3
     73e:	99 83       	std	Y+1, r25	; 0x01
     740:	8a 83       	std	Y+2, r24	; 0x02
     742:	1b 82       	std	Y+3, r1	; 0x03
	spi_trancieve(buffer, buffer, 3);
     744:	43 e0       	ldi	r20, 0x03	; 3
     746:	50 e0       	ldi	r21, 0x00	; 0
     748:	be 01       	movw	r22, r28
     74a:	6f 5f       	subi	r22, 0xFF	; 255
     74c:	7f 4f       	sbci	r23, 0xFF	; 255
     74e:	cb 01       	movw	r24, r22
     750:	bb d0       	rcall	.+374    	; 0x8c8 <spi_trancieve>
	return buffer[2];
}
     752:	8b 81       	ldd	r24, Y+3	; 0x03
     754:	0f 90       	pop	r0
     756:	0f 90       	pop	r0
     758:	0f 90       	pop	r0
     75a:	df 91       	pop	r29
     75c:	cf 91       	pop	r28
     75e:	08 95       	ret

00000760 <mcp_write>:


void mcp_write(uint8_t addr, uint8_t value) {
     760:	cf 93       	push	r28
     762:	df 93       	push	r29
     764:	00 d0       	rcall	.+0      	; 0x766 <mcp_write+0x6>
     766:	cd b7       	in	r28, 0x3d	; 61
     768:	de b7       	in	r29, 0x3e	; 62
	uint8_t buffer[] = {MCP_CMD_WRITE, addr, value};
     76a:	92 e0       	ldi	r25, 0x02	; 2
     76c:	99 83       	std	Y+1, r25	; 0x01
     76e:	8a 83       	std	Y+2, r24	; 0x02
     770:	6b 83       	std	Y+3, r22	; 0x03
	spi_trancieve(buffer, NULL, 3);
     772:	43 e0       	ldi	r20, 0x03	; 3
     774:	50 e0       	ldi	r21, 0x00	; 0
     776:	60 e0       	ldi	r22, 0x00	; 0
     778:	70 e0       	ldi	r23, 0x00	; 0
     77a:	ce 01       	movw	r24, r28
     77c:	01 96       	adiw	r24, 0x01	; 1
     77e:	a4 d0       	rcall	.+328    	; 0x8c8 <spi_trancieve>
}
     780:	0f 90       	pop	r0
     782:	0f 90       	pop	r0
     784:	0f 90       	pop	r0
     786:	df 91       	pop	r29
     788:	cf 91       	pop	r28
     78a:	08 95       	ret

0000078c <mcp_modify_bit>:

void mcp_modify_bit(uint8_t addr, uint8_t mask, uint8_t value) {
     78c:	cf 93       	push	r28
     78e:	df 93       	push	r29
     790:	00 d0       	rcall	.+0      	; 0x792 <mcp_modify_bit+0x6>
     792:	1f 92       	push	r1
     794:	cd b7       	in	r28, 0x3d	; 61
     796:	de b7       	in	r29, 0x3e	; 62
	uint8_t buffer[] = {MCP_CMD_BIT_MODIFY, addr, mask, value};
     798:	95 e0       	ldi	r25, 0x05	; 5
     79a:	99 83       	std	Y+1, r25	; 0x01
     79c:	8a 83       	std	Y+2, r24	; 0x02
     79e:	6b 83       	std	Y+3, r22	; 0x03
     7a0:	4c 83       	std	Y+4, r20	; 0x04
	spi_trancieve(buffer, NULL, 4);
     7a2:	44 e0       	ldi	r20, 0x04	; 4
     7a4:	50 e0       	ldi	r21, 0x00	; 0
     7a6:	60 e0       	ldi	r22, 0x00	; 0
     7a8:	70 e0       	ldi	r23, 0x00	; 0
     7aa:	ce 01       	movw	r24, r28
     7ac:	01 96       	adiw	r24, 0x01	; 1
     7ae:	8c d0       	rcall	.+280    	; 0x8c8 <spi_trancieve>
}
     7b0:	0f 90       	pop	r0
     7b2:	0f 90       	pop	r0
     7b4:	0f 90       	pop	r0
     7b6:	0f 90       	pop	r0
     7b8:	df 91       	pop	r29
     7ba:	cf 91       	pop	r28
     7bc:	08 95       	ret

000007be <mcp_request_to_send>:

void mcp_request_to_send(bool buffer0, bool buffer1, bool buffer2) {
     7be:	cf 93       	push	r28
     7c0:	df 93       	push	r29
     7c2:	1f 92       	push	r1
     7c4:	cd b7       	in	r28, 0x3d	; 61
     7c6:	de b7       	in	r29, 0x3e	; 62
	uint8_t cmd = MCP_CMD_REQ_SEND_base;
	if (buffer0) cmd |= (1 << 0);
     7c8:	88 23       	and	r24, r24
     7ca:	11 f0       	breq	.+4      	; 0x7d0 <mcp_request_to_send+0x12>
     7cc:	81 e8       	ldi	r24, 0x81	; 129
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <mcp_request_to_send+0x14>
	uint8_t buffer[] = {MCP_CMD_BIT_MODIFY, addr, mask, value};
	spi_trancieve(buffer, NULL, 4);
}

void mcp_request_to_send(bool buffer0, bool buffer1, bool buffer2) {
	uint8_t cmd = MCP_CMD_REQ_SEND_base;
     7d0:	80 e8       	ldi	r24, 0x80	; 128
	if (buffer0) cmd |= (1 << 0);
	if (buffer1) cmd |= (1 << 1);
     7d2:	61 11       	cpse	r22, r1
     7d4:	82 60       	ori	r24, 0x02	; 2
	if (buffer2) cmd |= (1 << 2);
     7d6:	41 11       	cpse	r20, r1
     7d8:	84 60       	ori	r24, 0x04	; 4

	uint8_t buffer[] = {cmd};
     7da:	89 83       	std	Y+1, r24	; 0x01

	spi_trancieve(buffer, NULL, 1);
     7dc:	41 e0       	ldi	r20, 0x01	; 1
     7de:	50 e0       	ldi	r21, 0x00	; 0
     7e0:	60 e0       	ldi	r22, 0x00	; 0
     7e2:	70 e0       	ldi	r23, 0x00	; 0
     7e4:	ce 01       	movw	r24, r28
     7e6:	01 96       	adiw	r24, 0x01	; 1
     7e8:	6f d0       	rcall	.+222    	; 0x8c8 <spi_trancieve>
}
     7ea:	0f 90       	pop	r0
     7ec:	df 91       	pop	r29
     7ee:	cf 91       	pop	r28
     7f0:	08 95       	ret

000007f2 <mcp_read_status>:

McpStatus_t mcp_read_status() {
     7f2:	1f 93       	push	r17
     7f4:	cf 93       	push	r28
     7f6:	df 93       	push	r29
     7f8:	00 d0       	rcall	.+0      	; 0x7fa <mcp_read_status+0x8>
     7fa:	cd b7       	in	r28, 0x3d	; 61
     7fc:	de b7       	in	r29, 0x3e	; 62
	// Retry until read succeeds
	while (true) {
		uint8_t buffer[] = {MCP_CMD_READ_STATUS, 0x00, 0x00};
     7fe:	10 ea       	ldi	r17, 0xA0	; 160
     800:	19 83       	std	Y+1, r17	; 0x01
     802:	1a 82       	std	Y+2, r1	; 0x02
     804:	1b 82       	std	Y+3, r1	; 0x03
		spi_trancieve(buffer, buffer, 3);
     806:	43 e0       	ldi	r20, 0x03	; 3
     808:	50 e0       	ldi	r21, 0x00	; 0
     80a:	be 01       	movw	r22, r28
     80c:	6f 5f       	subi	r22, 0xFF	; 255
     80e:	7f 4f       	sbci	r23, 0xFF	; 255
     810:	cb 01       	movw	r24, r22
     812:	5a d0       	rcall	.+180    	; 0x8c8 <spi_trancieve>

		if (buffer[1] == buffer[2]) {
     814:	9a 81       	ldd	r25, Y+2	; 0x02
     816:	8b 81       	ldd	r24, Y+3	; 0x03
     818:	98 13       	cpse	r25, r24
     81a:	f2 cf       	rjmp	.-28     	; 0x800 <mcp_read_status+0xe>
			return *((McpStatus_t*)(buffer + 1));
		}
	}
}
     81c:	89 2f       	mov	r24, r25
     81e:	0f 90       	pop	r0
     820:	0f 90       	pop	r0
     822:	0f 90       	pop	r0
     824:	df 91       	pop	r29
     826:	cf 91       	pop	r28
     828:	1f 91       	pop	r17
     82a:	08 95       	ret

0000082c <pwm_init>:
	TCCR1A = (1 << WGM11) | (0 << WGM10) | (1 << COM1B1) | (0 << COM1B0);
	TCCR1B = (1 << WGM13) | (1 << WGM12) | (1 << CS11);
}

void pwm_set_duty_cycle(uint8_t duty_cycle) {
	OCR1B = (uint16_t)((uint32_t)duty_cycle * TC_TOP / 100);
     82c:	80 e4       	ldi	r24, 0x40	; 64
     82e:	9c e9       	ldi	r25, 0x9C	; 156
     830:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x700087>
     834:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x700086>
     838:	26 9a       	sbi	0x04, 6	; 4
     83a:	80 e2       	ldi	r24, 0x20	; 32
     83c:	9e e4       	ldi	r25, 0x4E	; 78
     83e:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x70008b>
     842:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x70008a>
     846:	82 e2       	ldi	r24, 0x22	; 34
     848:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
     84c:	8a e1       	ldi	r24, 0x1A	; 26
     84e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
     852:	08 95       	ret

00000854 <pwm_set_pulse_width>:


uint16_t prev_pulse_width;

void pwm_set_pulse_width(uint16_t pulse_width_us) {
	if (pulse_width_us < 900) {
     854:	84 38       	cpi	r24, 0x84	; 132
     856:	23 e0       	ldi	r18, 0x03	; 3
     858:	92 07       	cpc	r25, r18
     85a:	38 f4       	brcc	.+14     	; 0x86a <pwm_set_pulse_width+0x16>
		OCR1B = 2 * 900;
     85c:	88 e0       	ldi	r24, 0x08	; 8
     85e:	97 e0       	ldi	r25, 0x07	; 7
     860:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x70008b>
     864:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x70008a>
     868:	08 95       	ret
	} else if (pulse_width_us > 2100) {
     86a:	85 33       	cpi	r24, 0x35	; 53
     86c:	28 e0       	ldi	r18, 0x08	; 8
     86e:	92 07       	cpc	r25, r18
     870:	38 f0       	brcs	.+14     	; 0x880 <pwm_set_pulse_width+0x2c>
		OCR1B = 2 * 2100;
     872:	88 e6       	ldi	r24, 0x68	; 104
     874:	90 e1       	ldi	r25, 0x10	; 16
     876:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x70008b>
     87a:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x70008a>
     87e:	08 95       	ret
	} else {
		OCR1B = (pulse_width_us * 2);
     880:	88 0f       	add	r24, r24
     882:	99 1f       	adc	r25, r25
     884:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x70008b>
     888:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x70008a>
     88c:	08 95       	ret

0000088e <pwm_set_servo_deflection>:
void pwm_set_servo_deflection(uint8_t deflection) {
	const int min_pulse_us = 900;
	const int max_pulse_us = 2100;
	const int max_deflection = 100;
	
	pwm_set_pulse_width(min_pulse_us + 
     88e:	28 2f       	mov	r18, r24
     890:	30 e0       	ldi	r19, 0x00	; 0
     892:	a0 eb       	ldi	r26, 0xB0	; 176
     894:	b4 e0       	ldi	r27, 0x04	; 4
     896:	ea d3       	rcall	.+2004   	; 0x106c <__umulhisi3>
     898:	24 e6       	ldi	r18, 0x64	; 100
     89a:	30 e0       	ldi	r19, 0x00	; 0
     89c:	40 e0       	ldi	r20, 0x00	; 0
     89e:	50 e0       	ldi	r21, 0x00	; 0
     8a0:	bb d3       	rcall	.+1910   	; 0x1018 <__udivmodsi4>
     8a2:	c9 01       	movw	r24, r18
     8a4:	8c 57       	subi	r24, 0x7C	; 124
     8a6:	9c 4f       	sbci	r25, 0xFC	; 252
     8a8:	d5 cf       	rjmp	.-86     	; 0x854 <pwm_set_pulse_width>
     8aa:	08 95       	ret

000008ac <spi_init>:
#define MOSI_PIN 2
#define MISO_PIN 3
#define SCK_PIN 1

void spi_init() {
	SPI_DDR |= (1 << SPI_SS_PIN) | (1 << SS_PIN) | (1 << MOSI_PIN) | (1 << SCK_PIN);
     8ac:	84 b1       	in	r24, 0x04	; 4
     8ae:	87 68       	ori	r24, 0x87	; 135
     8b0:	84 b9       	out	0x04, r24	; 4
	SPI_DDR &= ~(1 << MISO_PIN);
     8b2:	23 98       	cbi	0x04, 3	; 4
	SPI_PORT |= (1 << SPI_SS_PIN);
     8b4:	28 9a       	sbi	0x05, 0	; 5
	SPI_PORT |= (1 << SS_PIN);
     8b6:	2f 9a       	sbi	0x05, 7	; 5

	PRR0 &= ~(1 << PRSPI);
     8b8:	e4 e6       	ldi	r30, 0x64	; 100
     8ba:	f0 e0       	ldi	r31, 0x00	; 0
     8bc:	80 81       	ld	r24, Z
     8be:	8b 7f       	andi	r24, 0xFB	; 251
     8c0:	80 83       	st	Z, r24

	SPCR = (1 << MSTR) | (1<< CPHA) | (1 << CPOL) | (1 << SPE) | (1 << SPR0);
     8c2:	8d e5       	ldi	r24, 0x5D	; 93
     8c4:	8c bd       	out	0x2c, r24	; 44
     8c6:	08 95       	ret

000008c8 <spi_trancieve>:
}

void spi_trancieve(uint8_t* tx_buffer, uint8_t* rx_buffer, int length) {
	SPI_PORT &= ~(1 << SS_PIN);
     8c8:	2f 98       	cbi	0x05, 7	; 5
	
	for(int i = 0; i < length; i++) {
     8ca:	14 16       	cp	r1, r20
     8cc:	15 06       	cpc	r1, r21
     8ce:	94 f4       	brge	.+36     	; 0x8f4 <spi_trancieve+0x2c>
     8d0:	fc 01       	movw	r30, r24
     8d2:	db 01       	movw	r26, r22
     8d4:	48 0f       	add	r20, r24
     8d6:	59 1f       	adc	r21, r25
		SPDR = tx_buffer[i];
     8d8:	91 91       	ld	r25, Z+
     8da:	9e bd       	out	0x2e, r25	; 46
		
		// Wait for word transmission to complete
		while (!(SPSR & (1 << SPIF))) { };
     8dc:	0d b4       	in	r0, 0x2d	; 45
     8de:	07 fe       	sbrs	r0, 7
     8e0:	fd cf       	rjmp	.-6      	; 0x8dc <spi_trancieve+0x14>

		if (rx_buffer != NULL) {
     8e2:	61 15       	cp	r22, r1
     8e4:	71 05       	cpc	r23, r1
     8e6:	11 f0       	breq	.+4      	; 0x8ec <spi_trancieve+0x24>
			rx_buffer[i] = SPDR;
     8e8:	9e b5       	in	r25, 0x2e	; 46
     8ea:	9c 93       	st	X, r25
     8ec:	11 96       	adiw	r26, 0x01	; 1
}

void spi_trancieve(uint8_t* tx_buffer, uint8_t* rx_buffer, int length) {
	SPI_PORT &= ~(1 << SS_PIN);
	
	for(int i = 0; i < length; i++) {
     8ee:	e4 17       	cp	r30, r20
     8f0:	f5 07       	cpc	r31, r21
     8f2:	91 f7       	brne	.-28     	; 0x8d8 <spi_trancieve+0x10>
		if (rx_buffer != NULL) {
			rx_buffer[i] = SPDR;
		}
	}

	SPI_PORT |= (1 << SS_PIN);
     8f4:	2f 9a       	sbi	0x05, 7	; 5
     8f6:	08 95       	ret

000008f8 <main>:
#include "drivers/adc.h"
#include "drivers/motor.h"
#include "drivers/shooter.h"

int main(void)
{
     8f8:	cf 93       	push	r28
     8fa:	df 93       	push	r29
     8fc:	cd b7       	in	r28, 0x3d	; 61
     8fe:	de b7       	in	r29, 0x3e	; 62
     900:	6b 97       	sbiw	r28, 0x1b	; 27
     902:	0f b6       	in	r0, 0x3f	; 63
     904:	f8 94       	cli
     906:	de bf       	out	0x3e, r29	; 62
     908:	0f be       	out	0x3f, r0	; 63
	spi_init();
	can_init();
	pwm_init();
	adc_init();
	adc_init_channel(AdcCh_CH0);
     90a:	cd bf       	out	0x3d, r28	; 61
	motor_init();
     90c:	cf df       	rcall	.-98     	; 0x8ac <spi_init>
	shooter_init();
     90e:	e8 dc       	rcall	.-1584   	; 0x2e0 <can_init>
	sei();
     910:	8d df       	rcall	.-230    	; 0x82c <pwm_init>

	pwm_set_servo_deflection(50);
     912:	72 dc       	rcall	.-1820   	; 0x1f8 <adc_init>
     914:	80 e0       	ldi	r24, 0x00	; 0
     916:	7a dc       	rcall	.-1804   	; 0x20c <adc_init_channel>
	

	// Home the motor to the left edge
	motor_enable();
     918:	a6 dd       	rcall	.-1204   	; 0x466 <motor_init>
     91a:	2d de       	rcall	.-934    	; 0x576 <shooter_init>
	motor_set(100, DIR_LEFT);
     91c:	78 94       	sei
     91e:	82 e3       	ldi	r24, 0x32	; 50
     920:	b6 df       	rcall	.-148    	; 0x88e <pwm_set_servo_deflection>
     922:	c4 dd       	rcall	.-1144   	; 0x4ac <motor_enable>
     924:	60 e0       	ldi	r22, 0x00	; 0
     926:	84 e6       	ldi	r24, 0x64	; 100
     928:	c7 dd       	rcall	.-1138   	; 0x4b8 <motor_set>
     92a:	2f ef       	ldi	r18, 0xFF	; 255
     92c:	33 ec       	ldi	r19, 0xC3	; 195
     92e:	49 e0       	ldi	r20, 0x09	; 9
     930:	21 50       	subi	r18, 0x01	; 1

	_delay_ms(200);
	motor_reset_encoder();
     932:	30 40       	sbci	r19, 0x00	; 0
     934:	40 40       	sbci	r20, 0x00	; 0
	
	int consecutive_same = 0;
	int16_t stationary_value = 0;
     936:	e1 f7       	brne	.-8      	; 0x930 <main+0x38>
     938:	00 c0       	rjmp	.+0      	; 0x93a <main+0x42>
	motor_set(100, DIR_LEFT);

	_delay_ms(200);
	motor_reset_encoder();
	
	int consecutive_same = 0;
     93a:	00 00       	nop
     93c:	ee dd       	rcall	.-1060   	; 0x51a <motor_reset_encoder>
	int16_t stationary_value = 0;
	while(consecutive_same < 10) {
		int16_t encoder_reading = motor_read_encoder();
     93e:	e1 2c       	mov	r14, r1
     940:	f1 2c       	mov	r15, r1
		if (encoder_reading == stationary_value) {
     942:	00 e0       	ldi	r16, 0x00	; 0
     944:	10 e0       	ldi	r17, 0x00	; 0
     946:	f6 dd       	rcall	.-1044   	; 0x534 <motor_read_encoder>
			consecutive_same++;
     948:	8e 15       	cp	r24, r14
     94a:	9f 05       	cpc	r25, r15
     94c:	11 f4       	brne	.+4      	; 0x952 <main+0x5a>
     94e:	0f 5f       	subi	r16, 0xFF	; 255
     950:	1f 4f       	sbci	r17, 0xFF	; 255
     952:	af ef       	ldi	r26, 0xFF	; 255
     954:	b9 ef       	ldi	r27, 0xF9	; 249
     956:	20 e0       	ldi	r18, 0x00	; 0
     958:	a1 50       	subi	r26, 0x01	; 1
     95a:	b0 40       	sbci	r27, 0x00	; 0
	_delay_ms(200);
	motor_reset_encoder();
	
	int consecutive_same = 0;
	int16_t stationary_value = 0;
	while(consecutive_same < 10) {
     95c:	20 40       	sbci	r18, 0x00	; 0
     95e:	e1 f7       	brne	.-8      	; 0x958 <main+0x60>
     960:	00 c0       	rjmp	.+0      	; 0x962 <main+0x6a>
			stationary_value = encoder_reading;
		}
		_delay_ms(20);
	}
	
	motor_set(0, DIR_LEFT);
     962:	00 00       	nop
     964:	7c 01       	movw	r14, r24
     966:	0a 30       	cpi	r16, 0x0A	; 10
     968:	11 05       	cpc	r17, r1

	motor_reset_encoder();
     96a:	6c f3       	brlt	.-38     	; 0x946 <main+0x4e>
     96c:	60 e0       	ldi	r22, 0x00	; 0
	
	// Define constants and variable for the regulator
	float position_reference = 0;
	float integrated_error = 0;
	float prev_position_error = 0;
	float velocity = 0.0;
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	a3 dd       	rcall	.-1210   	; 0x4b8 <motor_set>
     972:	d3 dd       	rcall	.-1114   	; 0x51a <motor_reset_encoder>
     974:	18 8a       	std	Y+16, r1	; 0x10

	
	// Define constants and variable for the regulator
	float position_reference = 0;
	float integrated_error = 0;
	float prev_position_error = 0;
     976:	19 8a       	std	Y+17, r1	; 0x11
     978:	1a 8a       	std	Y+18, r1	; 0x12
	motor_reset_encoder();

	
	// Define constants and variable for the regulator
	float position_reference = 0;
	float integrated_error = 0;
     97a:	1b 8a       	std	Y+19, r1	; 0x13
     97c:	41 2c       	mov	r4, r1
     97e:	31 2c       	mov	r3, r1

	motor_reset_encoder();

	
	// Define constants and variable for the regulator
	float position_reference = 0;
     980:	21 2c       	mov	r2, r1
     982:	1c 86       	std	Y+12, r1	; 0x0c
     984:	1d 86       	std	Y+13, r1	; 0x0d

		if (voltage > 200) {
			voltage = 200;
		}

		motor_set((uint8_t)voltage, voltage_negative ? DIR_LEFT : DIR_RIGHT);
     986:	1e 86       	std	Y+14, r1	; 0x0e
     988:	1f 86       	std	Y+15, r1	; 0x0f
     98a:	1c 8a       	std	Y+20, r1	; 0x14
	const uint8_t deadband = 55;

	while (1)
	{
		// Run regulator
		float enc_pos = motor_read_encoder();
     98c:	1d 8a       	std	Y+21, r1	; 0x15
		float position = 255.0 * enc_pos / -8657.0;
     98e:	1e 8a       	std	Y+22, r1	; 0x16
     990:	1f 8a       	std	Y+23, r1	; 0x17
     992:	ff 24       	eor	r15, r15
     994:	f3 94       	inc	r15
     996:	14 2d       	mov	r17, r4
     998:	72 2c       	mov	r7, r2
     99a:	cc dd       	rcall	.-1128   	; 0x534 <motor_read_encoder>
     99c:	bc 01       	movw	r22, r24
     99e:	99 0f       	add	r25, r25
     9a0:	88 0b       	sbc	r24, r24
     9a2:	99 0b       	sbc	r25, r25
     9a4:	0f d2       	rcall	.+1054   	; 0xdc4 <__floatsisf>
     9a6:	20 e0       	ldi	r18, 0x00	; 0
     9a8:	30 e0       	ldi	r19, 0x00	; 0
     9aa:	4f e7       	ldi	r20, 0x7F	; 127
     9ac:	53 e4       	ldi	r21, 0x43	; 67
     9ae:	be d2       	rcall	.+1404   	; 0xf2c <__mulsf3>
     9b0:	20 e0       	ldi	r18, 0x00	; 0
     9b2:	34 e4       	ldi	r19, 0x44	; 68
     9b4:	47 e0       	ldi	r20, 0x07	; 7
     9b6:	56 ec       	ldi	r21, 0xC6	; 198
		float position_error = position_reference - position;
     9b8:	6f d1       	rcall	.+734    	; 0xc98 <__divsf3>
     9ba:	68 8f       	std	Y+24, r22	; 0x18
     9bc:	79 8f       	std	Y+25, r23	; 0x19
     9be:	8a 8f       	std	Y+26, r24	; 0x1a
     9c0:	9b 8f       	std	Y+27, r25	; 0x1b
     9c2:	9b 01       	movw	r18, r22
     9c4:	ac 01       	movw	r20, r24
     9c6:	6c 89       	ldd	r22, Y+20	; 0x14
     9c8:	7d 89       	ldd	r23, Y+21	; 0x15
     9ca:	8e 89       	ldd	r24, Y+22	; 0x16
     9cc:	9f 89       	ldd	r25, Y+23	; 0x17
		
		integrated_error += position_error;
     9ce:	fb d0       	rcall	.+502    	; 0xbc6 <__subsf3>
     9d0:	d6 2e       	mov	r13, r22
     9d2:	c7 2e       	mov	r12, r23
     9d4:	08 2f       	mov	r16, r24
     9d6:	e9 2e       	mov	r14, r25
     9d8:	26 2f       	mov	r18, r22
     9da:	37 2f       	mov	r19, r23
     9dc:	48 2f       	mov	r20, r24
     9de:	59 2f       	mov	r21, r25
     9e0:	6c 85       	ldd	r22, Y+12	; 0x0c
     9e2:	7d 85       	ldd	r23, Y+13	; 0x0d
     9e4:	8e 85       	ldd	r24, Y+14	; 0x0e
		velocity = 0.95 * velocity + 0.05 * (position_error - prev_position_error);
     9e6:	9f 85       	ldd	r25, Y+15	; 0x0f
     9e8:	ef d0       	rcall	.+478    	; 0xbc8 <__addsf3>
     9ea:	6c 87       	std	Y+12, r22	; 0x0c
     9ec:	7d 87       	std	Y+13, r23	; 0x0d
     9ee:	8e 87       	std	Y+14, r24	; 0x0e
     9f0:	9f 87       	std	Y+15, r25	; 0x0f
     9f2:	23 e3       	ldi	r18, 0x33	; 51
     9f4:	33 e3       	ldi	r19, 0x33	; 51
     9f6:	43 e7       	ldi	r20, 0x73	; 115
     9f8:	5f e3       	ldi	r21, 0x3F	; 63
     9fa:	68 89       	ldd	r22, Y+16	; 0x10
     9fc:	79 89       	ldd	r23, Y+17	; 0x11
     9fe:	8a 89       	ldd	r24, Y+18	; 0x12
     a00:	9b 89       	ldd	r25, Y+19	; 0x13
     a02:	94 d2       	rcall	.+1320   	; 0xf2c <__mulsf3>
     a04:	4b 01       	movw	r8, r22
     a06:	5c 01       	movw	r10, r24
     a08:	23 2d       	mov	r18, r3
     a0a:	31 2f       	mov	r19, r17
     a0c:	42 2d       	mov	r20, r2
     a0e:	57 2d       	mov	r21, r7
     a10:	6d 2d       	mov	r22, r13
     a12:	7c 2d       	mov	r23, r12
     a14:	80 2f       	mov	r24, r16
     a16:	9e 2d       	mov	r25, r14
     a18:	d6 d0       	rcall	.+428    	; 0xbc6 <__subsf3>
     a1a:	2d ec       	ldi	r18, 0xCD	; 205
     a1c:	3c ec       	ldi	r19, 0xCC	; 204
     a1e:	4c e4       	ldi	r20, 0x4C	; 76
     a20:	5d e3       	ldi	r21, 0x3D	; 61
     a22:	84 d2       	rcall	.+1288   	; 0xf2c <__mulsf3>

		float voltage = Ki * integrated_error + Kp * position_error + Kd * velocity;
     a24:	a5 01       	movw	r20, r10
     a26:	94 01       	movw	r18, r8
     a28:	cf d0       	rcall	.+414    	; 0xbc8 <__addsf3>
     a2a:	68 8b       	std	Y+16, r22	; 0x10
     a2c:	79 8b       	std	Y+17, r23	; 0x11
     a2e:	8a 8b       	std	Y+18, r24	; 0x12
     a30:	9b 8b       	std	Y+19, r25	; 0x13
     a32:	2e ed       	ldi	r18, 0xDE	; 222
     a34:	3d e6       	ldi	r19, 0x6D	; 109
     a36:	4e ed       	ldi	r20, 0xDE	; 222
     a38:	5b e3       	ldi	r21, 0x3B	; 59
     a3a:	6c 85       	ldd	r22, Y+12	; 0x0c
     a3c:	7d 85       	ldd	r23, Y+13	; 0x0d
     a3e:	8e 85       	ldd	r24, Y+14	; 0x0e
     a40:	9f 85       	ldd	r25, Y+15	; 0x0f
     a42:	74 d2       	rcall	.+1256   	; 0xf2c <__mulsf3>
     a44:	4b 01       	movw	r8, r22
     a46:	5c 01       	movw	r10, r24
     a48:	2b e4       	ldi	r18, 0x4B	; 75
     a4a:	37 e3       	ldi	r19, 0x37	; 55
     a4c:	49 e5       	ldi	r20, 0x59	; 89
     a4e:	50 e4       	ldi	r21, 0x40	; 64
     a50:	6d 2d       	mov	r22, r13
     a52:	7c 2d       	mov	r23, r12
     a54:	80 2f       	mov	r24, r16
     a56:	9e 2d       	mov	r25, r14
     a58:	69 d2       	rcall	.+1234   	; 0xf2c <__mulsf3>
     a5a:	9b 01       	movw	r18, r22
     a5c:	ac 01       	movw	r20, r24
     a5e:	c5 01       	movw	r24, r10
     a60:	b4 01       	movw	r22, r8
     a62:	b2 d0       	rcall	.+356    	; 0xbc8 <__addsf3>
     a64:	4b 01       	movw	r8, r22
     a66:	5c 01       	movw	r10, r24
     a68:	2f e8       	ldi	r18, 0x8F	; 143
     a6a:	32 ec       	ldi	r19, 0xC2	; 194
     a6c:	47 e0       	ldi	r20, 0x07	; 7
     a6e:	52 e4       	ldi	r21, 0x42	; 66
     a70:	68 89       	ldd	r22, Y+16	; 0x10
     a72:	79 89       	ldd	r23, Y+17	; 0x11
     a74:	8a 89       	ldd	r24, Y+18	; 0x12
     a76:	9b 89       	ldd	r25, Y+19	; 0x13

		prev_position_error = position_error;

		bool voltage_negative = (voltage < 0);

		if (voltage_negative) {
     a78:	59 d2       	rcall	.+1202   	; 0xf2c <__mulsf3>
     a7a:	9b 01       	movw	r18, r22
     a7c:	ac 01       	movw	r20, r24
     a7e:	c5 01       	movw	r24, r10
     a80:	b4 01       	movw	r22, r8
     a82:	a2 d0       	rcall	.+324    	; 0xbc8 <__addsf3>
     a84:	2b 01       	movw	r4, r22
			voltage = -voltage;
     a86:	3c 01       	movw	r6, r24
     a88:	20 e0       	ldi	r18, 0x00	; 0
     a8a:	30 e0       	ldi	r19, 0x00	; 0
		float position_error = position_reference - position;
		
		integrated_error += position_error;
		velocity = 0.95 * velocity + 0.05 * (position_error - prev_position_error);

		float voltage = Ki * integrated_error + Kp * position_error + Kd * velocity;
     a8c:	a9 01       	movw	r20, r18
     a8e:	00 d1       	rcall	.+512    	; 0xc90 <__cmpsf2>

		if (voltage_negative) {
			voltage = -voltage;
		}

		voltage += deadband;
     a90:	88 23       	and	r24, r24
     a92:	24 f4       	brge	.+8      	; 0xa9c <main+0x1a4>
     a94:	c3 01       	movw	r24, r6
     a96:	b2 01       	movw	r22, r4
     a98:	90 58       	subi	r25, 0x80	; 128
     a9a:	02 c0       	rjmp	.+4      	; 0xaa0 <main+0x1a8>

		if (voltage > 200) {
     a9c:	c3 01       	movw	r24, r6
     a9e:	b2 01       	movw	r22, r4
     aa0:	20 e0       	ldi	r18, 0x00	; 0
     aa2:	30 e0       	ldi	r19, 0x00	; 0
     aa4:	4c e5       	ldi	r20, 0x5C	; 92
     aa6:	52 e4       	ldi	r21, 0x42	; 66
			voltage = 200;
     aa8:	8f d0       	rcall	.+286    	; 0xbc8 <__addsf3>
     aaa:	4b 01       	movw	r8, r22
     aac:	5c 01       	movw	r10, r24
     aae:	20 e0       	ldi	r18, 0x00	; 0
     ab0:	30 e0       	ldi	r19, 0x00	; 0
     ab2:	48 e4       	ldi	r20, 0x48	; 72
     ab4:	53 e4       	ldi	r21, 0x43	; 67
     ab6:	36 d2       	rcall	.+1132   	; 0xf24 <__gesf2>
		}

		motor_set((uint8_t)voltage, voltage_negative ? DIR_LEFT : DIR_RIGHT);
     ab8:	18 16       	cp	r1, r24
     aba:	44 f4       	brge	.+16     	; 0xacc <main+0x1d4>
     abc:	0f 2e       	mov	r0, r31
     abe:	81 2c       	mov	r8, r1
     ac0:	91 2c       	mov	r9, r1
     ac2:	f8 e4       	ldi	r31, 0x48	; 72
     ac4:	af 2e       	mov	r10, r31
     ac6:	f3 e4       	ldi	r31, 0x43	; 67
     ac8:	bf 2e       	mov	r11, r31
     aca:	f0 2d       	mov	r31, r0
     acc:	20 e0       	ldi	r18, 0x00	; 0
     ace:	30 e0       	ldi	r19, 0x00	; 0
     ad0:	a9 01       	movw	r20, r18
     ad2:	c3 01       	movw	r24, r6
     ad4:	b2 01       	movw	r22, r4
     ad6:	dc d0       	rcall	.+440    	; 0xc90 <__cmpsf2>
     ad8:	88 0f       	add	r24, r24

		
		// Receive a can message
		CanFrame_t frame;
		if (can_rx_message(&frame)) {
     ada:	88 0b       	sbc	r24, r24
     adc:	18 2f       	mov	r17, r24
     ade:	1f 21       	and	r17, r15
     ae0:	1f 25       	eor	r17, r15
     ae2:	c5 01       	movw	r24, r10
     ae4:	b4 01       	movw	r22, r8
			// Exctract values from can message
			int8_t joystick_x = frame.data.i8[0];
			uint8_t slider = frame.data.u8[1];
     ae6:	40 d1       	rcall	.+640    	; 0xd68 <__fixunssfsi>
			uint8_t should_shoot = frame.data.u8[2];
     ae8:	86 2f       	mov	r24, r22


			// Set servo deflection
			int16_t servo_defl = 100 * (joystick_x - 40 + 127) / 255;
     aea:	61 2f       	mov	r22, r17
     aec:	e5 dc       	rcall	.-1590   	; 0x4b8 <motor_set>
     aee:	ce 01       	movw	r24, r28
     af0:	01 96       	adiw	r24, 0x01	; 1
     af2:	6d dc       	rcall	.-1830   	; 0x3ce <can_rx_message>
     af4:	88 23       	and	r24, r24
     af6:	09 f4       	brne	.+2      	; 0xafa <main+0x202>
     af8:	5b c0       	rjmp	.+182    	; 0xbb0 <main+0x2b8>
     afa:	1d 81       	ldd	r17, Y+5	; 0x05
     afc:	3e 80       	ldd	r3, Y+6	; 0x06
     afe:	2c 81       	ldd	r18, Y+4	; 0x04
     b00:	02 2e       	mov	r0, r18
     b02:	00 0c       	add	r0, r0
     b04:	33 0b       	sbc	r19, r19
     b06:	29 5a       	subi	r18, 0xA9	; 169
     b08:	3f 4f       	sbci	r19, 0xFF	; 255
     b0a:	44 e6       	ldi	r20, 0x64	; 100
     b0c:	42 9f       	mul	r20, r18
     b0e:	c0 01       	movw	r24, r0
			
			if (servo_defl > 100) servo_defl = 100;
			if (servo_defl < 0) servo_defl = 0;

			pwm_set_servo_deflection(servo_defl);
     b10:	43 9f       	mul	r20, r19
     b12:	90 0d       	add	r25, r0
     b14:	11 24       	eor	r1, r1
     b16:	6f ef       	ldi	r22, 0xFF	; 255
     b18:	70 e0       	ldi	r23, 0x00	; 0
     b1a:	6b d2       	rcall	.+1238   	; 0xff2 <__divmodhi4>
			

			// Shoot if needed
			if (should_shoot) {
     b1c:	65 36       	cpi	r22, 0x65	; 101
				shooter_shoot();
     b1e:	71 05       	cpc	r23, r1
     b20:	14 f0       	brlt	.+4      	; 0xb26 <main+0x22e>
			}
			

			// Set the position reference for the motor
			position_reference = slider;
     b22:	64 e6       	ldi	r22, 0x64	; 100
     b24:	70 e0       	ldi	r23, 0x00	; 0
     b26:	cb 01       	movw	r24, r22
     b28:	99 23       	and	r25, r25
     b2a:	0c f4       	brge	.+2      	; 0xb2e <main+0x236>
     b2c:	80 e0       	ldi	r24, 0x00	; 0
     b2e:	af de       	rcall	.-674    	; 0x88e <pwm_set_servo_deflection>
     b30:	31 10       	cpse	r3, r1
     b32:	24 dd       	rcall	.-1464   	; 0x57c <shooter_shoot>
     b34:	61 2f       	mov	r22, r17
			if (position_reference < 5) position_reference = 5;
     b36:	70 e0       	ldi	r23, 0x00	; 0
     b38:	80 e0       	ldi	r24, 0x00	; 0
     b3a:	90 e0       	ldi	r25, 0x00	; 0
     b3c:	41 d1       	rcall	.+642    	; 0xdc0 <__floatunsisf>
     b3e:	6c 8b       	std	Y+20, r22	; 0x14
     b40:	7d 8b       	std	Y+21, r23	; 0x15
			if (position_reference > 250) position_reference = 250;
     b42:	8e 8b       	std	Y+22, r24	; 0x16
     b44:	9f 8b       	std	Y+23, r25	; 0x17
     b46:	20 e0       	ldi	r18, 0x00	; 0
     b48:	30 e0       	ldi	r19, 0x00	; 0
     b4a:	40 ea       	ldi	r20, 0xA0	; 160
     b4c:	50 e4       	ldi	r21, 0x40	; 64
     b4e:	a0 d0       	rcall	.+320    	; 0xc90 <__cmpsf2>
     b50:	88 23       	and	r24, r24
     b52:	a4 f0       	brlt	.+40     	; 0xb7c <main+0x284>
     b54:	20 e0       	ldi	r18, 0x00	; 0
     b56:	30 e0       	ldi	r19, 0x00	; 0
     b58:	4a e7       	ldi	r20, 0x7A	; 122
     b5a:	53 e4       	ldi	r21, 0x43	; 67
     b5c:	6c 89       	ldd	r22, Y+20	; 0x14
     b5e:	7d 89       	ldd	r23, Y+21	; 0x15
     b60:	8e 89       	ldd	r24, Y+22	; 0x16
     b62:	9f 89       	ldd	r25, Y+23	; 0x17
     b64:	df d1       	rcall	.+958    	; 0xf24 <__gesf2>
     b66:	18 16       	cp	r1, r24
			}
			

			// Set the position reference for the motor
			position_reference = slider;
			if (position_reference < 5) position_reference = 5;
     b68:	8c f4       	brge	.+34     	; 0xb8c <main+0x294>
     b6a:	80 e0       	ldi	r24, 0x00	; 0
     b6c:	90 e0       	ldi	r25, 0x00	; 0
     b6e:	aa e7       	ldi	r26, 0x7A	; 122
     b70:	b3 e4       	ldi	r27, 0x43	; 67
     b72:	8c 8b       	std	Y+20, r24	; 0x14
     b74:	9d 8b       	std	Y+21, r25	; 0x15
     b76:	ae 8b       	std	Y+22, r26	; 0x16
			if (position_reference > 250) position_reference = 250;

			
			// Send the return message
			frame.id = 0x120;
     b78:	bf 8b       	std	Y+23, r27	; 0x17
     b7a:	08 c0       	rjmp	.+16     	; 0xb8c <main+0x294>
     b7c:	80 e0       	ldi	r24, 0x00	; 0
     b7e:	90 e0       	ldi	r25, 0x00	; 0
			frame.length = 0x2;
     b80:	a0 ea       	ldi	r26, 0xA0	; 160
     b82:	b0 e4       	ldi	r27, 0x40	; 64
			
			frame.data.u8[0] = adc_read(AdcCh_CH0);
     b84:	8c 8b       	std	Y+20, r24	; 0x14
     b86:	9d 8b       	std	Y+21, r25	; 0x15
     b88:	ae 8b       	std	Y+22, r26	; 0x16
     b8a:	bf 8b       	std	Y+23, r27	; 0x17
			frame.data.u8[1] = position;
     b8c:	a0 e2       	ldi	r26, 0x20	; 32
     b8e:	b1 e0       	ldi	r27, 0x01	; 1
     b90:	ba 83       	std	Y+2, r27	; 0x02
     b92:	a9 83       	std	Y+1, r26	; 0x01
     b94:	b2 e0       	ldi	r27, 0x02	; 2
     b96:	bb 83       	std	Y+3, r27	; 0x03
     b98:	80 e0       	ldi	r24, 0x00	; 0

			can_tx_message(&frame);
     b9a:	94 db       	rcall	.-2264   	; 0x2c4 <adc_read>
     b9c:	8c 83       	std	Y+4, r24	; 0x04
     b9e:	68 8d       	ldd	r22, Y+24	; 0x18
     ba0:	79 8d       	ldd	r23, Y+25	; 0x19
     ba2:	8a 8d       	ldd	r24, Y+26	; 0x1a
     ba4:	9b 8d       	ldd	r25, Y+27	; 0x1b
     ba6:	e0 d0       	rcall	.+448    	; 0xd68 <__fixunssfsi>
     ba8:	6d 83       	std	Y+5, r22	; 0x05
     baa:	ce 01       	movw	r24, r28
     bac:	01 96       	adiw	r24, 0x01	; 1
		integrated_error += position_error;
		velocity = 0.95 * velocity + 0.05 * (position_error - prev_position_error);

		float voltage = Ki * integrated_error + Kp * position_error + Kd * velocity;

		prev_position_error = position_error;
     bae:	ca db       	rcall	.-2156   	; 0x344 <can_tx_message>
     bb0:	8f e3       	ldi	r24, 0x3F	; 63
     bb2:	9c e9       	ldi	r25, 0x9C	; 156
     bb4:	01 97       	sbiw	r24, 0x01	; 1

			can_tx_message(&frame);
		}
		
		_delay_ms(10);
    }
     bb6:	f1 f7       	brne	.-4      	; 0xbb4 <main+0x2bc>
     bb8:	00 c0       	rjmp	.+0      	; 0xbba <main+0x2c2>
     bba:	00 00       	nop
     bbc:	3d 2c       	mov	r3, r13
     bbe:	1c 2d       	mov	r17, r12
     bc0:	20 2e       	mov	r2, r16
     bc2:	7e 2c       	mov	r7, r14
     bc4:	ea ce       	rjmp	.-556    	; 0x99a <main+0xa2>

00000bc6 <__subsf3>:
     bc6:	50 58       	subi	r21, 0x80	; 128

00000bc8 <__addsf3>:
     bc8:	bb 27       	eor	r27, r27
     bca:	aa 27       	eor	r26, r26
     bcc:	0e d0       	rcall	.+28     	; 0xbea <__addsf3x>
     bce:	70 c1       	rjmp	.+736    	; 0xeb0 <__fp_round>
     bd0:	61 d1       	rcall	.+706    	; 0xe94 <__fp_pscA>
     bd2:	30 f0       	brcs	.+12     	; 0xbe0 <__addsf3+0x18>
     bd4:	66 d1       	rcall	.+716    	; 0xea2 <__fp_pscB>
     bd6:	20 f0       	brcs	.+8      	; 0xbe0 <__addsf3+0x18>
     bd8:	31 f4       	brne	.+12     	; 0xbe6 <__addsf3+0x1e>
     bda:	9f 3f       	cpi	r25, 0xFF	; 255
     bdc:	11 f4       	brne	.+4      	; 0xbe2 <__addsf3+0x1a>
     bde:	1e f4       	brtc	.+6      	; 0xbe6 <__addsf3+0x1e>
     be0:	56 c1       	rjmp	.+684    	; 0xe8e <__fp_nan>
     be2:	0e f4       	brtc	.+2      	; 0xbe6 <__addsf3+0x1e>
     be4:	e0 95       	com	r30
     be6:	e7 fb       	bst	r30, 7
     be8:	4c c1       	rjmp	.+664    	; 0xe82 <__fp_inf>

00000bea <__addsf3x>:
     bea:	e9 2f       	mov	r30, r25
     bec:	72 d1       	rcall	.+740    	; 0xed2 <__fp_split3>
     bee:	80 f3       	brcs	.-32     	; 0xbd0 <__addsf3+0x8>
     bf0:	ba 17       	cp	r27, r26
     bf2:	62 07       	cpc	r22, r18
     bf4:	73 07       	cpc	r23, r19
     bf6:	84 07       	cpc	r24, r20
     bf8:	95 07       	cpc	r25, r21
     bfa:	18 f0       	brcs	.+6      	; 0xc02 <__addsf3x+0x18>
     bfc:	71 f4       	brne	.+28     	; 0xc1a <__addsf3x+0x30>
     bfe:	9e f5       	brtc	.+102    	; 0xc66 <__addsf3x+0x7c>
     c00:	8a c1       	rjmp	.+788    	; 0xf16 <__fp_zero>
     c02:	0e f4       	brtc	.+2      	; 0xc06 <__addsf3x+0x1c>
     c04:	e0 95       	com	r30
     c06:	0b 2e       	mov	r0, r27
     c08:	ba 2f       	mov	r27, r26
     c0a:	a0 2d       	mov	r26, r0
     c0c:	0b 01       	movw	r0, r22
     c0e:	b9 01       	movw	r22, r18
     c10:	90 01       	movw	r18, r0
     c12:	0c 01       	movw	r0, r24
     c14:	ca 01       	movw	r24, r20
     c16:	a0 01       	movw	r20, r0
     c18:	11 24       	eor	r1, r1
     c1a:	ff 27       	eor	r31, r31
     c1c:	59 1b       	sub	r21, r25
     c1e:	99 f0       	breq	.+38     	; 0xc46 <__addsf3x+0x5c>
     c20:	59 3f       	cpi	r21, 0xF9	; 249
     c22:	50 f4       	brcc	.+20     	; 0xc38 <__addsf3x+0x4e>
     c24:	50 3e       	cpi	r21, 0xE0	; 224
     c26:	68 f1       	brcs	.+90     	; 0xc82 <__addsf3x+0x98>
     c28:	1a 16       	cp	r1, r26
     c2a:	f0 40       	sbci	r31, 0x00	; 0
     c2c:	a2 2f       	mov	r26, r18
     c2e:	23 2f       	mov	r18, r19
     c30:	34 2f       	mov	r19, r20
     c32:	44 27       	eor	r20, r20
     c34:	58 5f       	subi	r21, 0xF8	; 248
     c36:	f3 cf       	rjmp	.-26     	; 0xc1e <__addsf3x+0x34>
     c38:	46 95       	lsr	r20
     c3a:	37 95       	ror	r19
     c3c:	27 95       	ror	r18
     c3e:	a7 95       	ror	r26
     c40:	f0 40       	sbci	r31, 0x00	; 0
     c42:	53 95       	inc	r21
     c44:	c9 f7       	brne	.-14     	; 0xc38 <__addsf3x+0x4e>
     c46:	7e f4       	brtc	.+30     	; 0xc66 <__addsf3x+0x7c>
     c48:	1f 16       	cp	r1, r31
     c4a:	ba 0b       	sbc	r27, r26
     c4c:	62 0b       	sbc	r22, r18
     c4e:	73 0b       	sbc	r23, r19
     c50:	84 0b       	sbc	r24, r20
     c52:	ba f0       	brmi	.+46     	; 0xc82 <__addsf3x+0x98>
     c54:	91 50       	subi	r25, 0x01	; 1
     c56:	a1 f0       	breq	.+40     	; 0xc80 <__addsf3x+0x96>
     c58:	ff 0f       	add	r31, r31
     c5a:	bb 1f       	adc	r27, r27
     c5c:	66 1f       	adc	r22, r22
     c5e:	77 1f       	adc	r23, r23
     c60:	88 1f       	adc	r24, r24
     c62:	c2 f7       	brpl	.-16     	; 0xc54 <__addsf3x+0x6a>
     c64:	0e c0       	rjmp	.+28     	; 0xc82 <__addsf3x+0x98>
     c66:	ba 0f       	add	r27, r26
     c68:	62 1f       	adc	r22, r18
     c6a:	73 1f       	adc	r23, r19
     c6c:	84 1f       	adc	r24, r20
     c6e:	48 f4       	brcc	.+18     	; 0xc82 <__addsf3x+0x98>
     c70:	87 95       	ror	r24
     c72:	77 95       	ror	r23
     c74:	67 95       	ror	r22
     c76:	b7 95       	ror	r27
     c78:	f7 95       	ror	r31
     c7a:	9e 3f       	cpi	r25, 0xFE	; 254
     c7c:	08 f0       	brcs	.+2      	; 0xc80 <__addsf3x+0x96>
     c7e:	b3 cf       	rjmp	.-154    	; 0xbe6 <__addsf3+0x1e>
     c80:	93 95       	inc	r25
     c82:	88 0f       	add	r24, r24
     c84:	08 f0       	brcs	.+2      	; 0xc88 <__addsf3x+0x9e>
     c86:	99 27       	eor	r25, r25
     c88:	ee 0f       	add	r30, r30
     c8a:	97 95       	ror	r25
     c8c:	87 95       	ror	r24
     c8e:	08 95       	ret

00000c90 <__cmpsf2>:
     c90:	d4 d0       	rcall	.+424    	; 0xe3a <__fp_cmp>
     c92:	08 f4       	brcc	.+2      	; 0xc96 <__cmpsf2+0x6>
     c94:	81 e0       	ldi	r24, 0x01	; 1
     c96:	08 95       	ret

00000c98 <__divsf3>:
     c98:	0c d0       	rcall	.+24     	; 0xcb2 <__divsf3x>
     c9a:	0a c1       	rjmp	.+532    	; 0xeb0 <__fp_round>
     c9c:	02 d1       	rcall	.+516    	; 0xea2 <__fp_pscB>
     c9e:	40 f0       	brcs	.+16     	; 0xcb0 <__divsf3+0x18>
     ca0:	f9 d0       	rcall	.+498    	; 0xe94 <__fp_pscA>
     ca2:	30 f0       	brcs	.+12     	; 0xcb0 <__divsf3+0x18>
     ca4:	21 f4       	brne	.+8      	; 0xcae <__divsf3+0x16>
     ca6:	5f 3f       	cpi	r21, 0xFF	; 255
     ca8:	19 f0       	breq	.+6      	; 0xcb0 <__divsf3+0x18>
     caa:	eb c0       	rjmp	.+470    	; 0xe82 <__fp_inf>
     cac:	51 11       	cpse	r21, r1
     cae:	34 c1       	rjmp	.+616    	; 0xf18 <__fp_szero>
     cb0:	ee c0       	rjmp	.+476    	; 0xe8e <__fp_nan>

00000cb2 <__divsf3x>:
     cb2:	0f d1       	rcall	.+542    	; 0xed2 <__fp_split3>
     cb4:	98 f3       	brcs	.-26     	; 0xc9c <__divsf3+0x4>

00000cb6 <__divsf3_pse>:
     cb6:	99 23       	and	r25, r25
     cb8:	c9 f3       	breq	.-14     	; 0xcac <__divsf3+0x14>
     cba:	55 23       	and	r21, r21
     cbc:	b1 f3       	breq	.-20     	; 0xcaa <__divsf3+0x12>
     cbe:	95 1b       	sub	r25, r21
     cc0:	55 0b       	sbc	r21, r21
     cc2:	bb 27       	eor	r27, r27
     cc4:	aa 27       	eor	r26, r26
     cc6:	62 17       	cp	r22, r18
     cc8:	73 07       	cpc	r23, r19
     cca:	84 07       	cpc	r24, r20
     ccc:	38 f0       	brcs	.+14     	; 0xcdc <__divsf3_pse+0x26>
     cce:	9f 5f       	subi	r25, 0xFF	; 255
     cd0:	5f 4f       	sbci	r21, 0xFF	; 255
     cd2:	22 0f       	add	r18, r18
     cd4:	33 1f       	adc	r19, r19
     cd6:	44 1f       	adc	r20, r20
     cd8:	aa 1f       	adc	r26, r26
     cda:	a9 f3       	breq	.-22     	; 0xcc6 <__divsf3_pse+0x10>
     cdc:	33 d0       	rcall	.+102    	; 0xd44 <__divsf3_pse+0x8e>
     cde:	0e 2e       	mov	r0, r30
     ce0:	3a f0       	brmi	.+14     	; 0xcf0 <__divsf3_pse+0x3a>
     ce2:	e0 e8       	ldi	r30, 0x80	; 128
     ce4:	30 d0       	rcall	.+96     	; 0xd46 <__divsf3_pse+0x90>
     ce6:	91 50       	subi	r25, 0x01	; 1
     ce8:	50 40       	sbci	r21, 0x00	; 0
     cea:	e6 95       	lsr	r30
     cec:	00 1c       	adc	r0, r0
     cee:	ca f7       	brpl	.-14     	; 0xce2 <__divsf3_pse+0x2c>
     cf0:	29 d0       	rcall	.+82     	; 0xd44 <__divsf3_pse+0x8e>
     cf2:	fe 2f       	mov	r31, r30
     cf4:	27 d0       	rcall	.+78     	; 0xd44 <__divsf3_pse+0x8e>
     cf6:	66 0f       	add	r22, r22
     cf8:	77 1f       	adc	r23, r23
     cfa:	88 1f       	adc	r24, r24
     cfc:	bb 1f       	adc	r27, r27
     cfe:	26 17       	cp	r18, r22
     d00:	37 07       	cpc	r19, r23
     d02:	48 07       	cpc	r20, r24
     d04:	ab 07       	cpc	r26, r27
     d06:	b0 e8       	ldi	r27, 0x80	; 128
     d08:	09 f0       	breq	.+2      	; 0xd0c <__divsf3_pse+0x56>
     d0a:	bb 0b       	sbc	r27, r27
     d0c:	80 2d       	mov	r24, r0
     d0e:	bf 01       	movw	r22, r30
     d10:	ff 27       	eor	r31, r31
     d12:	93 58       	subi	r25, 0x83	; 131
     d14:	5f 4f       	sbci	r21, 0xFF	; 255
     d16:	2a f0       	brmi	.+10     	; 0xd22 <__divsf3_pse+0x6c>
     d18:	9e 3f       	cpi	r25, 0xFE	; 254
     d1a:	51 05       	cpc	r21, r1
     d1c:	68 f0       	brcs	.+26     	; 0xd38 <__divsf3_pse+0x82>
     d1e:	b1 c0       	rjmp	.+354    	; 0xe82 <__fp_inf>
     d20:	fb c0       	rjmp	.+502    	; 0xf18 <__fp_szero>
     d22:	5f 3f       	cpi	r21, 0xFF	; 255
     d24:	ec f3       	brlt	.-6      	; 0xd20 <__divsf3_pse+0x6a>
     d26:	98 3e       	cpi	r25, 0xE8	; 232
     d28:	dc f3       	brlt	.-10     	; 0xd20 <__divsf3_pse+0x6a>
     d2a:	86 95       	lsr	r24
     d2c:	77 95       	ror	r23
     d2e:	67 95       	ror	r22
     d30:	b7 95       	ror	r27
     d32:	f7 95       	ror	r31
     d34:	9f 5f       	subi	r25, 0xFF	; 255
     d36:	c9 f7       	brne	.-14     	; 0xd2a <__divsf3_pse+0x74>
     d38:	88 0f       	add	r24, r24
     d3a:	91 1d       	adc	r25, r1
     d3c:	96 95       	lsr	r25
     d3e:	87 95       	ror	r24
     d40:	97 f9       	bld	r25, 7
     d42:	08 95       	ret
     d44:	e1 e0       	ldi	r30, 0x01	; 1
     d46:	66 0f       	add	r22, r22
     d48:	77 1f       	adc	r23, r23
     d4a:	88 1f       	adc	r24, r24
     d4c:	bb 1f       	adc	r27, r27
     d4e:	62 17       	cp	r22, r18
     d50:	73 07       	cpc	r23, r19
     d52:	84 07       	cpc	r24, r20
     d54:	ba 07       	cpc	r27, r26
     d56:	20 f0       	brcs	.+8      	; 0xd60 <__divsf3_pse+0xaa>
     d58:	62 1b       	sub	r22, r18
     d5a:	73 0b       	sbc	r23, r19
     d5c:	84 0b       	sbc	r24, r20
     d5e:	ba 0b       	sbc	r27, r26
     d60:	ee 1f       	adc	r30, r30
     d62:	88 f7       	brcc	.-30     	; 0xd46 <__divsf3_pse+0x90>
     d64:	e0 95       	com	r30
     d66:	08 95       	ret

00000d68 <__fixunssfsi>:
     d68:	bc d0       	rcall	.+376    	; 0xee2 <__fp_splitA>
     d6a:	88 f0       	brcs	.+34     	; 0xd8e <__fixunssfsi+0x26>
     d6c:	9f 57       	subi	r25, 0x7F	; 127
     d6e:	90 f0       	brcs	.+36     	; 0xd94 <__fixunssfsi+0x2c>
     d70:	b9 2f       	mov	r27, r25
     d72:	99 27       	eor	r25, r25
     d74:	b7 51       	subi	r27, 0x17	; 23
     d76:	a0 f0       	brcs	.+40     	; 0xda0 <__fixunssfsi+0x38>
     d78:	d1 f0       	breq	.+52     	; 0xdae <__fixunssfsi+0x46>
     d7a:	66 0f       	add	r22, r22
     d7c:	77 1f       	adc	r23, r23
     d7e:	88 1f       	adc	r24, r24
     d80:	99 1f       	adc	r25, r25
     d82:	1a f0       	brmi	.+6      	; 0xd8a <__fixunssfsi+0x22>
     d84:	ba 95       	dec	r27
     d86:	c9 f7       	brne	.-14     	; 0xd7a <__fixunssfsi+0x12>
     d88:	12 c0       	rjmp	.+36     	; 0xdae <__fixunssfsi+0x46>
     d8a:	b1 30       	cpi	r27, 0x01	; 1
     d8c:	81 f0       	breq	.+32     	; 0xdae <__fixunssfsi+0x46>
     d8e:	c3 d0       	rcall	.+390    	; 0xf16 <__fp_zero>
     d90:	b1 e0       	ldi	r27, 0x01	; 1
     d92:	08 95       	ret
     d94:	c0 c0       	rjmp	.+384    	; 0xf16 <__fp_zero>
     d96:	67 2f       	mov	r22, r23
     d98:	78 2f       	mov	r23, r24
     d9a:	88 27       	eor	r24, r24
     d9c:	b8 5f       	subi	r27, 0xF8	; 248
     d9e:	39 f0       	breq	.+14     	; 0xdae <__fixunssfsi+0x46>
     da0:	b9 3f       	cpi	r27, 0xF9	; 249
     da2:	cc f3       	brlt	.-14     	; 0xd96 <__fixunssfsi+0x2e>
     da4:	86 95       	lsr	r24
     da6:	77 95       	ror	r23
     da8:	67 95       	ror	r22
     daa:	b3 95       	inc	r27
     dac:	d9 f7       	brne	.-10     	; 0xda4 <__fixunssfsi+0x3c>
     dae:	3e f4       	brtc	.+14     	; 0xdbe <__fixunssfsi+0x56>
     db0:	90 95       	com	r25
     db2:	80 95       	com	r24
     db4:	70 95       	com	r23
     db6:	61 95       	neg	r22
     db8:	7f 4f       	sbci	r23, 0xFF	; 255
     dba:	8f 4f       	sbci	r24, 0xFF	; 255
     dbc:	9f 4f       	sbci	r25, 0xFF	; 255
     dbe:	08 95       	ret

00000dc0 <__floatunsisf>:
     dc0:	e8 94       	clt
     dc2:	09 c0       	rjmp	.+18     	; 0xdd6 <__floatsisf+0x12>

00000dc4 <__floatsisf>:
     dc4:	97 fb       	bst	r25, 7
     dc6:	3e f4       	brtc	.+14     	; 0xdd6 <__floatsisf+0x12>
     dc8:	90 95       	com	r25
     dca:	80 95       	com	r24
     dcc:	70 95       	com	r23
     dce:	61 95       	neg	r22
     dd0:	7f 4f       	sbci	r23, 0xFF	; 255
     dd2:	8f 4f       	sbci	r24, 0xFF	; 255
     dd4:	9f 4f       	sbci	r25, 0xFF	; 255
     dd6:	99 23       	and	r25, r25
     dd8:	a9 f0       	breq	.+42     	; 0xe04 <__floatsisf+0x40>
     dda:	f9 2f       	mov	r31, r25
     ddc:	96 e9       	ldi	r25, 0x96	; 150
     dde:	bb 27       	eor	r27, r27
     de0:	93 95       	inc	r25
     de2:	f6 95       	lsr	r31
     de4:	87 95       	ror	r24
     de6:	77 95       	ror	r23
     de8:	67 95       	ror	r22
     dea:	b7 95       	ror	r27
     dec:	f1 11       	cpse	r31, r1
     dee:	f8 cf       	rjmp	.-16     	; 0xde0 <__floatsisf+0x1c>
     df0:	fa f4       	brpl	.+62     	; 0xe30 <__floatsisf+0x6c>
     df2:	bb 0f       	add	r27, r27
     df4:	11 f4       	brne	.+4      	; 0xdfa <__floatsisf+0x36>
     df6:	60 ff       	sbrs	r22, 0
     df8:	1b c0       	rjmp	.+54     	; 0xe30 <__floatsisf+0x6c>
     dfa:	6f 5f       	subi	r22, 0xFF	; 255
     dfc:	7f 4f       	sbci	r23, 0xFF	; 255
     dfe:	8f 4f       	sbci	r24, 0xFF	; 255
     e00:	9f 4f       	sbci	r25, 0xFF	; 255
     e02:	16 c0       	rjmp	.+44     	; 0xe30 <__floatsisf+0x6c>
     e04:	88 23       	and	r24, r24
     e06:	11 f0       	breq	.+4      	; 0xe0c <__floatsisf+0x48>
     e08:	96 e9       	ldi	r25, 0x96	; 150
     e0a:	11 c0       	rjmp	.+34     	; 0xe2e <__floatsisf+0x6a>
     e0c:	77 23       	and	r23, r23
     e0e:	21 f0       	breq	.+8      	; 0xe18 <__floatsisf+0x54>
     e10:	9e e8       	ldi	r25, 0x8E	; 142
     e12:	87 2f       	mov	r24, r23
     e14:	76 2f       	mov	r23, r22
     e16:	05 c0       	rjmp	.+10     	; 0xe22 <__floatsisf+0x5e>
     e18:	66 23       	and	r22, r22
     e1a:	71 f0       	breq	.+28     	; 0xe38 <__floatsisf+0x74>
     e1c:	96 e8       	ldi	r25, 0x86	; 134
     e1e:	86 2f       	mov	r24, r22
     e20:	70 e0       	ldi	r23, 0x00	; 0
     e22:	60 e0       	ldi	r22, 0x00	; 0
     e24:	2a f0       	brmi	.+10     	; 0xe30 <__floatsisf+0x6c>
     e26:	9a 95       	dec	r25
     e28:	66 0f       	add	r22, r22
     e2a:	77 1f       	adc	r23, r23
     e2c:	88 1f       	adc	r24, r24
     e2e:	da f7       	brpl	.-10     	; 0xe26 <__floatsisf+0x62>
     e30:	88 0f       	add	r24, r24
     e32:	96 95       	lsr	r25
     e34:	87 95       	ror	r24
     e36:	97 f9       	bld	r25, 7
     e38:	08 95       	ret

00000e3a <__fp_cmp>:
     e3a:	99 0f       	add	r25, r25
     e3c:	00 08       	sbc	r0, r0
     e3e:	55 0f       	add	r21, r21
     e40:	aa 0b       	sbc	r26, r26
     e42:	e0 e8       	ldi	r30, 0x80	; 128
     e44:	fe ef       	ldi	r31, 0xFE	; 254
     e46:	16 16       	cp	r1, r22
     e48:	17 06       	cpc	r1, r23
     e4a:	e8 07       	cpc	r30, r24
     e4c:	f9 07       	cpc	r31, r25
     e4e:	c0 f0       	brcs	.+48     	; 0xe80 <__fp_cmp+0x46>
     e50:	12 16       	cp	r1, r18
     e52:	13 06       	cpc	r1, r19
     e54:	e4 07       	cpc	r30, r20
     e56:	f5 07       	cpc	r31, r21
     e58:	98 f0       	brcs	.+38     	; 0xe80 <__fp_cmp+0x46>
     e5a:	62 1b       	sub	r22, r18
     e5c:	73 0b       	sbc	r23, r19
     e5e:	84 0b       	sbc	r24, r20
     e60:	95 0b       	sbc	r25, r21
     e62:	39 f4       	brne	.+14     	; 0xe72 <__fp_cmp+0x38>
     e64:	0a 26       	eor	r0, r26
     e66:	61 f0       	breq	.+24     	; 0xe80 <__fp_cmp+0x46>
     e68:	23 2b       	or	r18, r19
     e6a:	24 2b       	or	r18, r20
     e6c:	25 2b       	or	r18, r21
     e6e:	21 f4       	brne	.+8      	; 0xe78 <__fp_cmp+0x3e>
     e70:	08 95       	ret
     e72:	0a 26       	eor	r0, r26
     e74:	09 f4       	brne	.+2      	; 0xe78 <__fp_cmp+0x3e>
     e76:	a1 40       	sbci	r26, 0x01	; 1
     e78:	a6 95       	lsr	r26
     e7a:	8f ef       	ldi	r24, 0xFF	; 255
     e7c:	81 1d       	adc	r24, r1
     e7e:	81 1d       	adc	r24, r1
     e80:	08 95       	ret

00000e82 <__fp_inf>:
     e82:	97 f9       	bld	r25, 7
     e84:	9f 67       	ori	r25, 0x7F	; 127
     e86:	80 e8       	ldi	r24, 0x80	; 128
     e88:	70 e0       	ldi	r23, 0x00	; 0
     e8a:	60 e0       	ldi	r22, 0x00	; 0
     e8c:	08 95       	ret

00000e8e <__fp_nan>:
     e8e:	9f ef       	ldi	r25, 0xFF	; 255
     e90:	80 ec       	ldi	r24, 0xC0	; 192
     e92:	08 95       	ret

00000e94 <__fp_pscA>:
     e94:	00 24       	eor	r0, r0
     e96:	0a 94       	dec	r0
     e98:	16 16       	cp	r1, r22
     e9a:	17 06       	cpc	r1, r23
     e9c:	18 06       	cpc	r1, r24
     e9e:	09 06       	cpc	r0, r25
     ea0:	08 95       	ret

00000ea2 <__fp_pscB>:
     ea2:	00 24       	eor	r0, r0
     ea4:	0a 94       	dec	r0
     ea6:	12 16       	cp	r1, r18
     ea8:	13 06       	cpc	r1, r19
     eaa:	14 06       	cpc	r1, r20
     eac:	05 06       	cpc	r0, r21
     eae:	08 95       	ret

00000eb0 <__fp_round>:
     eb0:	09 2e       	mov	r0, r25
     eb2:	03 94       	inc	r0
     eb4:	00 0c       	add	r0, r0
     eb6:	11 f4       	brne	.+4      	; 0xebc <__fp_round+0xc>
     eb8:	88 23       	and	r24, r24
     eba:	52 f0       	brmi	.+20     	; 0xed0 <__fp_round+0x20>
     ebc:	bb 0f       	add	r27, r27
     ebe:	40 f4       	brcc	.+16     	; 0xed0 <__fp_round+0x20>
     ec0:	bf 2b       	or	r27, r31
     ec2:	11 f4       	brne	.+4      	; 0xec8 <__fp_round+0x18>
     ec4:	60 ff       	sbrs	r22, 0
     ec6:	04 c0       	rjmp	.+8      	; 0xed0 <__fp_round+0x20>
     ec8:	6f 5f       	subi	r22, 0xFF	; 255
     eca:	7f 4f       	sbci	r23, 0xFF	; 255
     ecc:	8f 4f       	sbci	r24, 0xFF	; 255
     ece:	9f 4f       	sbci	r25, 0xFF	; 255
     ed0:	08 95       	ret

00000ed2 <__fp_split3>:
     ed2:	57 fd       	sbrc	r21, 7
     ed4:	90 58       	subi	r25, 0x80	; 128
     ed6:	44 0f       	add	r20, r20
     ed8:	55 1f       	adc	r21, r21
     eda:	59 f0       	breq	.+22     	; 0xef2 <__fp_splitA+0x10>
     edc:	5f 3f       	cpi	r21, 0xFF	; 255
     ede:	71 f0       	breq	.+28     	; 0xefc <__fp_splitA+0x1a>
     ee0:	47 95       	ror	r20

00000ee2 <__fp_splitA>:
     ee2:	88 0f       	add	r24, r24
     ee4:	97 fb       	bst	r25, 7
     ee6:	99 1f       	adc	r25, r25
     ee8:	61 f0       	breq	.+24     	; 0xf02 <__fp_splitA+0x20>
     eea:	9f 3f       	cpi	r25, 0xFF	; 255
     eec:	79 f0       	breq	.+30     	; 0xf0c <__fp_splitA+0x2a>
     eee:	87 95       	ror	r24
     ef0:	08 95       	ret
     ef2:	12 16       	cp	r1, r18
     ef4:	13 06       	cpc	r1, r19
     ef6:	14 06       	cpc	r1, r20
     ef8:	55 1f       	adc	r21, r21
     efa:	f2 cf       	rjmp	.-28     	; 0xee0 <__fp_split3+0xe>
     efc:	46 95       	lsr	r20
     efe:	f1 df       	rcall	.-30     	; 0xee2 <__fp_splitA>
     f00:	08 c0       	rjmp	.+16     	; 0xf12 <__fp_splitA+0x30>
     f02:	16 16       	cp	r1, r22
     f04:	17 06       	cpc	r1, r23
     f06:	18 06       	cpc	r1, r24
     f08:	99 1f       	adc	r25, r25
     f0a:	f1 cf       	rjmp	.-30     	; 0xeee <__fp_splitA+0xc>
     f0c:	86 95       	lsr	r24
     f0e:	71 05       	cpc	r23, r1
     f10:	61 05       	cpc	r22, r1
     f12:	08 94       	sec
     f14:	08 95       	ret

00000f16 <__fp_zero>:
     f16:	e8 94       	clt

00000f18 <__fp_szero>:
     f18:	bb 27       	eor	r27, r27
     f1a:	66 27       	eor	r22, r22
     f1c:	77 27       	eor	r23, r23
     f1e:	cb 01       	movw	r24, r22
     f20:	97 f9       	bld	r25, 7
     f22:	08 95       	ret

00000f24 <__gesf2>:
     f24:	8a df       	rcall	.-236    	; 0xe3a <__fp_cmp>
     f26:	08 f4       	brcc	.+2      	; 0xf2a <__gesf2+0x6>
     f28:	8f ef       	ldi	r24, 0xFF	; 255
     f2a:	08 95       	ret

00000f2c <__mulsf3>:
     f2c:	0b d0       	rcall	.+22     	; 0xf44 <__mulsf3x>
     f2e:	c0 cf       	rjmp	.-128    	; 0xeb0 <__fp_round>
     f30:	b1 df       	rcall	.-158    	; 0xe94 <__fp_pscA>
     f32:	28 f0       	brcs	.+10     	; 0xf3e <__mulsf3+0x12>
     f34:	b6 df       	rcall	.-148    	; 0xea2 <__fp_pscB>
     f36:	18 f0       	brcs	.+6      	; 0xf3e <__mulsf3+0x12>
     f38:	95 23       	and	r25, r21
     f3a:	09 f0       	breq	.+2      	; 0xf3e <__mulsf3+0x12>
     f3c:	a2 cf       	rjmp	.-188    	; 0xe82 <__fp_inf>
     f3e:	a7 cf       	rjmp	.-178    	; 0xe8e <__fp_nan>
     f40:	11 24       	eor	r1, r1
     f42:	ea cf       	rjmp	.-44     	; 0xf18 <__fp_szero>

00000f44 <__mulsf3x>:
     f44:	c6 df       	rcall	.-116    	; 0xed2 <__fp_split3>
     f46:	a0 f3       	brcs	.-24     	; 0xf30 <__mulsf3+0x4>

00000f48 <__mulsf3_pse>:
     f48:	95 9f       	mul	r25, r21
     f4a:	d1 f3       	breq	.-12     	; 0xf40 <__mulsf3+0x14>
     f4c:	95 0f       	add	r25, r21
     f4e:	50 e0       	ldi	r21, 0x00	; 0
     f50:	55 1f       	adc	r21, r21
     f52:	62 9f       	mul	r22, r18
     f54:	f0 01       	movw	r30, r0
     f56:	72 9f       	mul	r23, r18
     f58:	bb 27       	eor	r27, r27
     f5a:	f0 0d       	add	r31, r0
     f5c:	b1 1d       	adc	r27, r1
     f5e:	63 9f       	mul	r22, r19
     f60:	aa 27       	eor	r26, r26
     f62:	f0 0d       	add	r31, r0
     f64:	b1 1d       	adc	r27, r1
     f66:	aa 1f       	adc	r26, r26
     f68:	64 9f       	mul	r22, r20
     f6a:	66 27       	eor	r22, r22
     f6c:	b0 0d       	add	r27, r0
     f6e:	a1 1d       	adc	r26, r1
     f70:	66 1f       	adc	r22, r22
     f72:	82 9f       	mul	r24, r18
     f74:	22 27       	eor	r18, r18
     f76:	b0 0d       	add	r27, r0
     f78:	a1 1d       	adc	r26, r1
     f7a:	62 1f       	adc	r22, r18
     f7c:	73 9f       	mul	r23, r19
     f7e:	b0 0d       	add	r27, r0
     f80:	a1 1d       	adc	r26, r1
     f82:	62 1f       	adc	r22, r18
     f84:	83 9f       	mul	r24, r19
     f86:	a0 0d       	add	r26, r0
     f88:	61 1d       	adc	r22, r1
     f8a:	22 1f       	adc	r18, r18
     f8c:	74 9f       	mul	r23, r20
     f8e:	33 27       	eor	r19, r19
     f90:	a0 0d       	add	r26, r0
     f92:	61 1d       	adc	r22, r1
     f94:	23 1f       	adc	r18, r19
     f96:	84 9f       	mul	r24, r20
     f98:	60 0d       	add	r22, r0
     f9a:	21 1d       	adc	r18, r1
     f9c:	82 2f       	mov	r24, r18
     f9e:	76 2f       	mov	r23, r22
     fa0:	6a 2f       	mov	r22, r26
     fa2:	11 24       	eor	r1, r1
     fa4:	9f 57       	subi	r25, 0x7F	; 127
     fa6:	50 40       	sbci	r21, 0x00	; 0
     fa8:	8a f0       	brmi	.+34     	; 0xfcc <__mulsf3_pse+0x84>
     faa:	e1 f0       	breq	.+56     	; 0xfe4 <__mulsf3_pse+0x9c>
     fac:	88 23       	and	r24, r24
     fae:	4a f0       	brmi	.+18     	; 0xfc2 <__mulsf3_pse+0x7a>
     fb0:	ee 0f       	add	r30, r30
     fb2:	ff 1f       	adc	r31, r31
     fb4:	bb 1f       	adc	r27, r27
     fb6:	66 1f       	adc	r22, r22
     fb8:	77 1f       	adc	r23, r23
     fba:	88 1f       	adc	r24, r24
     fbc:	91 50       	subi	r25, 0x01	; 1
     fbe:	50 40       	sbci	r21, 0x00	; 0
     fc0:	a9 f7       	brne	.-22     	; 0xfac <__mulsf3_pse+0x64>
     fc2:	9e 3f       	cpi	r25, 0xFE	; 254
     fc4:	51 05       	cpc	r21, r1
     fc6:	70 f0       	brcs	.+28     	; 0xfe4 <__mulsf3_pse+0x9c>
     fc8:	5c cf       	rjmp	.-328    	; 0xe82 <__fp_inf>
     fca:	a6 cf       	rjmp	.-180    	; 0xf18 <__fp_szero>
     fcc:	5f 3f       	cpi	r21, 0xFF	; 255
     fce:	ec f3       	brlt	.-6      	; 0xfca <__mulsf3_pse+0x82>
     fd0:	98 3e       	cpi	r25, 0xE8	; 232
     fd2:	dc f3       	brlt	.-10     	; 0xfca <__mulsf3_pse+0x82>
     fd4:	86 95       	lsr	r24
     fd6:	77 95       	ror	r23
     fd8:	67 95       	ror	r22
     fda:	b7 95       	ror	r27
     fdc:	f7 95       	ror	r31
     fde:	e7 95       	ror	r30
     fe0:	9f 5f       	subi	r25, 0xFF	; 255
     fe2:	c1 f7       	brne	.-16     	; 0xfd4 <__mulsf3_pse+0x8c>
     fe4:	fe 2b       	or	r31, r30
     fe6:	88 0f       	add	r24, r24
     fe8:	91 1d       	adc	r25, r1
     fea:	96 95       	lsr	r25
     fec:	87 95       	ror	r24
     fee:	97 f9       	bld	r25, 7
     ff0:	08 95       	ret

00000ff2 <__divmodhi4>:
     ff2:	97 fb       	bst	r25, 7
     ff4:	07 2e       	mov	r0, r23
     ff6:	16 f4       	brtc	.+4      	; 0xffc <__divmodhi4+0xa>
     ff8:	00 94       	com	r0
     ffa:	06 d0       	rcall	.+12     	; 0x1008 <__divmodhi4_neg1>
     ffc:	77 fd       	sbrc	r23, 7
     ffe:	08 d0       	rcall	.+16     	; 0x1010 <__divmodhi4_neg2>
    1000:	44 d0       	rcall	.+136    	; 0x108a <__udivmodhi4>
    1002:	07 fc       	sbrc	r0, 7
    1004:	05 d0       	rcall	.+10     	; 0x1010 <__divmodhi4_neg2>
    1006:	3e f4       	brtc	.+14     	; 0x1016 <__divmodhi4_exit>

00001008 <__divmodhi4_neg1>:
    1008:	90 95       	com	r25
    100a:	81 95       	neg	r24
    100c:	9f 4f       	sbci	r25, 0xFF	; 255
    100e:	08 95       	ret

00001010 <__divmodhi4_neg2>:
    1010:	70 95       	com	r23
    1012:	61 95       	neg	r22
    1014:	7f 4f       	sbci	r23, 0xFF	; 255

00001016 <__divmodhi4_exit>:
    1016:	08 95       	ret

00001018 <__udivmodsi4>:
    1018:	a1 e2       	ldi	r26, 0x21	; 33
    101a:	1a 2e       	mov	r1, r26
    101c:	aa 1b       	sub	r26, r26
    101e:	bb 1b       	sub	r27, r27
    1020:	fd 01       	movw	r30, r26
    1022:	0d c0       	rjmp	.+26     	; 0x103e <__udivmodsi4_ep>

00001024 <__udivmodsi4_loop>:
    1024:	aa 1f       	adc	r26, r26
    1026:	bb 1f       	adc	r27, r27
    1028:	ee 1f       	adc	r30, r30
    102a:	ff 1f       	adc	r31, r31
    102c:	a2 17       	cp	r26, r18
    102e:	b3 07       	cpc	r27, r19
    1030:	e4 07       	cpc	r30, r20
    1032:	f5 07       	cpc	r31, r21
    1034:	20 f0       	brcs	.+8      	; 0x103e <__udivmodsi4_ep>
    1036:	a2 1b       	sub	r26, r18
    1038:	b3 0b       	sbc	r27, r19
    103a:	e4 0b       	sbc	r30, r20
    103c:	f5 0b       	sbc	r31, r21

0000103e <__udivmodsi4_ep>:
    103e:	66 1f       	adc	r22, r22
    1040:	77 1f       	adc	r23, r23
    1042:	88 1f       	adc	r24, r24
    1044:	99 1f       	adc	r25, r25
    1046:	1a 94       	dec	r1
    1048:	69 f7       	brne	.-38     	; 0x1024 <__udivmodsi4_loop>
    104a:	60 95       	com	r22
    104c:	70 95       	com	r23
    104e:	80 95       	com	r24
    1050:	90 95       	com	r25
    1052:	9b 01       	movw	r18, r22
    1054:	ac 01       	movw	r20, r24
    1056:	bd 01       	movw	r22, r26
    1058:	cf 01       	movw	r24, r30
    105a:	08 95       	ret

0000105c <__tablejump2__>:
    105c:	ee 0f       	add	r30, r30
    105e:	ff 1f       	adc	r31, r31
    1060:	88 1f       	adc	r24, r24
    1062:	8b bf       	out	0x3b, r24	; 59
    1064:	07 90       	elpm	r0, Z+
    1066:	f6 91       	elpm	r31, Z
    1068:	e0 2d       	mov	r30, r0
    106a:	19 94       	eijmp

0000106c <__umulhisi3>:
    106c:	a2 9f       	mul	r26, r18
    106e:	b0 01       	movw	r22, r0
    1070:	b3 9f       	mul	r27, r19
    1072:	c0 01       	movw	r24, r0
    1074:	a3 9f       	mul	r26, r19
    1076:	70 0d       	add	r23, r0
    1078:	81 1d       	adc	r24, r1
    107a:	11 24       	eor	r1, r1
    107c:	91 1d       	adc	r25, r1
    107e:	b2 9f       	mul	r27, r18
    1080:	70 0d       	add	r23, r0
    1082:	81 1d       	adc	r24, r1
    1084:	11 24       	eor	r1, r1
    1086:	91 1d       	adc	r25, r1
    1088:	08 95       	ret

0000108a <__udivmodhi4>:
    108a:	aa 1b       	sub	r26, r26
    108c:	bb 1b       	sub	r27, r27
    108e:	51 e1       	ldi	r21, 0x11	; 17
    1090:	07 c0       	rjmp	.+14     	; 0x10a0 <__udivmodhi4_ep>

00001092 <__udivmodhi4_loop>:
    1092:	aa 1f       	adc	r26, r26
    1094:	bb 1f       	adc	r27, r27
    1096:	a6 17       	cp	r26, r22
    1098:	b7 07       	cpc	r27, r23
    109a:	10 f0       	brcs	.+4      	; 0x10a0 <__udivmodhi4_ep>
    109c:	a6 1b       	sub	r26, r22
    109e:	b7 0b       	sbc	r27, r23

000010a0 <__udivmodhi4_ep>:
    10a0:	88 1f       	adc	r24, r24
    10a2:	99 1f       	adc	r25, r25
    10a4:	5a 95       	dec	r21
    10a6:	a9 f7       	brne	.-22     	; 0x1092 <__udivmodhi4_loop>
    10a8:	80 95       	com	r24
    10aa:	90 95       	com	r25
    10ac:	bc 01       	movw	r22, r24
    10ae:	cd 01       	movw	r24, r26
    10b0:	08 95       	ret

000010b2 <_exit>:
    10b2:	f8 94       	cli

000010b4 <__stop_program>:
    10b4:	ff cf       	rjmp	.-2      	; 0x10b4 <__stop_program>
