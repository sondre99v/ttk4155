
Node2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000013a  00800200  00000b18  00000bac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b18  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  0080033a  0080033a  00000ce6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ce6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d18  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000200  00000000  00000000  00000d58  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000025cd  00000000  00000000  00000f58  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000016be  00000000  00000000  00003525  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001175  00000000  00000000  00004be3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000480  00000000  00000000  00005d58  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c43  00000000  00000000  000061d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000da7  00000000  00000000  00006e1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000188  00000000  00000000  00007bc2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	c2 c0       	rjmp	.+388    	; 0x186 <__ctors_end>
   2:	00 00       	nop
   4:	df c0       	rjmp	.+446    	; 0x1c4 <__bad_interrupt>
   6:	00 00       	nop
   8:	dd c0       	rjmp	.+442    	; 0x1c4 <__bad_interrupt>
   a:	00 00       	nop
   c:	db c0       	rjmp	.+438    	; 0x1c4 <__bad_interrupt>
   e:	00 00       	nop
  10:	d9 c0       	rjmp	.+434    	; 0x1c4 <__bad_interrupt>
  12:	00 00       	nop
  14:	d7 c0       	rjmp	.+430    	; 0x1c4 <__bad_interrupt>
  16:	00 00       	nop
  18:	d5 c0       	rjmp	.+426    	; 0x1c4 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	d3 c0       	rjmp	.+422    	; 0x1c4 <__bad_interrupt>
  1e:	00 00       	nop
  20:	d1 c0       	rjmp	.+418    	; 0x1c4 <__bad_interrupt>
  22:	00 00       	nop
  24:	cf c0       	rjmp	.+414    	; 0x1c4 <__bad_interrupt>
  26:	00 00       	nop
  28:	cd c0       	rjmp	.+410    	; 0x1c4 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	cb c0       	rjmp	.+406    	; 0x1c4 <__bad_interrupt>
  2e:	00 00       	nop
  30:	c9 c0       	rjmp	.+402    	; 0x1c4 <__bad_interrupt>
  32:	00 00       	nop
  34:	c7 c0       	rjmp	.+398    	; 0x1c4 <__bad_interrupt>
  36:	00 00       	nop
  38:	c5 c0       	rjmp	.+394    	; 0x1c4 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	c3 c0       	rjmp	.+390    	; 0x1c4 <__bad_interrupt>
  3e:	00 00       	nop
  40:	c1 c0       	rjmp	.+386    	; 0x1c4 <__bad_interrupt>
  42:	00 00       	nop
  44:	bf c0       	rjmp	.+382    	; 0x1c4 <__bad_interrupt>
  46:	00 00       	nop
  48:	bd c0       	rjmp	.+378    	; 0x1c4 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	bb c0       	rjmp	.+374    	; 0x1c4 <__bad_interrupt>
  4e:	00 00       	nop
  50:	b9 c0       	rjmp	.+370    	; 0x1c4 <__bad_interrupt>
  52:	00 00       	nop
  54:	b7 c0       	rjmp	.+366    	; 0x1c4 <__bad_interrupt>
  56:	00 00       	nop
  58:	b5 c0       	rjmp	.+362    	; 0x1c4 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	b3 c0       	rjmp	.+358    	; 0x1c4 <__bad_interrupt>
  5e:	00 00       	nop
  60:	b1 c0       	rjmp	.+354    	; 0x1c4 <__bad_interrupt>
  62:	00 00       	nop
  64:	af c0       	rjmp	.+350    	; 0x1c4 <__bad_interrupt>
  66:	00 00       	nop
  68:	ad c0       	rjmp	.+346    	; 0x1c4 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	ab c0       	rjmp	.+342    	; 0x1c4 <__bad_interrupt>
  6e:	00 00       	nop
  70:	a9 c0       	rjmp	.+338    	; 0x1c4 <__bad_interrupt>
  72:	00 00       	nop
  74:	a7 c0       	rjmp	.+334    	; 0x1c4 <__bad_interrupt>
  76:	00 00       	nop
  78:	a5 c0       	rjmp	.+330    	; 0x1c4 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	a3 c0       	rjmp	.+326    	; 0x1c4 <__bad_interrupt>
  7e:	00 00       	nop
  80:	a1 c0       	rjmp	.+322    	; 0x1c4 <__bad_interrupt>
  82:	00 00       	nop
  84:	9f c0       	rjmp	.+318    	; 0x1c4 <__bad_interrupt>
  86:	00 00       	nop
  88:	9d c0       	rjmp	.+314    	; 0x1c4 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	9b c0       	rjmp	.+310    	; 0x1c4 <__bad_interrupt>
  8e:	00 00       	nop
  90:	99 c0       	rjmp	.+306    	; 0x1c4 <__bad_interrupt>
  92:	00 00       	nop
  94:	97 c0       	rjmp	.+302    	; 0x1c4 <__bad_interrupt>
  96:	00 00       	nop
  98:	95 c0       	rjmp	.+298    	; 0x1c4 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	c6 c1       	rjmp	.+908    	; 0x42a <__vector_39>
  9e:	00 00       	nop
  a0:	91 c0       	rjmp	.+290    	; 0x1c4 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	8f c0       	rjmp	.+286    	; 0x1c4 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	8d c0       	rjmp	.+282    	; 0x1c4 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	8b c0       	rjmp	.+278    	; 0x1c4 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	89 c0       	rjmp	.+274    	; 0x1c4 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	87 c0       	rjmp	.+270    	; 0x1c4 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	85 c0       	rjmp	.+266    	; 0x1c4 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	83 c0       	rjmp	.+262    	; 0x1c4 <__bad_interrupt>
  be:	00 00       	nop
  c0:	81 c0       	rjmp	.+258    	; 0x1c4 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	7f c0       	rjmp	.+254    	; 0x1c4 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	7d c0       	rjmp	.+250    	; 0x1c4 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	7b c0       	rjmp	.+246    	; 0x1c4 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	79 c0       	rjmp	.+242    	; 0x1c4 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	77 c0       	rjmp	.+238    	; 0x1c4 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	75 c0       	rjmp	.+234    	; 0x1c4 <__bad_interrupt>
  da:	00 00       	nop
  dc:	73 c0       	rjmp	.+230    	; 0x1c4 <__bad_interrupt>
  de:	00 00       	nop
  e0:	71 c0       	rjmp	.+226    	; 0x1c4 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	33 02       	muls	r19, r19
  e6:	85 02       	muls	r24, r21
  e8:	85 02       	muls	r24, r21
  ea:	85 02       	muls	r24, r21
  ec:	85 02       	muls	r24, r21
  ee:	85 02       	muls	r24, r21
  f0:	85 02       	muls	r24, r21
  f2:	85 02       	muls	r24, r21
  f4:	33 02       	muls	r19, r19
  f6:	85 02       	muls	r24, r21
  f8:	85 02       	muls	r24, r21
  fa:	85 02       	muls	r24, r21
  fc:	85 02       	muls	r24, r21
  fe:	85 02       	muls	r24, r21
 100:	85 02       	muls	r24, r21
 102:	85 02       	muls	r24, r21
 104:	35 02       	muls	r19, r21
 106:	85 02       	muls	r24, r21
 108:	85 02       	muls	r24, r21
 10a:	85 02       	muls	r24, r21
 10c:	85 02       	muls	r24, r21
 10e:	85 02       	muls	r24, r21
 110:	85 02       	muls	r24, r21
 112:	85 02       	muls	r24, r21
 114:	85 02       	muls	r24, r21
 116:	85 02       	muls	r24, r21
 118:	85 02       	muls	r24, r21
 11a:	85 02       	muls	r24, r21
 11c:	85 02       	muls	r24, r21
 11e:	85 02       	muls	r24, r21
 120:	85 02       	muls	r24, r21
 122:	85 02       	muls	r24, r21
 124:	35 02       	muls	r19, r21
 126:	85 02       	muls	r24, r21
 128:	85 02       	muls	r24, r21
 12a:	85 02       	muls	r24, r21
 12c:	85 02       	muls	r24, r21
 12e:	85 02       	muls	r24, r21
 130:	85 02       	muls	r24, r21
 132:	85 02       	muls	r24, r21
 134:	85 02       	muls	r24, r21
 136:	85 02       	muls	r24, r21
 138:	85 02       	muls	r24, r21
 13a:	85 02       	muls	r24, r21
 13c:	85 02       	muls	r24, r21
 13e:	85 02       	muls	r24, r21
 140:	85 02       	muls	r24, r21
 142:	85 02       	muls	r24, r21
 144:	81 02       	muls	r24, r17
 146:	85 02       	muls	r24, r21
 148:	85 02       	muls	r24, r21
 14a:	85 02       	muls	r24, r21
 14c:	85 02       	muls	r24, r21
 14e:	85 02       	muls	r24, r21
 150:	85 02       	muls	r24, r21
 152:	85 02       	muls	r24, r21
 154:	5e 02       	muls	r21, r30
 156:	85 02       	muls	r24, r21
 158:	85 02       	muls	r24, r21
 15a:	85 02       	muls	r24, r21
 15c:	85 02       	muls	r24, r21
 15e:	85 02       	muls	r24, r21
 160:	85 02       	muls	r24, r21
 162:	85 02       	muls	r24, r21
 164:	85 02       	muls	r24, r21
 166:	85 02       	muls	r24, r21
 168:	85 02       	muls	r24, r21
 16a:	85 02       	muls	r24, r21
 16c:	85 02       	muls	r24, r21
 16e:	85 02       	muls	r24, r21
 170:	85 02       	muls	r24, r21
 172:	85 02       	muls	r24, r21
 174:	52 02       	muls	r21, r18
 176:	85 02       	muls	r24, r21
 178:	85 02       	muls	r24, r21
 17a:	85 02       	muls	r24, r21
 17c:	85 02       	muls	r24, r21
 17e:	85 02       	muls	r24, r21
 180:	85 02       	muls	r24, r21
 182:	85 02       	muls	r24, r21
 184:	70 02       	muls	r23, r16

00000186 <__ctors_end>:
 186:	11 24       	eor	r1, r1
 188:	1f be       	out	0x3f, r1	; 63
 18a:	cf ef       	ldi	r28, 0xFF	; 255
 18c:	d1 e2       	ldi	r29, 0x21	; 33
 18e:	de bf       	out	0x3e, r29	; 62
 190:	cd bf       	out	0x3d, r28	; 61
 192:	00 e0       	ldi	r16, 0x00	; 0
 194:	0c bf       	out	0x3c, r16	; 60

00000196 <__do_copy_data>:
 196:	13 e0       	ldi	r17, 0x03	; 3
 198:	a0 e0       	ldi	r26, 0x00	; 0
 19a:	b2 e0       	ldi	r27, 0x02	; 2
 19c:	e8 e1       	ldi	r30, 0x18	; 24
 19e:	fb e0       	ldi	r31, 0x0B	; 11
 1a0:	00 e0       	ldi	r16, 0x00	; 0
 1a2:	0b bf       	out	0x3b, r16	; 59
 1a4:	02 c0       	rjmp	.+4      	; 0x1aa <__do_copy_data+0x14>
 1a6:	07 90       	elpm	r0, Z+
 1a8:	0d 92       	st	X+, r0
 1aa:	aa 33       	cpi	r26, 0x3A	; 58
 1ac:	b1 07       	cpc	r27, r17
 1ae:	d9 f7       	brne	.-10     	; 0x1a6 <__do_copy_data+0x10>

000001b0 <__do_clear_bss>:
 1b0:	23 e0       	ldi	r18, 0x03	; 3
 1b2:	aa e3       	ldi	r26, 0x3A	; 58
 1b4:	b3 e0       	ldi	r27, 0x03	; 3
 1b6:	01 c0       	rjmp	.+2      	; 0x1ba <.do_clear_bss_start>

000001b8 <.do_clear_bss_loop>:
 1b8:	1d 92       	st	X+, r1

000001ba <.do_clear_bss_start>:
 1ba:	a7 34       	cpi	r26, 0x47	; 71
 1bc:	b2 07       	cpc	r27, r18
 1be:	e1 f7       	brne	.-8      	; 0x1b8 <.do_clear_bss_loop>
 1c0:	ae d2       	rcall	.+1372   	; 0x71e <main>
 1c2:	a8 c4       	rjmp	.+2384   	; 0xb14 <_exit>

000001c4 <__bad_interrupt>:
 1c4:	1d cf       	rjmp	.-454    	; 0x0 <__vectors>

000001c6 <adc_init>:
	ADCSRB &= ~(1 << MUX5);
	ADCSRB |= ((int)ch >> 5) << MUX5;
}

void adc_init() {
	ADMUX = (1 << REFS0);
 1c6:	80 e4       	ldi	r24, 0x40	; 64
 1c8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
	ADCSRB = (1 << MUX5);
 1cc:	88 e0       	ldi	r24, 0x08	; 8
 1ce:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
	//_set_channel(0);

	ADCSRA = (1 << ADEN);
 1d2:	80 e8       	ldi	r24, 0x80	; 128
 1d4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
 1d8:	08 95       	ret

000001da <adc_init_channel>:
}

void adc_init_channel(AdcCh_t channel) {
 1da:	cf 93       	push	r28
 1dc:	df 93       	push	r29
 1de:	1f 92       	push	r1
 1e0:	1f 92       	push	r1
 1e2:	cd b7       	in	r28, 0x3d	; 61
 1e4:	de b7       	in	r29, 0x3e	; 62
	volatile int channel_number = (int)channel & 0b000111;
 1e6:	28 2f       	mov	r18, r24
 1e8:	27 70       	andi	r18, 0x07	; 7
 1ea:	30 e0       	ldi	r19, 0x00	; 0
 1ec:	3a 83       	std	Y+2, r19	; 0x02
 1ee:	29 83       	std	Y+1, r18	; 0x01
	channel_number |= (channel >> 2) & 0b001000;
 1f0:	29 81       	ldd	r18, Y+1	; 0x01
 1f2:	3a 81       	ldd	r19, Y+2	; 0x02
 1f4:	86 95       	lsr	r24
 1f6:	86 95       	lsr	r24
 1f8:	88 70       	andi	r24, 0x08	; 8
 1fa:	a9 01       	movw	r20, r18
 1fc:	48 2b       	or	r20, r24
 1fe:	ca 01       	movw	r24, r20
 200:	9a 83       	std	Y+2, r25	; 0x02
 202:	89 83       	std	Y+1, r24	; 0x01
	
	if (channel_number < 8) {
 204:	89 81       	ldd	r24, Y+1	; 0x01
 206:	9a 81       	ldd	r25, Y+2	; 0x02
 208:	08 97       	sbiw	r24, 0x08	; 8
 20a:	ec f4       	brge	.+58     	; 0x246 <adc_init_channel+0x6c>
		DIDR0 |= (1 << channel_number);
 20c:	29 81       	ldd	r18, Y+1	; 0x01
 20e:	3a 81       	ldd	r19, Y+2	; 0x02
 210:	ee e7       	ldi	r30, 0x7E	; 126
 212:	f0 e0       	ldi	r31, 0x00	; 0
 214:	40 81       	ld	r20, Z
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	bc 01       	movw	r22, r24
 21c:	02 c0       	rjmp	.+4      	; 0x222 <adc_init_channel+0x48>
 21e:	66 0f       	add	r22, r22
 220:	77 1f       	adc	r23, r23
 222:	2a 95       	dec	r18
 224:	e2 f7       	brpl	.-8      	; 0x21e <adc_init_channel+0x44>
 226:	9b 01       	movw	r18, r22
 228:	24 2b       	or	r18, r20
 22a:	20 83       	st	Z, r18
		DDRF &= ~(1 << channel_number);
 22c:	49 81       	ldd	r20, Y+1	; 0x01
 22e:	5a 81       	ldd	r21, Y+2	; 0x02
 230:	20 b3       	in	r18, 0x10	; 16
 232:	02 c0       	rjmp	.+4      	; 0x238 <adc_init_channel+0x5e>
 234:	88 0f       	add	r24, r24
 236:	99 1f       	adc	r25, r25
 238:	4a 95       	dec	r20
 23a:	e2 f7       	brpl	.-8      	; 0x234 <adc_init_channel+0x5a>
 23c:	80 95       	com	r24
 23e:	90 95       	com	r25
 240:	82 23       	and	r24, r18
 242:	80 bb       	out	0x10, r24	; 16
 244:	21 c0       	rjmp	.+66     	; 0x288 <adc_init_channel+0xae>
	} else {
		DIDR2 |= (1 << (channel_number - 8));
 246:	49 81       	ldd	r20, Y+1	; 0x01
 248:	5a 81       	ldd	r21, Y+2	; 0x02
 24a:	ed e7       	ldi	r30, 0x7D	; 125
 24c:	f0 e0       	ldi	r31, 0x00	; 0
 24e:	60 81       	ld	r22, Z
 250:	48 50       	subi	r20, 0x08	; 8
 252:	51 09       	sbc	r21, r1
 254:	81 e0       	ldi	r24, 0x01	; 1
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	9c 01       	movw	r18, r24
 25a:	02 c0       	rjmp	.+4      	; 0x260 <adc_init_channel+0x86>
 25c:	22 0f       	add	r18, r18
 25e:	33 1f       	adc	r19, r19
 260:	4a 95       	dec	r20
 262:	e2 f7       	brpl	.-8      	; 0x25c <adc_init_channel+0x82>
 264:	26 2b       	or	r18, r22
 266:	20 83       	st	Z, r18
		DDRK &= ~(1 << (channel_number - 8));
 268:	29 81       	ldd	r18, Y+1	; 0x01
 26a:	3a 81       	ldd	r19, Y+2	; 0x02
 26c:	e7 e0       	ldi	r30, 0x07	; 7
 26e:	f1 e0       	ldi	r31, 0x01	; 1
 270:	40 81       	ld	r20, Z
 272:	28 50       	subi	r18, 0x08	; 8
 274:	31 09       	sbc	r19, r1
 276:	02 c0       	rjmp	.+4      	; 0x27c <adc_init_channel+0xa2>
 278:	88 0f       	add	r24, r24
 27a:	99 1f       	adc	r25, r25
 27c:	2a 95       	dec	r18
 27e:	e2 f7       	brpl	.-8      	; 0x278 <adc_init_channel+0x9e>
 280:	80 95       	com	r24
 282:	90 95       	com	r25
 284:	84 23       	and	r24, r20
 286:	80 83       	st	Z, r24
	}
}
 288:	0f 90       	pop	r0
 28a:	0f 90       	pop	r0
 28c:	df 91       	pop	r29
 28e:	cf 91       	pop	r28
 290:	08 95       	ret

00000292 <can_init>:
#include "can.h"
#include "mcp2515.h"
#include <avr/io.h>


void can_init() {
 292:	51 d1       	rcall	.+674    	; 0x536 <mcp_reset>
 294:	60 e8       	ldi	r22, 0x80	; 128
 296:	8f e0       	ldi	r24, 0x0F	; 15
 298:	60 d1       	rcall	.+704    	; 0x55a <mcp_write>
 29a:	60 e2       	ldi	r22, 0x20	; 32
 29c:	8a e2       	ldi	r24, 0x2A	; 42
 29e:	5d d1       	rcall	.+698    	; 0x55a <mcp_write>
 2a0:	62 e9       	ldi	r22, 0x92	; 146
 2a2:	89 e2       	ldi	r24, 0x29	; 41
 2a4:	5a d1       	rcall	.+692    	; 0x55a <mcp_write>
 2a6:	62 ec       	ldi	r22, 0xC2	; 194
 2a8:	88 e2       	ldi	r24, 0x28	; 40
 2aa:	57 d1       	rcall	.+686    	; 0x55a <mcp_write>
 2ac:	60 e0       	ldi	r22, 0x00	; 0
 2ae:	8b e2       	ldi	r24, 0x2B	; 43
 2b0:	54 d1       	rcall	.+680    	; 0x55a <mcp_write>
 2b2:	60 e0       	ldi	r22, 0x00	; 0
 2b4:	8c e2       	ldi	r24, 0x2C	; 44
 2b6:	51 d1       	rcall	.+674    	; 0x55a <mcp_write>
 2b8:	60 e0       	ldi	r22, 0x00	; 0
 2ba:	8d e2       	ldi	r24, 0x2D	; 45
 2bc:	4e d1       	rcall	.+668    	; 0x55a <mcp_write>
 2be:	60 e0       	ldi	r22, 0x00	; 0
 2c0:	8c e0       	ldi	r24, 0x0C	; 12
 2c2:	4b d1       	rcall	.+662    	; 0x55a <mcp_write>
 2c4:	60 e0       	ldi	r22, 0x00	; 0
 2c6:	8d e0       	ldi	r24, 0x0D	; 13
 2c8:	48 d1       	rcall	.+656    	; 0x55a <mcp_write>
 2ca:	60 e0       	ldi	r22, 0x00	; 0
 2cc:	80 e6       	ldi	r24, 0x60	; 96
 2ce:	45 d1       	rcall	.+650    	; 0x55a <mcp_write>
 2d0:	60 e0       	ldi	r22, 0x00	; 0
 2d2:	80 e7       	ldi	r24, 0x70	; 112
 2d4:	42 d1       	rcall	.+644    	; 0x55a <mcp_write>
 2d6:	60 e0       	ldi	r22, 0x00	; 0
 2d8:	80 e2       	ldi	r24, 0x20	; 32
 2da:	3f d1       	rcall	.+638    	; 0x55a <mcp_write>
 2dc:	60 e0       	ldi	r22, 0x00	; 0
 2de:	81 e2       	ldi	r24, 0x21	; 33
 2e0:	3c d1       	rcall	.+632    	; 0x55a <mcp_write>
 2e2:	60 e0       	ldi	r22, 0x00	; 0
 2e4:	82 e2       	ldi	r24, 0x22	; 34
 2e6:	39 d1       	rcall	.+626    	; 0x55a <mcp_write>
 2e8:	60 e0       	ldi	r22, 0x00	; 0
 2ea:	83 e2       	ldi	r24, 0x23	; 35
 2ec:	36 d1       	rcall	.+620    	; 0x55a <mcp_write>
 2ee:	64 e0       	ldi	r22, 0x04	; 4
 2f0:	8f e0       	ldi	r24, 0x0F	; 15
 2f2:	33 c1       	rjmp	.+614    	; 0x55a <mcp_write>
 2f4:	08 95       	ret

000002f6 <motor_disable>:
	motor_disable();
}


void motor_disable() {
	MOTOR_PORT &= ~(1 << EN_PIN);
 2f6:	e2 e0       	ldi	r30, 0x02	; 2
 2f8:	f1 e0       	ldi	r31, 0x01	; 1
 2fa:	80 81       	ld	r24, Z
 2fc:	8f 7e       	andi	r24, 0xEF	; 239
 2fe:	80 83       	st	Z, r24
 300:	08 95       	ret

00000302 <motor_init>:
#define ENCODER_NOE_PIN 5
#define ENCODER_SEL_PIN 3
#define ENCODER_RST_PIN 6


void motor_init() {
 302:	cf 93       	push	r28
 304:	df 93       	push	r29
	ENCODER_DDR |= (1 << ENCODER_NOE_PIN);
 306:	c1 e0       	ldi	r28, 0x01	; 1
 308:	d1 e0       	ldi	r29, 0x01	; 1
 30a:	88 81       	ld	r24, Y
 30c:	80 62       	ori	r24, 0x20	; 32
 30e:	88 83       	st	Y, r24
	ENCODER_DDR |= (1 << ENCODER_SEL_PIN);
 310:	88 81       	ld	r24, Y
 312:	88 60       	ori	r24, 0x08	; 8
 314:	88 83       	st	Y, r24
	ENCODER_DDR |= (1 << ENCODER_RST_PIN);
 316:	88 81       	ld	r24, Y
 318:	80 64       	ori	r24, 0x40	; 64
 31a:	88 83       	st	Y, r24
	ENCODER_PORT |= (1 << ENCODER_NOE_PIN);
 31c:	e2 e0       	ldi	r30, 0x02	; 2
 31e:	f1 e0       	ldi	r31, 0x01	; 1
 320:	80 81       	ld	r24, Z
 322:	80 62       	ori	r24, 0x20	; 32
 324:	80 83       	st	Z, r24
	ENCODER_PORT &= ~(1 << ENCODER_SEL_PIN);
 326:	80 81       	ld	r24, Z
 328:	87 7f       	andi	r24, 0xF7	; 247
 32a:	80 83       	st	Z, r24
	ENCODER_PORT |= (1 << ENCODER_RST_PIN);
 32c:	80 81       	ld	r24, Z
 32e:	80 64       	ori	r24, 0x40	; 64

	TWI_Master_Initialise();
 330:	80 83       	st	Z, r24
	
	MOTOR_DDR |= (1 << EN_PIN);
 332:	44 d0       	rcall	.+136    	; 0x3bc <TWI_Master_Initialise>
 334:	88 81       	ld	r24, Y
 336:	80 61       	ori	r24, 0x10	; 16
	MOTOR_DDR |= (1 << DIR_PIN);
 338:	88 83       	st	Y, r24
 33a:	88 81       	ld	r24, Y

	motor_disable();
 33c:	82 60       	ori	r24, 0x02	; 2
 33e:	88 83       	st	Y, r24
}
 340:	da df       	rcall	.-76     	; 0x2f6 <motor_disable>
 342:	df 91       	pop	r29
 344:	cf 91       	pop	r28
 346:	08 95       	ret

00000348 <motor_enable>:
void motor_disable() {
	MOTOR_PORT &= ~(1 << EN_PIN);
}

void motor_enable() {
	MOTOR_PORT |= (1 << EN_PIN);
 348:	e2 e0       	ldi	r30, 0x02	; 2
 34a:	f1 e0       	ldi	r31, 0x01	; 1
 34c:	80 81       	ld	r24, Z
 34e:	80 61       	ori	r24, 0x10	; 16
 350:	80 83       	st	Z, r24
 352:	08 95       	ret

00000354 <motor_set>:
}

void motor_set(uint8_t speed, motor_direction_t direction) {
 354:	cf 93       	push	r28
 356:	df 93       	push	r29
 358:	cd b7       	in	r28, 0x3d	; 61
 35a:	de b7       	in	r29, 0x3e	; 62
 35c:	29 97       	sbiw	r28, 0x09	; 9
 35e:	0f b6       	in	r0, 0x3f	; 63
 360:	f8 94       	cli
 362:	de bf       	out	0x3e, r29	; 62
 364:	0f be       	out	0x3f, r0	; 63
 366:	cd bf       	out	0x3d, r28	; 61
	// Set direction pin
	if (direction == DIR_RIGHT) {
 368:	61 30       	cpi	r22, 0x01	; 1
 36a:	31 f4       	brne	.+12     	; 0x378 <motor_set+0x24>
		MOTOR_PORT |= (1 << DIR_PIN);
 36c:	e2 e0       	ldi	r30, 0x02	; 2
 36e:	f1 e0       	ldi	r31, 0x01	; 1
 370:	90 81       	ld	r25, Z
 372:	92 60       	ori	r25, 0x02	; 2
 374:	90 83       	st	Z, r25
 376:	05 c0       	rjmp	.+10     	; 0x382 <motor_set+0x2e>
	} else {
		MOTOR_PORT &= ~(1 << DIR_PIN);
 378:	e2 e0       	ldi	r30, 0x02	; 2
 37a:	f1 e0       	ldi	r31, 0x01	; 1
 37c:	90 81       	ld	r25, Z
 37e:	9d 7f       	andi	r25, 0xFD	; 253
 380:	90 83       	st	Z, r25
	}

	// Write speed
	uint8_t buffer[] = {0x50, 0x00, speed, 0x01, 0x00, 0x02, 0x00, 0x03, 0x00};
 382:	90 e5       	ldi	r25, 0x50	; 80
 384:	99 83       	std	Y+1, r25	; 0x01
 386:	1a 82       	std	Y+2, r1	; 0x02
 388:	8b 83       	std	Y+3, r24	; 0x03
 38a:	81 e0       	ldi	r24, 0x01	; 1
 38c:	8c 83       	std	Y+4, r24	; 0x04
 38e:	1d 82       	std	Y+5, r1	; 0x05
 390:	82 e0       	ldi	r24, 0x02	; 2
 392:	8e 83       	std	Y+6, r24	; 0x06
 394:	1f 82       	std	Y+7, r1	; 0x07
 396:	83 e0       	ldi	r24, 0x03	; 3
 398:	88 87       	std	Y+8, r24	; 0x08
 39a:	19 86       	std	Y+9, r1	; 0x09
	TWI_Start_Transceiver_With_Data(buffer, 9);
 39c:	69 e0       	ldi	r22, 0x09	; 9
 39e:	ce 01       	movw	r24, r28
 3a0:	01 96       	adiw	r24, 0x01	; 1
 3a2:	16 d0       	rcall	.+44     	; 0x3d0 <TWI_Start_Transceiver_With_Data>
}
 3a4:	29 96       	adiw	r28, 0x09	; 9
 3a6:	0f b6       	in	r0, 0x3f	; 63
 3a8:	f8 94       	cli
 3aa:	de bf       	out	0x3e, r29	; 62
 3ac:	0f be       	out	0x3f, r0	; 63
 3ae:	cd bf       	out	0x3d, r28	; 61
 3b0:	df 91       	pop	r29
 3b2:	cf 91       	pop	r28
 3b4:	08 95       	ret

000003b6 <shooter_init>:
#define SHOOTER_PORT PORTF
#define SHOOTER_PIN 1


void shooter_init() {
	SHOOTER_DDR |= (1 << SHOOTER_PIN);
 3b6:	81 9a       	sbi	0x10, 1	; 16
	SHOOTER_PORT &= ~(1 << SHOOTER_PIN);
 3b8:	89 98       	cbi	0x11, 1	; 17
 3ba:	08 95       	ret

000003bc <TWI_Master_Initialise>:
    {
      msg[ i ] = TWI_buf[ i ];
    }
  }
  return( TWI_statusReg.lastTransOK );                                   
}
 3bc:	8c e0       	ldi	r24, 0x0C	; 12
 3be:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
 3c2:	8f ef       	ldi	r24, 0xFF	; 255
 3c4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
 3c8:	84 e0       	ldi	r24, 0x04	; 4
 3ca:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
 3ce:	08 95       	ret

000003d0 <TWI_Start_Transceiver_With_Data>:
 3d0:	cf 93       	push	r28
 3d2:	df 93       	push	r29
 3d4:	ec 01       	movw	r28, r24
 3d6:	ec eb       	ldi	r30, 0xBC	; 188
 3d8:	f0 e0       	ldi	r31, 0x00	; 0
 3da:	90 81       	ld	r25, Z
 3dc:	90 fd       	sbrc	r25, 0
 3de:	fd cf       	rjmp	.-6      	; 0x3da <TWI_Start_Transceiver_With_Data+0xa>
 3e0:	60 93 3c 03 	sts	0x033C, r22	; 0x80033c <TWI_msgSize>
 3e4:	88 81       	ld	r24, Y
 3e6:	80 93 3d 03 	sts	0x033D, r24	; 0x80033d <TWI_buf>
 3ea:	80 fd       	sbrc	r24, 0
 3ec:	13 c0       	rjmp	.+38     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 3ee:	62 30       	cpi	r22, 0x02	; 2
 3f0:	88 f0       	brcs	.+34     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 3f2:	fe 01       	movw	r30, r28
 3f4:	31 96       	adiw	r30, 0x01	; 1
 3f6:	ae e3       	ldi	r26, 0x3E	; 62
 3f8:	b3 e0       	ldi	r27, 0x03	; 3
 3fa:	62 50       	subi	r22, 0x02	; 2
 3fc:	26 2f       	mov	r18, r22
 3fe:	30 e0       	ldi	r19, 0x00	; 0
 400:	2e 5f       	subi	r18, 0xFE	; 254
 402:	3f 4f       	sbci	r19, 0xFF	; 255
 404:	ce 01       	movw	r24, r28
 406:	82 0f       	add	r24, r18
 408:	93 1f       	adc	r25, r19
 40a:	21 91       	ld	r18, Z+
 40c:	2d 93       	st	X+, r18
 40e:	e8 17       	cp	r30, r24
 410:	f9 07       	cpc	r31, r25
 412:	d9 f7       	brne	.-10     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 414:	10 92 3b 03 	sts	0x033B, r1	; 0x80033b <TWI_statusReg>
 418:	88 ef       	ldi	r24, 0xF8	; 248
 41a:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
 41e:	85 ea       	ldi	r24, 0xA5	; 165
 420:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
 424:	df 91       	pop	r29
 426:	cf 91       	pop	r28
 428:	08 95       	ret

0000042a <__vector_39>:
that is whenever a TWI event has occurred. This function should not be called directly from the main
application.
****************************************************************************/

ISR(TWI_vect)
{
 42a:	1f 92       	push	r1
 42c:	0f 92       	push	r0
 42e:	0f b6       	in	r0, 0x3f	; 63
 430:	0f 92       	push	r0
 432:	11 24       	eor	r1, r1
 434:	0b b6       	in	r0, 0x3b	; 59
 436:	0f 92       	push	r0
 438:	2f 93       	push	r18
 43a:	3f 93       	push	r19
 43c:	8f 93       	push	r24
 43e:	9f 93       	push	r25
 440:	af 93       	push	r26
 442:	bf 93       	push	r27
 444:	ef 93       	push	r30
 446:	ff 93       	push	r31
  static unsigned char TWI_bufPtr;
  
  switch (TWSR)
 448:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
 44c:	8e 2f       	mov	r24, r30
 44e:	90 e0       	ldi	r25, 0x00	; 0
 450:	fc 01       	movw	r30, r24
 452:	38 97       	sbiw	r30, 0x08	; 8
 454:	e1 35       	cpi	r30, 0x51	; 81
 456:	f1 05       	cpc	r31, r1
 458:	08 f0       	brcs	.+2      	; 0x45c <__vector_39+0x32>
 45a:	57 c0       	rjmp	.+174    	; 0x50a <__vector_39+0xe0>
 45c:	88 27       	eor	r24, r24
 45e:	ee 58       	subi	r30, 0x8E	; 142
 460:	ff 4f       	sbci	r31, 0xFF	; 255
 462:	8f 4f       	sbci	r24, 0xFF	; 255
 464:	22 c3       	rjmp	.+1604   	; 0xaaa <__tablejump2__>
  {
    case TWI_START:             // START has been transmitted  
    case TWI_REP_START:         // Repeated START has been transmitted
      TWI_bufPtr = 0;                                     // Set buffer pointer to the TWI Address location
 466:	10 92 3a 03 	sts	0x033A, r1	; 0x80033a <__data_end>
    case TWI_MTX_ADR_ACK:       // SLA+W has been tramsmitted and ACK received
    case TWI_MTX_DATA_ACK:      // Data byte has been tramsmitted and ACK received
      if (TWI_bufPtr < TWI_msgSize)
 46a:	e0 91 3a 03 	lds	r30, 0x033A	; 0x80033a <__data_end>
 46e:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <TWI_msgSize>
 472:	e8 17       	cp	r30, r24
 474:	70 f4       	brcc	.+28     	; 0x492 <__vector_39+0x68>
      {
        TWDR = TWI_buf[TWI_bufPtr++];
 476:	81 e0       	ldi	r24, 0x01	; 1
 478:	8e 0f       	add	r24, r30
 47a:	80 93 3a 03 	sts	0x033A, r24	; 0x80033a <__data_end>
 47e:	f0 e0       	ldi	r31, 0x00	; 0
 480:	e3 5c       	subi	r30, 0xC3	; 195
 482:	fc 4f       	sbci	r31, 0xFC	; 252
 484:	80 81       	ld	r24, Z
 486:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
        TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 48a:	85 e8       	ldi	r24, 0x85	; 133
 48c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
 490:	43 c0       	rjmp	.+134    	; 0x518 <__vector_39+0xee>
               (1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interupt and clear the flag to send byte
               (0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           //
               (0<<TWWC);                                 //  
      }else                    // Send STOP after last byte
      {
        TWI_statusReg.lastTransOK = TRUE;                 // Set status bits to completed successfully. 
 492:	80 91 3b 03 	lds	r24, 0x033B	; 0x80033b <TWI_statusReg>
 496:	81 60       	ori	r24, 0x01	; 1
 498:	80 93 3b 03 	sts	0x033B, r24	; 0x80033b <TWI_statusReg>
        TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 49c:	84 e9       	ldi	r24, 0x94	; 148
 49e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
 4a2:	3a c0       	rjmp	.+116    	; 0x518 <__vector_39+0xee>
               (0<<TWEA)|(0<<TWSTA)|(1<<TWSTO)|           // Initiate a STOP condition.
               (0<<TWWC);                                 //
      }
      break;
    case TWI_MRX_DATA_ACK:      // Data byte has been received and ACK tramsmitted
      TWI_buf[TWI_bufPtr++] = TWDR;
 4a4:	e0 91 3a 03 	lds	r30, 0x033A	; 0x80033a <__data_end>
 4a8:	81 e0       	ldi	r24, 0x01	; 1
 4aa:	8e 0f       	add	r24, r30
 4ac:	80 93 3a 03 	sts	0x033A, r24	; 0x80033a <__data_end>
 4b0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
 4b4:	f0 e0       	ldi	r31, 0x00	; 0
 4b6:	e3 5c       	subi	r30, 0xC3	; 195
 4b8:	fc 4f       	sbci	r31, 0xFC	; 252
 4ba:	80 83       	st	Z, r24
    case TWI_MRX_ADR_ACK:       // SLA+R has been tramsmitted and ACK received
      if (TWI_bufPtr < (TWI_msgSize-1) )                  // Detect the last byte to NACK it.
 4bc:	20 91 3a 03 	lds	r18, 0x033A	; 0x80033a <__data_end>
 4c0:	30 e0       	ldi	r19, 0x00	; 0
 4c2:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <TWI_msgSize>
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	01 97       	sbiw	r24, 0x01	; 1
 4ca:	28 17       	cp	r18, r24
 4cc:	39 07       	cpc	r19, r25
 4ce:	24 f4       	brge	.+8      	; 0x4d8 <__vector_39+0xae>
      {
        TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 4d0:	85 ec       	ldi	r24, 0xC5	; 197
 4d2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
 4d6:	20 c0       	rjmp	.+64     	; 0x518 <__vector_39+0xee>
               (1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interupt and clear the flag to read next byte
               (1<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // Send ACK after reception
               (0<<TWWC);                                 //  
      }else                    // Send NACK after next reception
      {
        TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 4d8:	85 e8       	ldi	r24, 0x85	; 133
 4da:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
 4de:	1c c0       	rjmp	.+56     	; 0x518 <__vector_39+0xee>
               (0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // Send NACK after reception
               (0<<TWWC);                                 // 
      }    
      break; 
    case TWI_MRX_DATA_NACK:     // Data byte has been received and NACK tramsmitted
      TWI_buf[TWI_bufPtr] = TWDR;
 4e0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
 4e4:	e0 91 3a 03 	lds	r30, 0x033A	; 0x80033a <__data_end>
 4e8:	f0 e0       	ldi	r31, 0x00	; 0
 4ea:	e3 5c       	subi	r30, 0xC3	; 195
 4ec:	fc 4f       	sbci	r31, 0xFC	; 252
 4ee:	80 83       	st	Z, r24
      TWI_statusReg.lastTransOK = TRUE;                 // Set status bits to completed successfully. 
 4f0:	80 91 3b 03 	lds	r24, 0x033B	; 0x80033b <TWI_statusReg>
 4f4:	81 60       	ori	r24, 0x01	; 1
 4f6:	80 93 3b 03 	sts	0x033B, r24	; 0x80033b <TWI_statusReg>
      TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 4fa:	84 e9       	ldi	r24, 0x94	; 148
 4fc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
             (0<<TWIE)|(1<<TWINT)|                      // Disable TWI Interrupt and clear the flag
             (0<<TWEA)|(0<<TWSTA)|(1<<TWSTO)|           // Initiate a STOP condition.
             (0<<TWWC);                                 //
      break;      
 500:	0b c0       	rjmp	.+22     	; 0x518 <__vector_39+0xee>
    case TWI_ARB_LOST:          // Arbitration lost
      TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 502:	85 ea       	ldi	r24, 0xA5	; 165
 504:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
             (1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interupt and clear the flag
             (0<<TWEA)|(1<<TWSTA)|(0<<TWSTO)|           // Initiate a (RE)START condition.
             (0<<TWWC);                                 //
      break;
 508:	07 c0       	rjmp	.+14     	; 0x518 <__vector_39+0xee>
    case TWI_MTX_ADR_NACK:      // SLA+W has been tramsmitted and NACK received
    case TWI_MRX_ADR_NACK:      // SLA+R has been tramsmitted and NACK received    
    case TWI_MTX_DATA_NACK:     // Data byte has been tramsmitted and NACK received
    case TWI_BUS_ERROR:         // Bus error due to an illegal START or STOP condition
    default:     
      TWI_state = TWSR;                                 // Store TWSR and automatically sets clears noErrors bit.
 50a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
 50e:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
                                                        // Reset TWI Interface
      TWCR = (1<<TWEN)|                                 // Enable TWI-interface and release TWI pins
 512:	84 e0       	ldi	r24, 0x04	; 4
 514:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
             (0<<TWIE)|(0<<TWINT)|                      // Disable Interupt
             (0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // No Signal requests
             (0<<TWWC);                                 //
  }
}
 518:	ff 91       	pop	r31
 51a:	ef 91       	pop	r30
 51c:	bf 91       	pop	r27
 51e:	af 91       	pop	r26
 520:	9f 91       	pop	r25
 522:	8f 91       	pop	r24
 524:	3f 91       	pop	r19
 526:	2f 91       	pop	r18
 528:	0f 90       	pop	r0
 52a:	0b be       	out	0x3b, r0	; 59
 52c:	0f 90       	pop	r0
 52e:	0f be       	out	0x3f, r0	; 63
 530:	0f 90       	pop	r0
 532:	1f 90       	pop	r1
 534:	18 95       	reti

00000536 <mcp_reset>:

uint8_t mcp_read(uint8_t addr) {
	uint8_t buffer[] = {MCP_CMD_READ, addr, 0x00};
	spi_trancieve(buffer, buffer, 3);
	return buffer[2];
}
 536:	cf 93       	push	r28
 538:	df 93       	push	r29
 53a:	1f 92       	push	r1
 53c:	cd b7       	in	r28, 0x3d	; 61
 53e:	de b7       	in	r29, 0x3e	; 62
 540:	80 ec       	ldi	r24, 0xC0	; 192
 542:	89 83       	std	Y+1, r24	; 0x01
 544:	41 e0       	ldi	r20, 0x01	; 1
 546:	50 e0       	ldi	r21, 0x00	; 0
 548:	60 e0       	ldi	r22, 0x00	; 0
 54a:	70 e0       	ldi	r23, 0x00	; 0
 54c:	ce 01       	movw	r24, r28
 54e:	01 96       	adiw	r24, 0x01	; 1
 550:	3c d0       	rcall	.+120    	; 0x5ca <spi_trancieve>
 552:	0f 90       	pop	r0
 554:	df 91       	pop	r29
 556:	cf 91       	pop	r28
 558:	08 95       	ret

0000055a <mcp_write>:


void mcp_write(uint8_t addr, uint8_t value) {
 55a:	cf 93       	push	r28
 55c:	df 93       	push	r29
 55e:	00 d0       	rcall	.+0      	; 0x560 <mcp_write+0x6>
 560:	cd b7       	in	r28, 0x3d	; 61
 562:	de b7       	in	r29, 0x3e	; 62
	uint8_t buffer[] = {MCP_CMD_WRITE, addr, value};
 564:	92 e0       	ldi	r25, 0x02	; 2
 566:	99 83       	std	Y+1, r25	; 0x01
 568:	8a 83       	std	Y+2, r24	; 0x02
 56a:	6b 83       	std	Y+3, r22	; 0x03
	spi_trancieve(buffer, NULL, 3);
 56c:	43 e0       	ldi	r20, 0x03	; 3
 56e:	50 e0       	ldi	r21, 0x00	; 0
 570:	60 e0       	ldi	r22, 0x00	; 0
 572:	70 e0       	ldi	r23, 0x00	; 0
 574:	ce 01       	movw	r24, r28
 576:	01 96       	adiw	r24, 0x01	; 1
 578:	28 d0       	rcall	.+80     	; 0x5ca <spi_trancieve>
}
 57a:	0f 90       	pop	r0
 57c:	0f 90       	pop	r0
 57e:	0f 90       	pop	r0
 580:	df 91       	pop	r29
 582:	cf 91       	pop	r28
 584:	08 95       	ret

00000586 <pwm_init>:

#define TC_TOP 40000

void pwm_init() {
	// Set TOP value for counter
	ICR1 = TC_TOP;
 586:	80 e4       	ldi	r24, 0x40	; 64
 588:	9c e9       	ldi	r25, 0x9C	; 156
 58a:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x700087>
 58e:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x700086>
	
	// Enable output pin, and set compare value
	PWM_DDR |= (1 << PWM_PIN);
 592:	26 9a       	sbi	0x04, 6	; 4
	TCCR1A = (1 << WGM11) | (0 << WGM10) | (1 << COM1B1) | (0 << COM1B0);
	TCCR1B = (1 << WGM13) | (1 << WGM12) | (1 << CS11);
}

void pwm_set_duty_cycle(uint8_t duty_cycle) {
	OCR1B = (uint16_t)((uint32_t)duty_cycle * TC_TOP / 100);
 594:	80 e2       	ldi	r24, 0x20	; 32
 596:	9e e4       	ldi	r25, 0x4E	; 78
 598:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x70008b>
 59c:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x70008a>
	// Enable output pin, and set compare value
	PWM_DDR |= (1 << PWM_PIN);
	pwm_set_duty_cycle(50);

	// Enable counter in correct mode
	TCCR1A = (1 << WGM11) | (0 << WGM10) | (1 << COM1B1) | (0 << COM1B0);
 5a0:	82 e2       	ldi	r24, 0x22	; 34
 5a2:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
	TCCR1B = (1 << WGM13) | (1 << WGM12) | (1 << CS11);
 5a6:	8a e1       	ldi	r24, 0x1A	; 26
 5a8:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
 5ac:	08 95       	ret

000005ae <spi_init>:
#define MOSI_PIN 2
#define MISO_PIN 3
#define SCK_PIN 1

void spi_init() {
	SPI_DDR |= (1 << SPI_SS_PIN) | (1 << SS_PIN) | (1 << MOSI_PIN) | (1 << SCK_PIN);
 5ae:	84 b1       	in	r24, 0x04	; 4
 5b0:	87 68       	ori	r24, 0x87	; 135
 5b2:	84 b9       	out	0x04, r24	; 4
	SPI_DDR &= ~(1 << MISO_PIN);
 5b4:	23 98       	cbi	0x04, 3	; 4
	SPI_PORT |= (1 << SPI_SS_PIN);
 5b6:	28 9a       	sbi	0x05, 0	; 5
	SPI_PORT |= (1 << SS_PIN);
 5b8:	2f 9a       	sbi	0x05, 7	; 5

	PRR0 &= ~(1 << PRSPI);
 5ba:	e4 e6       	ldi	r30, 0x64	; 100
 5bc:	f0 e0       	ldi	r31, 0x00	; 0
 5be:	80 81       	ld	r24, Z
 5c0:	8b 7f       	andi	r24, 0xFB	; 251
 5c2:	80 83       	st	Z, r24

	SPCR = (1 << MSTR) | (1<< CPHA) | (1 << CPOL) | (1 << SPE) | (1 << SPR0);
 5c4:	8d e5       	ldi	r24, 0x5D	; 93
 5c6:	8c bd       	out	0x2c, r24	; 44
 5c8:	08 95       	ret

000005ca <spi_trancieve>:
}

void spi_trancieve(uint8_t* tx_buffer, uint8_t* rx_buffer, int length) {
	SPI_PORT &= ~(1 << SS_PIN);
 5ca:	2f 98       	cbi	0x05, 7	; 5
	
	for(int i = 0; i < length; i++) {
 5cc:	14 16       	cp	r1, r20
 5ce:	15 06       	cpc	r1, r21
 5d0:	94 f4       	brge	.+36     	; 0x5f6 <spi_trancieve+0x2c>
 5d2:	fc 01       	movw	r30, r24
 5d4:	db 01       	movw	r26, r22
 5d6:	48 0f       	add	r20, r24
 5d8:	59 1f       	adc	r21, r25
		SPDR = tx_buffer[i];
 5da:	91 91       	ld	r25, Z+
 5dc:	9e bd       	out	0x2e, r25	; 46
		
		// Wait for word transmission to complete
		while (!(SPSR & (1 << SPIF))) { };
 5de:	0d b4       	in	r0, 0x2d	; 45
 5e0:	07 fe       	sbrs	r0, 7
 5e2:	fd cf       	rjmp	.-6      	; 0x5de <spi_trancieve+0x14>

		if (rx_buffer != NULL) {
 5e4:	61 15       	cp	r22, r1
 5e6:	71 05       	cpc	r23, r1
 5e8:	11 f0       	breq	.+4      	; 0x5ee <spi_trancieve+0x24>
			rx_buffer[i] = SPDR;
 5ea:	9e b5       	in	r25, 0x2e	; 46
 5ec:	9c 93       	st	X, r25
 5ee:	11 96       	adiw	r26, 0x01	; 1
}

void spi_trancieve(uint8_t* tx_buffer, uint8_t* rx_buffer, int length) {
	SPI_PORT &= ~(1 << SS_PIN);
	
	for(int i = 0; i < length; i++) {
 5f0:	e4 17       	cp	r30, r20
 5f2:	f5 07       	cpc	r31, r21
 5f4:	91 f7       	brne	.-28     	; 0x5da <spi_trancieve+0x10>
		if (rx_buffer != NULL) {
			rx_buffer[i] = SPDR;
		}
	}

	SPI_PORT |= (1 << SS_PIN);
 5f6:	2f 9a       	sbi	0x05, 7	; 5
 5f8:	08 95       	ret

000005fa <delay_var_us>:
#include "drivers/pwm.h"
#include "drivers/adc.h"
#include "drivers/motor.h"
#include "drivers/shooter.h"

void delay_var_us(int us) {
 5fa:	cf 93       	push	r28
 5fc:	df 93       	push	r29
 5fe:	1f 92       	push	r1
 600:	1f 92       	push	r1
 602:	cd b7       	in	r28, 0x3d	; 61
 604:	de b7       	in	r29, 0x3e	; 62
	for(volatile int i = 0; i < us; i++) {
 606:	1a 82       	std	Y+2, r1	; 0x02
 608:	19 82       	std	Y+1, r1	; 0x01
 60a:	29 81       	ldd	r18, Y+1	; 0x01
 60c:	3a 81       	ldd	r19, Y+2	; 0x02
 60e:	28 17       	cp	r18, r24
 610:	39 07       	cpc	r19, r25
 612:	7c f4       	brge	.+30     	; 0x632 <delay_var_us+0x38>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 614:	25 e0       	ldi	r18, 0x05	; 5
 616:	2a 95       	dec	r18
 618:	f1 f7       	brne	.-4      	; 0x616 <delay_var_us+0x1c>
 61a:	00 00       	nop
 61c:	29 81       	ldd	r18, Y+1	; 0x01
 61e:	3a 81       	ldd	r19, Y+2	; 0x02
 620:	2f 5f       	subi	r18, 0xFF	; 255
 622:	3f 4f       	sbci	r19, 0xFF	; 255
 624:	3a 83       	std	Y+2, r19	; 0x02
 626:	29 83       	std	Y+1, r18	; 0x01
 628:	29 81       	ldd	r18, Y+1	; 0x01
 62a:	3a 81       	ldd	r19, Y+2	; 0x02
 62c:	28 17       	cp	r18, r24
 62e:	39 07       	cpc	r19, r25
 630:	8c f3       	brlt	.-30     	; 0x614 <delay_var_us+0x1a>
		_delay_us(1);
	}
}
 632:	0f 90       	pop	r0
 634:	0f 90       	pop	r0
 636:	df 91       	pop	r29
 638:	cf 91       	pop	r28
 63a:	08 95       	ret

0000063c <buzz>:
	12, 12, 12, 12,
	12, 12, 12, 12,
	12, 12, 12, 12,
};

void buzz(long frequency, long length) {
 63c:	4f 92       	push	r4
 63e:	5f 92       	push	r5
 640:	6f 92       	push	r6
 642:	7f 92       	push	r7
 644:	8f 92       	push	r8
 646:	9f 92       	push	r9
 648:	af 92       	push	r10
 64a:	bf 92       	push	r11
 64c:	cf 92       	push	r12
 64e:	df 92       	push	r13
 650:	ef 92       	push	r14
 652:	ff 92       	push	r15
 654:	0f 93       	push	r16
 656:	1f 93       	push	r17
 658:	cf 93       	push	r28
 65a:	df 93       	push	r29
 65c:	4b 01       	movw	r8, r22
 65e:	5c 01       	movw	r10, r24
 660:	29 01       	movw	r4, r18
 662:	3a 01       	movw	r6, r20
	long delayValue = 1000000 / frequency / 2;
 664:	60 e2       	ldi	r22, 0x20	; 32
 666:	71 ea       	ldi	r23, 0xA1	; 161
 668:	87 e0       	ldi	r24, 0x07	; 7
 66a:	90 e0       	ldi	r25, 0x00	; 0
 66c:	a5 01       	movw	r20, r10
 66e:	94 01       	movw	r18, r8
 670:	00 d2       	rcall	.+1024   	; 0xa72 <__divmodsi4>
 672:	69 01       	movw	r12, r18
 674:	7a 01       	movw	r14, r20
	long numCycles = frequency * length / 1000;
 676:	a5 01       	movw	r20, r10
 678:	94 01       	movw	r18, r8
 67a:	c3 01       	movw	r24, r6
 67c:	b2 01       	movw	r22, r4
 67e:	b5 d1       	rcall	.+874    	; 0x9ea <__mulsi3>
 680:	28 ee       	ldi	r18, 0xE8	; 232
 682:	33 e0       	ldi	r19, 0x03	; 3
 684:	40 e0       	ldi	r20, 0x00	; 0
 686:	50 e0       	ldi	r21, 0x00	; 0
 688:	f4 d1       	rcall	.+1000   	; 0xa72 <__divmodsi4>

	for (long i = 0; i < numCycles; i++) {
 68a:	12 16       	cp	r1, r18
 68c:	13 06       	cpc	r1, r19
 68e:	14 06       	cpc	r1, r20
 690:	15 06       	cpc	r1, r21
 692:	a4 f5       	brge	.+104    	; 0x6fc <buzz+0xc0>
 694:	29 01       	movw	r4, r18
 696:	3a 01       	movw	r6, r20
 698:	d7 01       	movw	r26, r14
 69a:	c6 01       	movw	r24, r12
 69c:	c1 2c       	mov	r12, r1
 69e:	d1 2c       	mov	r13, r1
 6a0:	76 01       	movw	r14, r12
		motor_set((frequency != -1) ? motor_amplitude : 0, DIR_LEFT);
		delay_var_us(delayValue);
 6a2:	d8 2f       	mov	r29, r24
 6a4:	c9 2f       	mov	r28, r25
void buzz(long frequency, long length) {
	long delayValue = 1000000 / frequency / 2;
	long numCycles = frequency * length / 1000;

	for (long i = 0; i < numCycles; i++) {
		motor_set((frequency != -1) ? motor_amplitude : 0, DIR_LEFT);
 6a6:	8f ef       	ldi	r24, 0xFF	; 255
 6a8:	88 16       	cp	r8, r24
 6aa:	98 06       	cpc	r9, r24
 6ac:	a8 06       	cpc	r10, r24
 6ae:	b8 06       	cpc	r11, r24
 6b0:	89 f4       	brne	.+34     	; 0x6d4 <buzz+0x98>
		delay_var_us(delayValue);
		motor_set((frequency != -1) ? motor_amplitude : 0, DIR_RIGHT);
 6b2:	1a c0       	rjmp	.+52     	; 0x6e8 <buzz+0xac>
 6b4:	61 e0       	ldi	r22, 0x01	; 1
		delay_var_us(delayValue);
 6b6:	4e de       	rcall	.-868    	; 0x354 <motor_set>
 6b8:	80 2f       	mov	r24, r16
 6ba:	91 2f       	mov	r25, r17
 6bc:	9e df       	rcall	.-196    	; 0x5fa <delay_var_us>

void buzz(long frequency, long length) {
	long delayValue = 1000000 / frequency / 2;
	long numCycles = frequency * length / 1000;

	for (long i = 0; i < numCycles; i++) {
 6be:	8f ef       	ldi	r24, 0xFF	; 255
 6c0:	c8 1a       	sub	r12, r24
 6c2:	d8 0a       	sbc	r13, r24
 6c4:	e8 0a       	sbc	r14, r24
 6c6:	f8 0a       	sbc	r15, r24
 6c8:	4c 14       	cp	r4, r12
 6ca:	5d 04       	cpc	r5, r13
 6cc:	6e 04       	cpc	r6, r14
 6ce:	7f 04       	cpc	r7, r15
 6d0:	51 f7       	brne	.-44     	; 0x6a6 <buzz+0x6a>
		motor_set((frequency != -1) ? motor_amplitude : 0, DIR_LEFT);
 6d2:	14 c0       	rjmp	.+40     	; 0x6fc <buzz+0xc0>
 6d4:	60 e0       	ldi	r22, 0x00	; 0
 6d6:	82 e3       	ldi	r24, 0x32	; 50
		delay_var_us(delayValue);
 6d8:	3d de       	rcall	.-902    	; 0x354 <motor_set>
 6da:	0d 2f       	mov	r16, r29
 6dc:	1c 2f       	mov	r17, r28
 6de:	8d 2f       	mov	r24, r29
 6e0:	9c 2f       	mov	r25, r28
		motor_set((frequency != -1) ? motor_amplitude : 0, DIR_RIGHT);
 6e2:	8b df       	rcall	.-234    	; 0x5fa <delay_var_us>
void buzz(long frequency, long length) {
	long delayValue = 1000000 / frequency / 2;
	long numCycles = frequency * length / 1000;

	for (long i = 0; i < numCycles; i++) {
		motor_set((frequency != -1) ? motor_amplitude : 0, DIR_LEFT);
 6e4:	82 e3       	ldi	r24, 0x32	; 50
 6e6:	e6 cf       	rjmp	.-52     	; 0x6b4 <buzz+0x78>
 6e8:	60 e0       	ldi	r22, 0x00	; 0
		delay_var_us(delayValue);
 6ea:	80 e0       	ldi	r24, 0x00	; 0
 6ec:	33 de       	rcall	.-922    	; 0x354 <motor_set>
 6ee:	0d 2f       	mov	r16, r29
 6f0:	1c 2f       	mov	r17, r28
 6f2:	8d 2f       	mov	r24, r29
 6f4:	9c 2f       	mov	r25, r28
		motor_set((frequency != -1) ? motor_amplitude : 0, DIR_RIGHT);
 6f6:	81 df       	rcall	.-254    	; 0x5fa <delay_var_us>
 6f8:	80 e0       	ldi	r24, 0x00	; 0
		delay_var_us(delayValue);
	}
	
	//motor_set(0, DIR_RIGHT);
}
 6fa:	dc cf       	rjmp	.-72     	; 0x6b4 <buzz+0x78>
 6fc:	df 91       	pop	r29
 6fe:	cf 91       	pop	r28
 700:	1f 91       	pop	r17
 702:	0f 91       	pop	r16
 704:	ff 90       	pop	r15
 706:	ef 90       	pop	r14
 708:	df 90       	pop	r13
 70a:	cf 90       	pop	r12
 70c:	bf 90       	pop	r11
 70e:	af 90       	pop	r10
 710:	9f 90       	pop	r9
 712:	8f 90       	pop	r8
 714:	7f 90       	pop	r7
 716:	6f 90       	pop	r6
 718:	5f 90       	pop	r5
 71a:	4f 90       	pop	r4
 71c:	08 95       	ret

0000071e <main>:

	spi_init();
	can_init();
	pwm_init();
	adc_init();
	adc_init_channel(AdcCh_CH0);
 71e:	47 df       	rcall	.-370    	; 0x5ae <spi_init>
 720:	b8 dd       	rcall	.-1168   	; 0x292 <can_init>
	motor_init();
 722:	31 df       	rcall	.-414    	; 0x586 <pwm_init>
 724:	50 dd       	rcall	.-1376   	; 0x1c6 <adc_init>
	shooter_init();
 726:	80 e0       	ldi	r24, 0x00	; 0
 728:	58 dd       	rcall	.-1360   	; 0x1da <adc_init_channel>

	sei();
 72a:	eb dd       	rcall	.-1066   	; 0x302 <motor_init>

	
	motor_enable();
 72c:	44 de       	rcall	.-888    	; 0x3b6 <shooter_init>
 72e:	78 94       	sei
 730:	0b de       	rcall	.-1002   	; 0x348 <motor_enable>
 732:	0f 2e       	mov	r0, r31
 734:	fd e9       	ldi	r31, 0x9D	; 157
 736:	cf 2e       	mov	r12, r31
 738:	f2 e0       	ldi	r31, 0x02	; 2
 73a:	df 2e       	mov	r13, r31
		for (int thisNote = 0; thisNote < size; thisNote++) {
			
			// to calculate the note duration, take one second
			// divided by the note type.
			//e.g. quarter note = 1000 / 4, eighth note = 1000/8, etc.
			int noteDuration = 1000 / tempo[thisNote];
 73c:	f0 2d       	mov	r31, r0
 73e:	0f 2e       	mov	r0, r31
 740:	f8 ee       	ldi	r31, 0xE8	; 232
 742:	ef 2e       	mov	r14, r31
 744:	f3 e0       	ldi	r31, 0x03	; 3
 746:	ff 2e       	mov	r15, r31
 748:	f0 2d       	mov	r31, r0
 74a:	c1 e0       	ldi	r28, 0x01	; 1
 74c:	d2 e0       	ldi	r29, 0x02	; 2
 74e:	0d e9       	ldi	r16, 0x9D	; 157
 750:	12 e0       	ldi	r17, 0x02	; 2
 752:	69 91       	ld	r22, Y+
 754:	79 91       	ld	r23, Y+
 756:	c7 01       	movw	r24, r14
 758:	57 d1       	rcall	.+686    	; 0xa08 <__divmodhi4>
			
			buzz(melody[thisNote], noteDuration);
 75a:	4b 01       	movw	r8, r22
 75c:	f8 01       	movw	r30, r16
 75e:	61 91       	ld	r22, Z+
 760:	71 91       	ld	r23, Z+
 762:	8f 01       	movw	r16, r30
 764:	09 2c       	mov	r0, r9
 766:	00 0c       	add	r0, r0
 768:	aa 08       	sbc	r10, r10
 76a:	bb 08       	sbc	r11, r11
 76c:	07 2e       	mov	r0, r23
 76e:	00 0c       	add	r0, r0
 770:	88 0b       	sbc	r24, r24
			
			// to distinguish the notes, set a minimum time between them.
			// the note's duration + 30% seems to work well:
			int pauseBetweenNotes = noteDuration * 1.30;
			delay_var_us(1000 * pauseBetweenNotes);
 772:	99 0b       	sbc	r25, r25
 774:	a5 01       	movw	r20, r10
 776:	94 01       	movw	r18, r8
 778:	61 df       	rcall	.-318    	; 0x63c <buzz>
 77a:	c5 01       	movw	r24, r10
 77c:	b4 01       	movw	r22, r8
 77e:	46 d0       	rcall	.+140    	; 0x80c <__floatsisf>
 780:	26 e6       	ldi	r18, 0x66	; 102
 782:	36 e6       	ldi	r19, 0x66	; 102
 784:	46 ea       	ldi	r20, 0xA6	; 166
 786:	5f e3       	ldi	r21, 0x3F	; 63
 788:	a5 d0       	rcall	.+330    	; 0x8d4 <__mulsf3>
 78a:	0d d0       	rcall	.+26     	; 0x7a6 <__fixsfsi>
 78c:	e6 9e       	mul	r14, r22
 78e:	90 01       	movw	r18, r0
 790:	e7 9e       	mul	r14, r23
 792:	30 0d       	add	r19, r0
 794:	f6 9e       	mul	r15, r22
 796:	30 0d       	add	r19, r0
 798:	11 24       	eor	r1, r1
 79a:	c9 01       	movw	r24, r18
	
	
	while (1)
	{
		int size = sizeof(melody) / sizeof(int);
		for (int thisNote = 0; thisNote < size; thisNote++) {
 79c:	2e df       	rcall	.-420    	; 0x5fa <delay_var_us>
 79e:	cc 15       	cp	r28, r12
 7a0:	dd 05       	cpc	r29, r13
 7a2:	b9 f6       	brne	.-82     	; 0x752 <main+0x34>
 7a4:	d2 cf       	rjmp	.-92     	; 0x74a <main+0x2c>

000007a6 <__fixsfsi>:
 7a6:	04 d0       	rcall	.+8      	; 0x7b0 <__fixunssfsi>
 7a8:	68 94       	set
 7aa:	b1 11       	cpse	r27, r1
 7ac:	8d c0       	rjmp	.+282    	; 0x8c8 <__fp_szero>
 7ae:	08 95       	ret

000007b0 <__fixunssfsi>:
 7b0:	70 d0       	rcall	.+224    	; 0x892 <__fp_splitA>
 7b2:	88 f0       	brcs	.+34     	; 0x7d6 <__fixunssfsi+0x26>
 7b4:	9f 57       	subi	r25, 0x7F	; 127
 7b6:	90 f0       	brcs	.+36     	; 0x7dc <__fixunssfsi+0x2c>
 7b8:	b9 2f       	mov	r27, r25
 7ba:	99 27       	eor	r25, r25
 7bc:	b7 51       	subi	r27, 0x17	; 23
 7be:	a0 f0       	brcs	.+40     	; 0x7e8 <__fixunssfsi+0x38>
 7c0:	d1 f0       	breq	.+52     	; 0x7f6 <__fixunssfsi+0x46>
 7c2:	66 0f       	add	r22, r22
 7c4:	77 1f       	adc	r23, r23
 7c6:	88 1f       	adc	r24, r24
 7c8:	99 1f       	adc	r25, r25
 7ca:	1a f0       	brmi	.+6      	; 0x7d2 <__fixunssfsi+0x22>
 7cc:	ba 95       	dec	r27
 7ce:	c9 f7       	brne	.-14     	; 0x7c2 <__fixunssfsi+0x12>
 7d0:	12 c0       	rjmp	.+36     	; 0x7f6 <__fixunssfsi+0x46>
 7d2:	b1 30       	cpi	r27, 0x01	; 1
 7d4:	81 f0       	breq	.+32     	; 0x7f6 <__fixunssfsi+0x46>
 7d6:	77 d0       	rcall	.+238    	; 0x8c6 <__fp_zero>
 7d8:	b1 e0       	ldi	r27, 0x01	; 1
 7da:	08 95       	ret
 7dc:	74 c0       	rjmp	.+232    	; 0x8c6 <__fp_zero>
 7de:	67 2f       	mov	r22, r23
 7e0:	78 2f       	mov	r23, r24
 7e2:	88 27       	eor	r24, r24
 7e4:	b8 5f       	subi	r27, 0xF8	; 248
 7e6:	39 f0       	breq	.+14     	; 0x7f6 <__fixunssfsi+0x46>
 7e8:	b9 3f       	cpi	r27, 0xF9	; 249
 7ea:	cc f3       	brlt	.-14     	; 0x7de <__fixunssfsi+0x2e>
 7ec:	86 95       	lsr	r24
 7ee:	77 95       	ror	r23
 7f0:	67 95       	ror	r22
 7f2:	b3 95       	inc	r27
 7f4:	d9 f7       	brne	.-10     	; 0x7ec <__fixunssfsi+0x3c>
 7f6:	3e f4       	brtc	.+14     	; 0x806 <__fixunssfsi+0x56>
 7f8:	90 95       	com	r25
 7fa:	80 95       	com	r24
 7fc:	70 95       	com	r23
 7fe:	61 95       	neg	r22
 800:	7f 4f       	sbci	r23, 0xFF	; 255
 802:	8f 4f       	sbci	r24, 0xFF	; 255
 804:	9f 4f       	sbci	r25, 0xFF	; 255
 806:	08 95       	ret

00000808 <__floatunsisf>:
 808:	e8 94       	clt
 80a:	09 c0       	rjmp	.+18     	; 0x81e <__floatsisf+0x12>

0000080c <__floatsisf>:
 80c:	97 fb       	bst	r25, 7
 80e:	3e f4       	brtc	.+14     	; 0x81e <__floatsisf+0x12>
 810:	90 95       	com	r25
 812:	80 95       	com	r24
 814:	70 95       	com	r23
 816:	61 95       	neg	r22
 818:	7f 4f       	sbci	r23, 0xFF	; 255
 81a:	8f 4f       	sbci	r24, 0xFF	; 255
 81c:	9f 4f       	sbci	r25, 0xFF	; 255
 81e:	99 23       	and	r25, r25
 820:	a9 f0       	breq	.+42     	; 0x84c <__floatsisf+0x40>
 822:	f9 2f       	mov	r31, r25
 824:	96 e9       	ldi	r25, 0x96	; 150
 826:	bb 27       	eor	r27, r27
 828:	93 95       	inc	r25
 82a:	f6 95       	lsr	r31
 82c:	87 95       	ror	r24
 82e:	77 95       	ror	r23
 830:	67 95       	ror	r22
 832:	b7 95       	ror	r27
 834:	f1 11       	cpse	r31, r1
 836:	f8 cf       	rjmp	.-16     	; 0x828 <__floatsisf+0x1c>
 838:	fa f4       	brpl	.+62     	; 0x878 <__floatsisf+0x6c>
 83a:	bb 0f       	add	r27, r27
 83c:	11 f4       	brne	.+4      	; 0x842 <__floatsisf+0x36>
 83e:	60 ff       	sbrs	r22, 0
 840:	1b c0       	rjmp	.+54     	; 0x878 <__floatsisf+0x6c>
 842:	6f 5f       	subi	r22, 0xFF	; 255
 844:	7f 4f       	sbci	r23, 0xFF	; 255
 846:	8f 4f       	sbci	r24, 0xFF	; 255
 848:	9f 4f       	sbci	r25, 0xFF	; 255
 84a:	16 c0       	rjmp	.+44     	; 0x878 <__floatsisf+0x6c>
 84c:	88 23       	and	r24, r24
 84e:	11 f0       	breq	.+4      	; 0x854 <__floatsisf+0x48>
 850:	96 e9       	ldi	r25, 0x96	; 150
 852:	11 c0       	rjmp	.+34     	; 0x876 <__floatsisf+0x6a>
 854:	77 23       	and	r23, r23
 856:	21 f0       	breq	.+8      	; 0x860 <__floatsisf+0x54>
 858:	9e e8       	ldi	r25, 0x8E	; 142
 85a:	87 2f       	mov	r24, r23
 85c:	76 2f       	mov	r23, r22
 85e:	05 c0       	rjmp	.+10     	; 0x86a <__floatsisf+0x5e>
 860:	66 23       	and	r22, r22
 862:	71 f0       	breq	.+28     	; 0x880 <__floatsisf+0x74>
 864:	96 e8       	ldi	r25, 0x86	; 134
 866:	86 2f       	mov	r24, r22
 868:	70 e0       	ldi	r23, 0x00	; 0
 86a:	60 e0       	ldi	r22, 0x00	; 0
 86c:	2a f0       	brmi	.+10     	; 0x878 <__floatsisf+0x6c>
 86e:	9a 95       	dec	r25
 870:	66 0f       	add	r22, r22
 872:	77 1f       	adc	r23, r23
 874:	88 1f       	adc	r24, r24
 876:	da f7       	brpl	.-10     	; 0x86e <__floatsisf+0x62>
 878:	88 0f       	add	r24, r24
 87a:	96 95       	lsr	r25
 87c:	87 95       	ror	r24
 87e:	97 f9       	bld	r25, 7
 880:	08 95       	ret

00000882 <__fp_split3>:
 882:	57 fd       	sbrc	r21, 7
 884:	90 58       	subi	r25, 0x80	; 128
 886:	44 0f       	add	r20, r20
 888:	55 1f       	adc	r21, r21
 88a:	59 f0       	breq	.+22     	; 0x8a2 <__fp_splitA+0x10>
 88c:	5f 3f       	cpi	r21, 0xFF	; 255
 88e:	71 f0       	breq	.+28     	; 0x8ac <__fp_splitA+0x1a>
 890:	47 95       	ror	r20

00000892 <__fp_splitA>:
 892:	88 0f       	add	r24, r24
 894:	97 fb       	bst	r25, 7
 896:	99 1f       	adc	r25, r25
 898:	61 f0       	breq	.+24     	; 0x8b2 <__fp_splitA+0x20>
 89a:	9f 3f       	cpi	r25, 0xFF	; 255
 89c:	79 f0       	breq	.+30     	; 0x8bc <__fp_splitA+0x2a>
 89e:	87 95       	ror	r24
 8a0:	08 95       	ret
 8a2:	12 16       	cp	r1, r18
 8a4:	13 06       	cpc	r1, r19
 8a6:	14 06       	cpc	r1, r20
 8a8:	55 1f       	adc	r21, r21
 8aa:	f2 cf       	rjmp	.-28     	; 0x890 <__fp_split3+0xe>
 8ac:	46 95       	lsr	r20
 8ae:	f1 df       	rcall	.-30     	; 0x892 <__fp_splitA>
 8b0:	08 c0       	rjmp	.+16     	; 0x8c2 <__fp_splitA+0x30>
 8b2:	16 16       	cp	r1, r22
 8b4:	17 06       	cpc	r1, r23
 8b6:	18 06       	cpc	r1, r24
 8b8:	99 1f       	adc	r25, r25
 8ba:	f1 cf       	rjmp	.-30     	; 0x89e <__fp_splitA+0xc>
 8bc:	86 95       	lsr	r24
 8be:	71 05       	cpc	r23, r1
 8c0:	61 05       	cpc	r22, r1
 8c2:	08 94       	sec
 8c4:	08 95       	ret

000008c6 <__fp_zero>:
 8c6:	e8 94       	clt

000008c8 <__fp_szero>:
 8c8:	bb 27       	eor	r27, r27
 8ca:	66 27       	eor	r22, r22
 8cc:	77 27       	eor	r23, r23
 8ce:	cb 01       	movw	r24, r22
 8d0:	97 f9       	bld	r25, 7
 8d2:	08 95       	ret

000008d4 <__mulsf3>:
 8d4:	0b d0       	rcall	.+22     	; 0x8ec <__mulsf3x>
 8d6:	78 c0       	rjmp	.+240    	; 0x9c8 <__fp_round>
 8d8:	69 d0       	rcall	.+210    	; 0x9ac <__fp_pscA>
 8da:	28 f0       	brcs	.+10     	; 0x8e6 <__mulsf3+0x12>
 8dc:	6e d0       	rcall	.+220    	; 0x9ba <__fp_pscB>
 8de:	18 f0       	brcs	.+6      	; 0x8e6 <__mulsf3+0x12>
 8e0:	95 23       	and	r25, r21
 8e2:	09 f0       	breq	.+2      	; 0x8e6 <__mulsf3+0x12>
 8e4:	5a c0       	rjmp	.+180    	; 0x99a <__fp_inf>
 8e6:	5f c0       	rjmp	.+190    	; 0x9a6 <__fp_nan>
 8e8:	11 24       	eor	r1, r1
 8ea:	ee cf       	rjmp	.-36     	; 0x8c8 <__fp_szero>

000008ec <__mulsf3x>:
 8ec:	ca df       	rcall	.-108    	; 0x882 <__fp_split3>
 8ee:	a0 f3       	brcs	.-24     	; 0x8d8 <__mulsf3+0x4>

000008f0 <__mulsf3_pse>:
 8f0:	95 9f       	mul	r25, r21
 8f2:	d1 f3       	breq	.-12     	; 0x8e8 <__mulsf3+0x14>
 8f4:	95 0f       	add	r25, r21
 8f6:	50 e0       	ldi	r21, 0x00	; 0
 8f8:	55 1f       	adc	r21, r21
 8fa:	62 9f       	mul	r22, r18
 8fc:	f0 01       	movw	r30, r0
 8fe:	72 9f       	mul	r23, r18
 900:	bb 27       	eor	r27, r27
 902:	f0 0d       	add	r31, r0
 904:	b1 1d       	adc	r27, r1
 906:	63 9f       	mul	r22, r19
 908:	aa 27       	eor	r26, r26
 90a:	f0 0d       	add	r31, r0
 90c:	b1 1d       	adc	r27, r1
 90e:	aa 1f       	adc	r26, r26
 910:	64 9f       	mul	r22, r20
 912:	66 27       	eor	r22, r22
 914:	b0 0d       	add	r27, r0
 916:	a1 1d       	adc	r26, r1
 918:	66 1f       	adc	r22, r22
 91a:	82 9f       	mul	r24, r18
 91c:	22 27       	eor	r18, r18
 91e:	b0 0d       	add	r27, r0
 920:	a1 1d       	adc	r26, r1
 922:	62 1f       	adc	r22, r18
 924:	73 9f       	mul	r23, r19
 926:	b0 0d       	add	r27, r0
 928:	a1 1d       	adc	r26, r1
 92a:	62 1f       	adc	r22, r18
 92c:	83 9f       	mul	r24, r19
 92e:	a0 0d       	add	r26, r0
 930:	61 1d       	adc	r22, r1
 932:	22 1f       	adc	r18, r18
 934:	74 9f       	mul	r23, r20
 936:	33 27       	eor	r19, r19
 938:	a0 0d       	add	r26, r0
 93a:	61 1d       	adc	r22, r1
 93c:	23 1f       	adc	r18, r19
 93e:	84 9f       	mul	r24, r20
 940:	60 0d       	add	r22, r0
 942:	21 1d       	adc	r18, r1
 944:	82 2f       	mov	r24, r18
 946:	76 2f       	mov	r23, r22
 948:	6a 2f       	mov	r22, r26
 94a:	11 24       	eor	r1, r1
 94c:	9f 57       	subi	r25, 0x7F	; 127
 94e:	50 40       	sbci	r21, 0x00	; 0
 950:	8a f0       	brmi	.+34     	; 0x974 <__mulsf3_pse+0x84>
 952:	e1 f0       	breq	.+56     	; 0x98c <__mulsf3_pse+0x9c>
 954:	88 23       	and	r24, r24
 956:	4a f0       	brmi	.+18     	; 0x96a <__mulsf3_pse+0x7a>
 958:	ee 0f       	add	r30, r30
 95a:	ff 1f       	adc	r31, r31
 95c:	bb 1f       	adc	r27, r27
 95e:	66 1f       	adc	r22, r22
 960:	77 1f       	adc	r23, r23
 962:	88 1f       	adc	r24, r24
 964:	91 50       	subi	r25, 0x01	; 1
 966:	50 40       	sbci	r21, 0x00	; 0
 968:	a9 f7       	brne	.-22     	; 0x954 <__mulsf3_pse+0x64>
 96a:	9e 3f       	cpi	r25, 0xFE	; 254
 96c:	51 05       	cpc	r21, r1
 96e:	70 f0       	brcs	.+28     	; 0x98c <__mulsf3_pse+0x9c>
 970:	14 c0       	rjmp	.+40     	; 0x99a <__fp_inf>
 972:	aa cf       	rjmp	.-172    	; 0x8c8 <__fp_szero>
 974:	5f 3f       	cpi	r21, 0xFF	; 255
 976:	ec f3       	brlt	.-6      	; 0x972 <__mulsf3_pse+0x82>
 978:	98 3e       	cpi	r25, 0xE8	; 232
 97a:	dc f3       	brlt	.-10     	; 0x972 <__mulsf3_pse+0x82>
 97c:	86 95       	lsr	r24
 97e:	77 95       	ror	r23
 980:	67 95       	ror	r22
 982:	b7 95       	ror	r27
 984:	f7 95       	ror	r31
 986:	e7 95       	ror	r30
 988:	9f 5f       	subi	r25, 0xFF	; 255
 98a:	c1 f7       	brne	.-16     	; 0x97c <__mulsf3_pse+0x8c>
 98c:	fe 2b       	or	r31, r30
 98e:	88 0f       	add	r24, r24
 990:	91 1d       	adc	r25, r1
 992:	96 95       	lsr	r25
 994:	87 95       	ror	r24
 996:	97 f9       	bld	r25, 7
 998:	08 95       	ret

0000099a <__fp_inf>:
 99a:	97 f9       	bld	r25, 7
 99c:	9f 67       	ori	r25, 0x7F	; 127
 99e:	80 e8       	ldi	r24, 0x80	; 128
 9a0:	70 e0       	ldi	r23, 0x00	; 0
 9a2:	60 e0       	ldi	r22, 0x00	; 0
 9a4:	08 95       	ret

000009a6 <__fp_nan>:
 9a6:	9f ef       	ldi	r25, 0xFF	; 255
 9a8:	80 ec       	ldi	r24, 0xC0	; 192
 9aa:	08 95       	ret

000009ac <__fp_pscA>:
 9ac:	00 24       	eor	r0, r0
 9ae:	0a 94       	dec	r0
 9b0:	16 16       	cp	r1, r22
 9b2:	17 06       	cpc	r1, r23
 9b4:	18 06       	cpc	r1, r24
 9b6:	09 06       	cpc	r0, r25
 9b8:	08 95       	ret

000009ba <__fp_pscB>:
 9ba:	00 24       	eor	r0, r0
 9bc:	0a 94       	dec	r0
 9be:	12 16       	cp	r1, r18
 9c0:	13 06       	cpc	r1, r19
 9c2:	14 06       	cpc	r1, r20
 9c4:	05 06       	cpc	r0, r21
 9c6:	08 95       	ret

000009c8 <__fp_round>:
 9c8:	09 2e       	mov	r0, r25
 9ca:	03 94       	inc	r0
 9cc:	00 0c       	add	r0, r0
 9ce:	11 f4       	brne	.+4      	; 0x9d4 <__fp_round+0xc>
 9d0:	88 23       	and	r24, r24
 9d2:	52 f0       	brmi	.+20     	; 0x9e8 <__fp_round+0x20>
 9d4:	bb 0f       	add	r27, r27
 9d6:	40 f4       	brcc	.+16     	; 0x9e8 <__fp_round+0x20>
 9d8:	bf 2b       	or	r27, r31
 9da:	11 f4       	brne	.+4      	; 0x9e0 <__fp_round+0x18>
 9dc:	60 ff       	sbrs	r22, 0
 9de:	04 c0       	rjmp	.+8      	; 0x9e8 <__fp_round+0x20>
 9e0:	6f 5f       	subi	r22, 0xFF	; 255
 9e2:	7f 4f       	sbci	r23, 0xFF	; 255
 9e4:	8f 4f       	sbci	r24, 0xFF	; 255
 9e6:	9f 4f       	sbci	r25, 0xFF	; 255
 9e8:	08 95       	ret

000009ea <__mulsi3>:
 9ea:	db 01       	movw	r26, r22
 9ec:	8f 93       	push	r24
 9ee:	9f 93       	push	r25
 9f0:	73 d0       	rcall	.+230    	; 0xad8 <__muluhisi3>
 9f2:	bf 91       	pop	r27
 9f4:	af 91       	pop	r26
 9f6:	a2 9f       	mul	r26, r18
 9f8:	80 0d       	add	r24, r0
 9fa:	91 1d       	adc	r25, r1
 9fc:	a3 9f       	mul	r26, r19
 9fe:	90 0d       	add	r25, r0
 a00:	b2 9f       	mul	r27, r18
 a02:	90 0d       	add	r25, r0
 a04:	11 24       	eor	r1, r1
 a06:	08 95       	ret

00000a08 <__divmodhi4>:
 a08:	97 fb       	bst	r25, 7
 a0a:	07 2e       	mov	r0, r23
 a0c:	16 f4       	brtc	.+4      	; 0xa12 <__divmodhi4+0xa>
 a0e:	00 94       	com	r0
 a10:	06 d0       	rcall	.+12     	; 0xa1e <__divmodhi4_neg1>
 a12:	77 fd       	sbrc	r23, 7
 a14:	08 d0       	rcall	.+16     	; 0xa26 <__divmodhi4_neg2>
 a16:	6a d0       	rcall	.+212    	; 0xaec <__udivmodhi4>
 a18:	07 fc       	sbrc	r0, 7
 a1a:	05 d0       	rcall	.+10     	; 0xa26 <__divmodhi4_neg2>
 a1c:	3e f4       	brtc	.+14     	; 0xa2c <__divmodhi4_exit>

00000a1e <__divmodhi4_neg1>:
 a1e:	90 95       	com	r25
 a20:	81 95       	neg	r24
 a22:	9f 4f       	sbci	r25, 0xFF	; 255
 a24:	08 95       	ret

00000a26 <__divmodhi4_neg2>:
 a26:	70 95       	com	r23
 a28:	61 95       	neg	r22
 a2a:	7f 4f       	sbci	r23, 0xFF	; 255

00000a2c <__divmodhi4_exit>:
 a2c:	08 95       	ret

00000a2e <__udivmodsi4>:
 a2e:	a1 e2       	ldi	r26, 0x21	; 33
 a30:	1a 2e       	mov	r1, r26
 a32:	aa 1b       	sub	r26, r26
 a34:	bb 1b       	sub	r27, r27
 a36:	fd 01       	movw	r30, r26
 a38:	0d c0       	rjmp	.+26     	; 0xa54 <__udivmodsi4_ep>

00000a3a <__udivmodsi4_loop>:
 a3a:	aa 1f       	adc	r26, r26
 a3c:	bb 1f       	adc	r27, r27
 a3e:	ee 1f       	adc	r30, r30
 a40:	ff 1f       	adc	r31, r31
 a42:	a2 17       	cp	r26, r18
 a44:	b3 07       	cpc	r27, r19
 a46:	e4 07       	cpc	r30, r20
 a48:	f5 07       	cpc	r31, r21
 a4a:	20 f0       	brcs	.+8      	; 0xa54 <__udivmodsi4_ep>
 a4c:	a2 1b       	sub	r26, r18
 a4e:	b3 0b       	sbc	r27, r19
 a50:	e4 0b       	sbc	r30, r20
 a52:	f5 0b       	sbc	r31, r21

00000a54 <__udivmodsi4_ep>:
 a54:	66 1f       	adc	r22, r22
 a56:	77 1f       	adc	r23, r23
 a58:	88 1f       	adc	r24, r24
 a5a:	99 1f       	adc	r25, r25
 a5c:	1a 94       	dec	r1
 a5e:	69 f7       	brne	.-38     	; 0xa3a <__udivmodsi4_loop>
 a60:	60 95       	com	r22
 a62:	70 95       	com	r23
 a64:	80 95       	com	r24
 a66:	90 95       	com	r25
 a68:	9b 01       	movw	r18, r22
 a6a:	ac 01       	movw	r20, r24
 a6c:	bd 01       	movw	r22, r26
 a6e:	cf 01       	movw	r24, r30
 a70:	08 95       	ret

00000a72 <__divmodsi4>:
 a72:	05 2e       	mov	r0, r21
 a74:	97 fb       	bst	r25, 7
 a76:	16 f4       	brtc	.+4      	; 0xa7c <__divmodsi4+0xa>
 a78:	00 94       	com	r0
 a7a:	0f d0       	rcall	.+30     	; 0xa9a <__negsi2>
 a7c:	57 fd       	sbrc	r21, 7
 a7e:	05 d0       	rcall	.+10     	; 0xa8a <__divmodsi4_neg2>
 a80:	d6 df       	rcall	.-84     	; 0xa2e <__udivmodsi4>
 a82:	07 fc       	sbrc	r0, 7
 a84:	02 d0       	rcall	.+4      	; 0xa8a <__divmodsi4_neg2>
 a86:	46 f4       	brtc	.+16     	; 0xa98 <__divmodsi4_exit>
 a88:	08 c0       	rjmp	.+16     	; 0xa9a <__negsi2>

00000a8a <__divmodsi4_neg2>:
 a8a:	50 95       	com	r21
 a8c:	40 95       	com	r20
 a8e:	30 95       	com	r19
 a90:	21 95       	neg	r18
 a92:	3f 4f       	sbci	r19, 0xFF	; 255
 a94:	4f 4f       	sbci	r20, 0xFF	; 255
 a96:	5f 4f       	sbci	r21, 0xFF	; 255

00000a98 <__divmodsi4_exit>:
 a98:	08 95       	ret

00000a9a <__negsi2>:
 a9a:	90 95       	com	r25
 a9c:	80 95       	com	r24
 a9e:	70 95       	com	r23
 aa0:	61 95       	neg	r22
 aa2:	7f 4f       	sbci	r23, 0xFF	; 255
 aa4:	8f 4f       	sbci	r24, 0xFF	; 255
 aa6:	9f 4f       	sbci	r25, 0xFF	; 255
 aa8:	08 95       	ret

00000aaa <__tablejump2__>:
 aaa:	ee 0f       	add	r30, r30
 aac:	ff 1f       	adc	r31, r31
 aae:	88 1f       	adc	r24, r24
 ab0:	8b bf       	out	0x3b, r24	; 59
 ab2:	07 90       	elpm	r0, Z+
 ab4:	f6 91       	elpm	r31, Z
 ab6:	e0 2d       	mov	r30, r0
 ab8:	19 94       	eijmp

00000aba <__umulhisi3>:
 aba:	a2 9f       	mul	r26, r18
 abc:	b0 01       	movw	r22, r0
 abe:	b3 9f       	mul	r27, r19
 ac0:	c0 01       	movw	r24, r0
 ac2:	a3 9f       	mul	r26, r19
 ac4:	70 0d       	add	r23, r0
 ac6:	81 1d       	adc	r24, r1
 ac8:	11 24       	eor	r1, r1
 aca:	91 1d       	adc	r25, r1
 acc:	b2 9f       	mul	r27, r18
 ace:	70 0d       	add	r23, r0
 ad0:	81 1d       	adc	r24, r1
 ad2:	11 24       	eor	r1, r1
 ad4:	91 1d       	adc	r25, r1
 ad6:	08 95       	ret

00000ad8 <__muluhisi3>:
 ad8:	f0 df       	rcall	.-32     	; 0xaba <__umulhisi3>
 ada:	a5 9f       	mul	r26, r21
 adc:	90 0d       	add	r25, r0
 ade:	b4 9f       	mul	r27, r20
 ae0:	90 0d       	add	r25, r0
 ae2:	a4 9f       	mul	r26, r20
 ae4:	80 0d       	add	r24, r0
 ae6:	91 1d       	adc	r25, r1
 ae8:	11 24       	eor	r1, r1
 aea:	08 95       	ret

00000aec <__udivmodhi4>:
 aec:	aa 1b       	sub	r26, r26
 aee:	bb 1b       	sub	r27, r27
 af0:	51 e1       	ldi	r21, 0x11	; 17
 af2:	07 c0       	rjmp	.+14     	; 0xb02 <__udivmodhi4_ep>

00000af4 <__udivmodhi4_loop>:
 af4:	aa 1f       	adc	r26, r26
 af6:	bb 1f       	adc	r27, r27
 af8:	a6 17       	cp	r26, r22
 afa:	b7 07       	cpc	r27, r23
 afc:	10 f0       	brcs	.+4      	; 0xb02 <__udivmodhi4_ep>
 afe:	a6 1b       	sub	r26, r22
 b00:	b7 0b       	sbc	r27, r23

00000b02 <__udivmodhi4_ep>:
 b02:	88 1f       	adc	r24, r24
 b04:	99 1f       	adc	r25, r25
 b06:	5a 95       	dec	r21
 b08:	a9 f7       	brne	.-22     	; 0xaf4 <__udivmodhi4_loop>
 b0a:	80 95       	com	r24
 b0c:	90 95       	com	r25
 b0e:	bc 01       	movw	r22, r24
 b10:	cd 01       	movw	r24, r26
 b12:	08 95       	ret

00000b14 <_exit>:
 b14:	f8 94       	cli

00000b16 <__stop_program>:
 b16:	ff cf       	rjmp	.-2      	; 0xb16 <__stop_program>
