
Node2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  0000066a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000616  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000066a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000069c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000130  00000000  00000000  000006dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001d11  00000000  00000000  0000080c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000011f6  00000000  00000000  0000251d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a94  00000000  00000000  00003713  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000288  00000000  00000000  000041a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000009a0  00000000  00000000  00004430  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007cf  00000000  00000000  00004dd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000100  00000000  00000000  0000559f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	22 e0       	ldi	r18, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	a0 30       	cpi	r26, 0x00	; 0
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>

00000104 <__do_copy_data>:
 104:	12 e0       	ldi	r17, 0x02	; 2
 106:	a0 e0       	ldi	r26, 0x00	; 0
 108:	b2 e0       	ldi	r27, 0x02	; 2
 10a:	e6 e1       	ldi	r30, 0x16	; 22
 10c:	f6 e0       	ldi	r31, 0x06	; 6
 10e:	00 e0       	ldi	r16, 0x00	; 0
 110:	0b bf       	out	0x3b, r16	; 59
 112:	02 c0       	rjmp	.+4      	; 0x118 <__do_copy_data+0x14>
 114:	07 90       	elpm	r0, Z+
 116:	0d 92       	st	X+, r0
 118:	a0 30       	cpi	r26, 0x00	; 0
 11a:	b1 07       	cpc	r27, r17
 11c:	d9 f7       	brne	.-10     	; 0x114 <__do_copy_data+0x10>
 11e:	cb d1       	rcall	.+918    	; 0x4b6 <main>
 120:	78 c2       	rjmp	.+1264   	; 0x612 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <adc_init>:
		PORTF &= ~(1 << channel_number);
	} else {
		DIDR1 |= (1 << (channel_number - 8));
		PORTK |= ~(1 << (channel_number - 8));
	}
}
 124:	80 e4       	ldi	r24, 0x40	; 64
 126:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
 12a:	88 e0       	ldi	r24, 0x08	; 8
 12c:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
 130:	80 e8       	ldi	r24, 0x80	; 128
 132:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
 136:	08 95       	ret

00000138 <adc_read>:

uint16_t adc_read(AdcCh_t channel) {
	//_set_channel(channel);

	ADCSRA |= (1 << ADSC);
 138:	ea e7       	ldi	r30, 0x7A	; 122
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	80 81       	ld	r24, Z
 13e:	80 64       	ori	r24, 0x40	; 64
 140:	80 83       	st	Z, r24

	// Wait for finished conversion
	while (!(ADCSRA & (1 << ADIF))) { };
 142:	80 81       	ld	r24, Z
 144:	84 ff       	sbrs	r24, 4
 146:	fd cf       	rjmp	.-6      	; 0x142 <adc_read+0xa>
	
	return ADC;
 148:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
 14c:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
}
 150:	08 95       	ret

00000152 <can_init>:
#include "can.h"
#include "mcp2515.h"
#include <avr/io.h>


void can_init() {
 152:	bc d0       	rcall	.+376    	; 0x2cc <mcp_reset>
 154:	60 e8       	ldi	r22, 0x80	; 128
 156:	8f e0       	ldi	r24, 0x0F	; 15
 158:	e2 d0       	rcall	.+452    	; 0x31e <mcp_write>
 15a:	60 e2       	ldi	r22, 0x20	; 32
 15c:	8a e2       	ldi	r24, 0x2A	; 42
 15e:	df d0       	rcall	.+446    	; 0x31e <mcp_write>
 160:	62 e9       	ldi	r22, 0x92	; 146
 162:	89 e2       	ldi	r24, 0x29	; 41
 164:	dc d0       	rcall	.+440    	; 0x31e <mcp_write>
 166:	62 ec       	ldi	r22, 0xC2	; 194
 168:	88 e2       	ldi	r24, 0x28	; 40
 16a:	d9 d0       	rcall	.+434    	; 0x31e <mcp_write>
 16c:	60 e0       	ldi	r22, 0x00	; 0
 16e:	8b e2       	ldi	r24, 0x2B	; 43
 170:	d6 d0       	rcall	.+428    	; 0x31e <mcp_write>
 172:	60 e0       	ldi	r22, 0x00	; 0
 174:	8c e2       	ldi	r24, 0x2C	; 44
 176:	d3 d0       	rcall	.+422    	; 0x31e <mcp_write>
 178:	60 e0       	ldi	r22, 0x00	; 0
 17a:	8d e2       	ldi	r24, 0x2D	; 45
 17c:	d0 d0       	rcall	.+416    	; 0x31e <mcp_write>
 17e:	60 e0       	ldi	r22, 0x00	; 0
 180:	8c e0       	ldi	r24, 0x0C	; 12
 182:	cd d0       	rcall	.+410    	; 0x31e <mcp_write>
 184:	60 e0       	ldi	r22, 0x00	; 0
 186:	8d e0       	ldi	r24, 0x0D	; 13
 188:	ca d0       	rcall	.+404    	; 0x31e <mcp_write>
 18a:	60 e0       	ldi	r22, 0x00	; 0
 18c:	80 e6       	ldi	r24, 0x60	; 96
 18e:	c7 d0       	rcall	.+398    	; 0x31e <mcp_write>
 190:	60 e0       	ldi	r22, 0x00	; 0
 192:	80 e7       	ldi	r24, 0x70	; 112
 194:	c4 d0       	rcall	.+392    	; 0x31e <mcp_write>
 196:	60 e0       	ldi	r22, 0x00	; 0
 198:	80 e2       	ldi	r24, 0x20	; 32
 19a:	c1 d0       	rcall	.+386    	; 0x31e <mcp_write>
 19c:	60 e0       	ldi	r22, 0x00	; 0
 19e:	81 e2       	ldi	r24, 0x21	; 33
 1a0:	be d0       	rcall	.+380    	; 0x31e <mcp_write>
 1a2:	60 e0       	ldi	r22, 0x00	; 0
 1a4:	82 e2       	ldi	r24, 0x22	; 34
 1a6:	bb d0       	rcall	.+374    	; 0x31e <mcp_write>
 1a8:	60 e0       	ldi	r22, 0x00	; 0
 1aa:	83 e2       	ldi	r24, 0x23	; 35
 1ac:	b8 d0       	rcall	.+368    	; 0x31e <mcp_write>
 1ae:	64 e0       	ldi	r22, 0x04	; 4
 1b0:	8f e0       	ldi	r24, 0x0F	; 15
 1b2:	b5 c0       	rjmp	.+362    	; 0x31e <mcp_write>
 1b4:	08 95       	ret

000001b6 <can_tx_message>:
 1b6:	cf 92       	push	r12
 1b8:	df 92       	push	r13
 1ba:	ef 92       	push	r14
 1bc:	ff 92       	push	r15
 1be:	1f 93       	push	r17
 1c0:	cf 93       	push	r28
 1c2:	df 93       	push	r29
 1c4:	6c 01       	movw	r12, r24
 1c6:	63 e0       	ldi	r22, 0x03	; 3
 1c8:	80 e3       	ldi	r24, 0x30	; 48
 1ca:	a9 d0       	rcall	.+338    	; 0x31e <mcp_write>
 1cc:	f6 01       	movw	r30, r12
 1ce:	60 81       	ld	r22, Z
 1d0:	71 81       	ldd	r23, Z+1	; 0x01
 1d2:	76 95       	lsr	r23
 1d4:	67 95       	ror	r22
 1d6:	76 95       	lsr	r23
 1d8:	67 95       	ror	r22
 1da:	76 95       	lsr	r23
 1dc:	67 95       	ror	r22
 1de:	81 e3       	ldi	r24, 0x31	; 49
 1e0:	9e d0       	rcall	.+316    	; 0x31e <mcp_write>
 1e2:	f6 01       	movw	r30, r12
 1e4:	60 81       	ld	r22, Z
 1e6:	62 95       	swap	r22
 1e8:	66 0f       	add	r22, r22
 1ea:	60 7e       	andi	r22, 0xE0	; 224
 1ec:	82 e3       	ldi	r24, 0x32	; 50
 1ee:	97 d0       	rcall	.+302    	; 0x31e <mcp_write>
 1f0:	f6 01       	movw	r30, r12
 1f2:	62 81       	ldd	r22, Z+2	; 0x02
 1f4:	85 e3       	ldi	r24, 0x35	; 53
 1f6:	93 d0       	rcall	.+294    	; 0x31e <mcp_write>
 1f8:	f6 01       	movw	r30, r12
 1fa:	82 81       	ldd	r24, Z+2	; 0x02
 1fc:	88 23       	and	r24, r24
 1fe:	a1 f0       	breq	.+40     	; 0x228 <can_tx_message+0x72>
 200:	76 01       	movw	r14, r12
 202:	f3 e0       	ldi	r31, 0x03	; 3
 204:	ef 0e       	add	r14, r31
 206:	f1 1c       	adc	r15, r1
 208:	16 e3       	ldi	r17, 0x36	; 54
 20a:	c0 e0       	ldi	r28, 0x00	; 0
 20c:	d0 e0       	ldi	r29, 0x00	; 0
 20e:	f7 01       	movw	r30, r14
 210:	61 91       	ld	r22, Z+
 212:	7f 01       	movw	r14, r30
 214:	81 2f       	mov	r24, r17
 216:	83 d0       	rcall	.+262    	; 0x31e <mcp_write>
 218:	21 96       	adiw	r28, 0x01	; 1
 21a:	1f 5f       	subi	r17, 0xFF	; 255
 21c:	f6 01       	movw	r30, r12
 21e:	82 81       	ldd	r24, Z+2	; 0x02
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	c8 17       	cp	r28, r24
 224:	d9 07       	cpc	r29, r25
 226:	9c f3       	brlt	.-26     	; 0x20e <can_tx_message+0x58>
 228:	40 e0       	ldi	r20, 0x00	; 0
 22a:	60 e0       	ldi	r22, 0x00	; 0
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	a6 d0       	rcall	.+332    	; 0x37c <mcp_request_to_send>
 230:	df 91       	pop	r29
 232:	cf 91       	pop	r28
 234:	1f 91       	pop	r17
 236:	ff 90       	pop	r15
 238:	ef 90       	pop	r14
 23a:	df 90       	pop	r13
 23c:	cf 90       	pop	r12
 23e:	08 95       	ret

00000240 <can_rx_message>:
 240:	cf 92       	push	r12
 242:	df 92       	push	r13
 244:	ef 92       	push	r14
 246:	ff 92       	push	r15
 248:	1f 93       	push	r17
 24a:	cf 93       	push	r28
 24c:	df 93       	push	r29
 24e:	7c 01       	movw	r14, r24
 250:	af d0       	rcall	.+350    	; 0x3b0 <mcp_read_status>
 252:	80 ff       	sbrs	r24, 0
 254:	32 c0       	rjmp	.+100    	; 0x2ba <can_rx_message+0x7a>
 256:	81 e6       	ldi	r24, 0x61	; 97
 258:	4b d0       	rcall	.+150    	; 0x2f0 <mcp_read>
 25a:	f7 01       	movw	r30, r14
 25c:	10 82       	st	Z, r1
 25e:	81 83       	std	Z+1, r24	; 0x01
 260:	82 e6       	ldi	r24, 0x62	; 98
 262:	46 d0       	rcall	.+140    	; 0x2f0 <mcp_read>
 264:	f7 01       	movw	r30, r14
 266:	20 81       	ld	r18, Z
 268:	31 81       	ldd	r19, Z+1	; 0x01
 26a:	28 2b       	or	r18, r24
 26c:	31 83       	std	Z+1, r19	; 0x01
 26e:	20 83       	st	Z, r18
 270:	85 e6       	ldi	r24, 0x65	; 101
 272:	3e d0       	rcall	.+124    	; 0x2f0 <mcp_read>
 274:	f7 01       	movw	r30, r14
 276:	82 83       	std	Z+2, r24	; 0x02
 278:	89 30       	cpi	r24, 0x09	; 9
 27a:	18 f0       	brcs	.+6      	; 0x282 <can_rx_message+0x42>
 27c:	88 e0       	ldi	r24, 0x08	; 8
 27e:	82 83       	std	Z+2, r24	; 0x02
 280:	02 c0       	rjmp	.+4      	; 0x286 <can_rx_message+0x46>
 282:	88 23       	and	r24, r24
 284:	a1 f0       	breq	.+40     	; 0x2ae <can_rx_message+0x6e>
 286:	67 01       	movw	r12, r14
 288:	f3 e0       	ldi	r31, 0x03	; 3
 28a:	cf 0e       	add	r12, r31
 28c:	d1 1c       	adc	r13, r1
 28e:	16 e6       	ldi	r17, 0x66	; 102
 290:	c0 e0       	ldi	r28, 0x00	; 0
 292:	d0 e0       	ldi	r29, 0x00	; 0
 294:	81 2f       	mov	r24, r17
 296:	2c d0       	rcall	.+88     	; 0x2f0 <mcp_read>
 298:	f6 01       	movw	r30, r12
 29a:	81 93       	st	Z+, r24
 29c:	6f 01       	movw	r12, r30
 29e:	21 96       	adiw	r28, 0x01	; 1
 2a0:	1f 5f       	subi	r17, 0xFF	; 255
 2a2:	f7 01       	movw	r30, r14
 2a4:	82 81       	ldd	r24, Z+2	; 0x02
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	c8 17       	cp	r28, r24
 2aa:	d9 07       	cpc	r29, r25
 2ac:	9c f3       	brlt	.-26     	; 0x294 <can_rx_message+0x54>
 2ae:	40 e0       	ldi	r20, 0x00	; 0
 2b0:	61 e0       	ldi	r22, 0x01	; 1
 2b2:	8c e2       	ldi	r24, 0x2C	; 44
 2b4:	4a d0       	rcall	.+148    	; 0x34a <mcp_modify_bit>
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	01 c0       	rjmp	.+2      	; 0x2bc <can_rx_message+0x7c>
 2ba:	80 e0       	ldi	r24, 0x00	; 0
 2bc:	df 91       	pop	r29
 2be:	cf 91       	pop	r28
 2c0:	1f 91       	pop	r17
 2c2:	ff 90       	pop	r15
 2c4:	ef 90       	pop	r14
 2c6:	df 90       	pop	r13
 2c8:	cf 90       	pop	r12
 2ca:	08 95       	ret

000002cc <mcp_reset>:
	MCP_CMD_REQ_SEND_base = 0x80,
	MCP_CMD_READ_STATUS = 0xA0,
	MCP_CMD_RESET = 0xC0
} McpCommand_t;

void mcp_reset() {
 2cc:	cf 93       	push	r28
 2ce:	df 93       	push	r29
 2d0:	1f 92       	push	r1
 2d2:	cd b7       	in	r28, 0x3d	; 61
 2d4:	de b7       	in	r29, 0x3e	; 62
	uint8_t buffer[] = {MCP_CMD_RESET};
 2d6:	80 ec       	ldi	r24, 0xC0	; 192
 2d8:	89 83       	std	Y+1, r24	; 0x01
	spi_trancieve(buffer, NULL, 1);
 2da:	41 e0       	ldi	r20, 0x01	; 1
 2dc:	50 e0       	ldi	r21, 0x00	; 0
 2de:	60 e0       	ldi	r22, 0x00	; 0
 2e0:	70 e0       	ldi	r23, 0x00	; 0
 2e2:	ce 01       	movw	r24, r28
 2e4:	01 96       	adiw	r24, 0x01	; 1
 2e6:	cf d0       	rcall	.+414    	; 0x486 <spi_trancieve>
}
 2e8:	0f 90       	pop	r0
 2ea:	df 91       	pop	r29
 2ec:	cf 91       	pop	r28
 2ee:	08 95       	ret

000002f0 <mcp_read>:

uint8_t mcp_read(uint8_t addr) {
 2f0:	cf 93       	push	r28
 2f2:	df 93       	push	r29
 2f4:	00 d0       	rcall	.+0      	; 0x2f6 <mcp_read+0x6>
 2f6:	cd b7       	in	r28, 0x3d	; 61
 2f8:	de b7       	in	r29, 0x3e	; 62
	uint8_t buffer[] = {MCP_CMD_READ, addr, 0x00};
 2fa:	93 e0       	ldi	r25, 0x03	; 3
 2fc:	99 83       	std	Y+1, r25	; 0x01
 2fe:	8a 83       	std	Y+2, r24	; 0x02
 300:	1b 82       	std	Y+3, r1	; 0x03
	spi_trancieve(buffer, buffer, 3);
 302:	43 e0       	ldi	r20, 0x03	; 3
 304:	50 e0       	ldi	r21, 0x00	; 0
 306:	be 01       	movw	r22, r28
 308:	6f 5f       	subi	r22, 0xFF	; 255
 30a:	7f 4f       	sbci	r23, 0xFF	; 255
 30c:	cb 01       	movw	r24, r22
 30e:	bb d0       	rcall	.+374    	; 0x486 <spi_trancieve>
	return buffer[2];
}
 310:	8b 81       	ldd	r24, Y+3	; 0x03
 312:	0f 90       	pop	r0
 314:	0f 90       	pop	r0
 316:	0f 90       	pop	r0
 318:	df 91       	pop	r29
 31a:	cf 91       	pop	r28
 31c:	08 95       	ret

0000031e <mcp_write>:


void mcp_write(uint8_t addr, uint8_t value) {
 31e:	cf 93       	push	r28
 320:	df 93       	push	r29
 322:	00 d0       	rcall	.+0      	; 0x324 <mcp_write+0x6>
 324:	cd b7       	in	r28, 0x3d	; 61
 326:	de b7       	in	r29, 0x3e	; 62
	uint8_t buffer[] = {MCP_CMD_WRITE, addr, value};
 328:	92 e0       	ldi	r25, 0x02	; 2
 32a:	99 83       	std	Y+1, r25	; 0x01
 32c:	8a 83       	std	Y+2, r24	; 0x02
 32e:	6b 83       	std	Y+3, r22	; 0x03
	spi_trancieve(buffer, NULL, 3);
 330:	43 e0       	ldi	r20, 0x03	; 3
 332:	50 e0       	ldi	r21, 0x00	; 0
 334:	60 e0       	ldi	r22, 0x00	; 0
 336:	70 e0       	ldi	r23, 0x00	; 0
 338:	ce 01       	movw	r24, r28
 33a:	01 96       	adiw	r24, 0x01	; 1
 33c:	a4 d0       	rcall	.+328    	; 0x486 <spi_trancieve>
}
 33e:	0f 90       	pop	r0
 340:	0f 90       	pop	r0
 342:	0f 90       	pop	r0
 344:	df 91       	pop	r29
 346:	cf 91       	pop	r28
 348:	08 95       	ret

0000034a <mcp_modify_bit>:

void mcp_modify_bit(uint8_t addr, uint8_t mask, uint8_t value) {
 34a:	cf 93       	push	r28
 34c:	df 93       	push	r29
 34e:	00 d0       	rcall	.+0      	; 0x350 <mcp_modify_bit+0x6>
 350:	1f 92       	push	r1
 352:	cd b7       	in	r28, 0x3d	; 61
 354:	de b7       	in	r29, 0x3e	; 62
	uint8_t buffer[] = {MCP_CMD_BIT_MODIFY, addr, mask, value};
 356:	95 e0       	ldi	r25, 0x05	; 5
 358:	99 83       	std	Y+1, r25	; 0x01
 35a:	8a 83       	std	Y+2, r24	; 0x02
 35c:	6b 83       	std	Y+3, r22	; 0x03
 35e:	4c 83       	std	Y+4, r20	; 0x04
	spi_trancieve(buffer, NULL, 4);
 360:	44 e0       	ldi	r20, 0x04	; 4
 362:	50 e0       	ldi	r21, 0x00	; 0
 364:	60 e0       	ldi	r22, 0x00	; 0
 366:	70 e0       	ldi	r23, 0x00	; 0
 368:	ce 01       	movw	r24, r28
 36a:	01 96       	adiw	r24, 0x01	; 1
 36c:	8c d0       	rcall	.+280    	; 0x486 <spi_trancieve>
}
 36e:	0f 90       	pop	r0
 370:	0f 90       	pop	r0
 372:	0f 90       	pop	r0
 374:	0f 90       	pop	r0
 376:	df 91       	pop	r29
 378:	cf 91       	pop	r28
 37a:	08 95       	ret

0000037c <mcp_request_to_send>:

void mcp_request_to_send(bool buffer0, bool buffer1, bool buffer2) {
 37c:	cf 93       	push	r28
 37e:	df 93       	push	r29
 380:	1f 92       	push	r1
 382:	cd b7       	in	r28, 0x3d	; 61
 384:	de b7       	in	r29, 0x3e	; 62
	uint8_t cmd = MCP_CMD_REQ_SEND_base;
	if (buffer0) cmd |= (1 << 0);
 386:	88 23       	and	r24, r24
 388:	11 f0       	breq	.+4      	; 0x38e <mcp_request_to_send+0x12>
 38a:	81 e8       	ldi	r24, 0x81	; 129
 38c:	01 c0       	rjmp	.+2      	; 0x390 <mcp_request_to_send+0x14>
	uint8_t buffer[] = {MCP_CMD_BIT_MODIFY, addr, mask, value};
	spi_trancieve(buffer, NULL, 4);
}

void mcp_request_to_send(bool buffer0, bool buffer1, bool buffer2) {
	uint8_t cmd = MCP_CMD_REQ_SEND_base;
 38e:	80 e8       	ldi	r24, 0x80	; 128
	if (buffer0) cmd |= (1 << 0);
	if (buffer1) cmd |= (1 << 1);
 390:	61 11       	cpse	r22, r1
 392:	82 60       	ori	r24, 0x02	; 2
	if (buffer2) cmd |= (1 << 2);
 394:	41 11       	cpse	r20, r1
 396:	84 60       	ori	r24, 0x04	; 4

	uint8_t buffer[] = {cmd};
 398:	89 83       	std	Y+1, r24	; 0x01

	spi_trancieve(buffer, NULL, 1);
 39a:	41 e0       	ldi	r20, 0x01	; 1
 39c:	50 e0       	ldi	r21, 0x00	; 0
 39e:	60 e0       	ldi	r22, 0x00	; 0
 3a0:	70 e0       	ldi	r23, 0x00	; 0
 3a2:	ce 01       	movw	r24, r28
 3a4:	01 96       	adiw	r24, 0x01	; 1
 3a6:	6f d0       	rcall	.+222    	; 0x486 <spi_trancieve>
}
 3a8:	0f 90       	pop	r0
 3aa:	df 91       	pop	r29
 3ac:	cf 91       	pop	r28
 3ae:	08 95       	ret

000003b0 <mcp_read_status>:

McpStatus_t mcp_read_status() {
 3b0:	1f 93       	push	r17
 3b2:	cf 93       	push	r28
 3b4:	df 93       	push	r29
 3b6:	00 d0       	rcall	.+0      	; 0x3b8 <mcp_read_status+0x8>
 3b8:	cd b7       	in	r28, 0x3d	; 61
 3ba:	de b7       	in	r29, 0x3e	; 62
	// Retry until read succeeds
	while (true) {
		uint8_t buffer[] = {MCP_CMD_READ_STATUS, 0x00, 0x00};
 3bc:	10 ea       	ldi	r17, 0xA0	; 160
 3be:	19 83       	std	Y+1, r17	; 0x01
 3c0:	1a 82       	std	Y+2, r1	; 0x02
 3c2:	1b 82       	std	Y+3, r1	; 0x03
		spi_trancieve(buffer, buffer, 3);
 3c4:	43 e0       	ldi	r20, 0x03	; 3
 3c6:	50 e0       	ldi	r21, 0x00	; 0
 3c8:	be 01       	movw	r22, r28
 3ca:	6f 5f       	subi	r22, 0xFF	; 255
 3cc:	7f 4f       	sbci	r23, 0xFF	; 255
 3ce:	cb 01       	movw	r24, r22
 3d0:	5a d0       	rcall	.+180    	; 0x486 <spi_trancieve>

		if (buffer[1] == buffer[2]) {
 3d2:	9a 81       	ldd	r25, Y+2	; 0x02
 3d4:	8b 81       	ldd	r24, Y+3	; 0x03
 3d6:	98 13       	cpse	r25, r24
 3d8:	f2 cf       	rjmp	.-28     	; 0x3be <mcp_read_status+0xe>
			return *((McpStatus_t*)(buffer + 1));
		}
	}
}
 3da:	89 2f       	mov	r24, r25
 3dc:	0f 90       	pop	r0
 3de:	0f 90       	pop	r0
 3e0:	0f 90       	pop	r0
 3e2:	df 91       	pop	r29
 3e4:	cf 91       	pop	r28
 3e6:	1f 91       	pop	r17
 3e8:	08 95       	ret

000003ea <pwm_init>:
	TCCR1A = (1 << WGM11) | (0 << WGM10) | (1 << COM1B1) | (0 << COM1B0);
	TCCR1B = (1 << WGM13) | (1 << WGM12) | (1 << CS11);
}

void pwm_set_duty_cycle(uint8_t duty_cycle) {
	OCR1B = (uint16_t)((uint32_t)duty_cycle * TC_TOP / 100);
 3ea:	80 e4       	ldi	r24, 0x40	; 64
 3ec:	9c e9       	ldi	r25, 0x9C	; 156
 3ee:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x700087>
 3f2:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x700086>
 3f6:	26 9a       	sbi	0x04, 6	; 4
 3f8:	80 e2       	ldi	r24, 0x20	; 32
 3fa:	9e e4       	ldi	r25, 0x4E	; 78
 3fc:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x70008b>
 400:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x70008a>
 404:	82 e2       	ldi	r24, 0x22	; 34
 406:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
 40a:	8a e1       	ldi	r24, 0x1A	; 26
 40c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
 410:	08 95       	ret

00000412 <pwm_set_pulse_width>:


uint16_t prev_pulse_width;

void pwm_set_pulse_width(uint16_t pulse_width_us) {
	if (pulse_width_us < 900) {
 412:	84 38       	cpi	r24, 0x84	; 132
 414:	23 e0       	ldi	r18, 0x03	; 3
 416:	92 07       	cpc	r25, r18
 418:	38 f4       	brcc	.+14     	; 0x428 <pwm_set_pulse_width+0x16>
		OCR1B = 2 * 900;
 41a:	88 e0       	ldi	r24, 0x08	; 8
 41c:	97 e0       	ldi	r25, 0x07	; 7
 41e:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x70008b>
 422:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x70008a>
 426:	08 95       	ret
	} else if (pulse_width_us > 2100) {
 428:	85 33       	cpi	r24, 0x35	; 53
 42a:	28 e0       	ldi	r18, 0x08	; 8
 42c:	92 07       	cpc	r25, r18
 42e:	38 f0       	brcs	.+14     	; 0x43e <pwm_set_pulse_width+0x2c>
		OCR1B = 2 * 2100;
 430:	88 e6       	ldi	r24, 0x68	; 104
 432:	90 e1       	ldi	r25, 0x10	; 16
 434:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x70008b>
 438:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x70008a>
 43c:	08 95       	ret
	} else {
		OCR1B = (pulse_width_us * 2);
 43e:	88 0f       	add	r24, r24
 440:	99 1f       	adc	r25, r25
 442:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x70008b>
 446:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x70008a>
 44a:	08 95       	ret

0000044c <pwm_set_servo_deflection>:
void pwm_set_servo_deflection(uint8_t deflection) {
	const int min_pulse_us = 900;
	const int max_pulse_us = 2100;
	const int max_deflection = 100;
	
	pwm_set_pulse_width(min_pulse_us + 
 44c:	28 2f       	mov	r18, r24
 44e:	30 e0       	ldi	r19, 0x00	; 0
 450:	a0 eb       	ldi	r26, 0xB0	; 176
 452:	b4 e0       	ldi	r27, 0x04	; 4
 454:	bb d0       	rcall	.+374    	; 0x5cc <__umulhisi3>
 456:	24 e6       	ldi	r18, 0x64	; 100
 458:	30 e0       	ldi	r19, 0x00	; 0
 45a:	40 e0       	ldi	r20, 0x00	; 0
 45c:	50 e0       	ldi	r21, 0x00	; 0
 45e:	94 d0       	rcall	.+296    	; 0x588 <__udivmodsi4>
 460:	c9 01       	movw	r24, r18
 462:	8c 57       	subi	r24, 0x7C	; 124
 464:	9c 4f       	sbci	r25, 0xFC	; 252
 466:	d5 cf       	rjmp	.-86     	; 0x412 <pwm_set_pulse_width>
 468:	08 95       	ret

0000046a <spi_init>:
#define MOSI_PIN 2
#define MISO_PIN 3
#define SCK_PIN 1

void spi_init() {
	SPI_DDR |= (1 << SPI_SS_PIN) | (1 << SS_PIN) | (1 << MOSI_PIN) | (1 << SCK_PIN);
 46a:	84 b1       	in	r24, 0x04	; 4
 46c:	87 68       	ori	r24, 0x87	; 135
 46e:	84 b9       	out	0x04, r24	; 4
	SPI_DDR &= ~(1 << MISO_PIN);
 470:	23 98       	cbi	0x04, 3	; 4
	SPI_PORT |= (1 << SPI_SS_PIN);
 472:	28 9a       	sbi	0x05, 0	; 5
	SPI_PORT |= (1 << SS_PIN);
 474:	2f 9a       	sbi	0x05, 7	; 5

	PRR0 &= ~(1 << PRSPI);
 476:	e4 e6       	ldi	r30, 0x64	; 100
 478:	f0 e0       	ldi	r31, 0x00	; 0
 47a:	80 81       	ld	r24, Z
 47c:	8b 7f       	andi	r24, 0xFB	; 251
 47e:	80 83       	st	Z, r24

	SPCR = (1 << MSTR) | (1<< CPHA) | (1 << CPOL) | (1 << SPE) | (1 << SPR0);
 480:	8d e5       	ldi	r24, 0x5D	; 93
 482:	8c bd       	out	0x2c, r24	; 44
 484:	08 95       	ret

00000486 <spi_trancieve>:
}

void spi_trancieve(uint8_t* tx_buffer, uint8_t* rx_buffer, int length) {
	SPI_PORT &= ~(1 << SS_PIN);
 486:	2f 98       	cbi	0x05, 7	; 5
	
	for(int i = 0; i < length; i++) {
 488:	14 16       	cp	r1, r20
 48a:	15 06       	cpc	r1, r21
 48c:	94 f4       	brge	.+36     	; 0x4b2 <spi_trancieve+0x2c>
 48e:	fc 01       	movw	r30, r24
 490:	db 01       	movw	r26, r22
 492:	48 0f       	add	r20, r24
 494:	59 1f       	adc	r21, r25
		SPDR = tx_buffer[i];
 496:	91 91       	ld	r25, Z+
 498:	9e bd       	out	0x2e, r25	; 46
		
		// Wait for word transmission to complete
		while (!(SPSR & (1 << SPIF))) { };
 49a:	0d b4       	in	r0, 0x2d	; 45
 49c:	07 fe       	sbrs	r0, 7
 49e:	fd cf       	rjmp	.-6      	; 0x49a <spi_trancieve+0x14>

		if (rx_buffer != NULL) {
 4a0:	61 15       	cp	r22, r1
 4a2:	71 05       	cpc	r23, r1
 4a4:	11 f0       	breq	.+4      	; 0x4aa <spi_trancieve+0x24>
			rx_buffer[i] = SPDR;
 4a6:	9e b5       	in	r25, 0x2e	; 46
 4a8:	9c 93       	st	X, r25
 4aa:	11 96       	adiw	r26, 0x01	; 1
}

void spi_trancieve(uint8_t* tx_buffer, uint8_t* rx_buffer, int length) {
	SPI_PORT &= ~(1 << SS_PIN);
	
	for(int i = 0; i < length; i++) {
 4ac:	e4 17       	cp	r30, r20
 4ae:	f5 07       	cpc	r31, r21
 4b0:	91 f7       	brne	.-28     	; 0x496 <spi_trancieve+0x10>
		if (rx_buffer != NULL) {
			rx_buffer[i] = SPDR;
		}
	}

	SPI_PORT |= (1 << SS_PIN);
 4b2:	2f 9a       	sbi	0x05, 7	; 5
 4b4:	08 95       	ret

000004b6 <main>:
#include "drivers/can.h"
#include "drivers/pwm.h"
#include "drivers/adc.h"

int main(void)
{
 4b6:	cf 93       	push	r28
 4b8:	df 93       	push	r29
 4ba:	cd b7       	in	r28, 0x3d	; 61
 4bc:	de b7       	in	r29, 0x3e	; 62
 4be:	2b 97       	sbiw	r28, 0x0b	; 11
 4c0:	0f b6       	in	r0, 0x3f	; 63
 4c2:	f8 94       	cli
 4c4:	de bf       	out	0x3e, r29	; 62
 4c6:	0f be       	out	0x3f, r0	; 63
	spi_init();
	can_init();
	pwm_init();
 4c8:	cd bf       	out	0x3d, r28	; 61
 4ca:	cf df       	rcall	.-98     	; 0x46a <spi_init>
	adc_init();
 4cc:	42 de       	rcall	.-892    	; 0x152 <can_init>
 4ce:	8d df       	rcall	.-230    	; 0x3ea <pwm_init>
	//adc_init_channel(AdcCh_CH8);

	sei();
 4d0:	29 de       	rcall	.-942    	; 0x124 <adc_init>
		_delay_ms(10);

		if (can_rx_message(&frame)) {
			int16_t joystick_pos = (int16_t)(frame.data.i8[0] + 100);

			int16_t servo_defl = 100 * joystick_pos / 255;
 4d2:	78 94       	sei
 4d4:	0f 2e       	mov	r0, r31
 4d6:	f4 e6       	ldi	r31, 0x64	; 100
 4d8:	af 2e       	mov	r10, r31
 4da:	f0 2d       	mov	r31, r0
 4dc:	cc 24       	eor	r12, r12
 4de:	ca 94       	dec	r12
 4e0:	d1 2c       	mov	r13, r1
 4e2:	0f 2e       	mov	r0, r31
 4e4:	f4 e6       	ldi	r31, 0x64	; 100
 4e6:	8f 2e       	mov	r8, r31
 4e8:	f0 2d       	mov	r31, r0
 4ea:	91 2c       	mov	r9, r1
 4ec:	61 2c       	mov	r6, r1
			if (servo_defl > 100) servo_defl = 100;
			if (servo_defl < 0) servo_defl = 0;

			pwm_set_servo_deflection(servo_defl);
			
			frame.id = 0x120;
 4ee:	71 2c       	mov	r7, r1
 4f0:	68 94       	set
 4f2:	ee 24       	eor	r14, r14
 4f4:	e5 f8       	bld	r14, 5
 4f6:	ff 24       	eor	r15, r15
			frame.length = 0x4;
 4f8:	f3 94       	inc	r15
 4fa:	68 94       	set
 4fc:	bb 24       	eor	r11, r11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4fe:	b2 f8       	bld	r11, 2
 500:	8f e3       	ldi	r24, 0x3F	; 63
 502:	9c e9       	ldi	r25, 0x9C	; 156
 504:	01 97       	sbiw	r24, 0x01	; 1
 506:	f1 f7       	brne	.-4      	; 0x504 <main+0x4e>

	while (1)
	{
		_delay_ms(10);

		if (can_rx_message(&frame)) {
 508:	00 c0       	rjmp	.+0      	; 0x50a <main+0x54>
 50a:	00 00       	nop
 50c:	ce 01       	movw	r24, r28
 50e:	01 96       	adiw	r24, 0x01	; 1
 510:	97 de       	rcall	.-722    	; 0x240 <can_rx_message>
 512:	88 23       	and	r24, r24
			int16_t joystick_pos = (int16_t)(frame.data.i8[0] + 100);

			int16_t servo_defl = 100 * joystick_pos / 255;
 514:	a9 f3       	breq	.-22     	; 0x500 <main+0x4a>
 516:	2c 81       	ldd	r18, Y+4	; 0x04
 518:	02 2e       	mov	r0, r18
 51a:	00 0c       	add	r0, r0
 51c:	33 0b       	sbc	r19, r19
 51e:	2c 59       	subi	r18, 0x9C	; 156
 520:	3f 4f       	sbci	r19, 0xFF	; 255
 522:	a2 9e       	mul	r10, r18
 524:	c0 01       	movw	r24, r0
 526:	a3 9e       	mul	r10, r19
 528:	90 0d       	add	r25, r0
 52a:	11 24       	eor	r1, r1
 52c:	b6 01       	movw	r22, r12
 52e:	19 d0       	rcall	.+50     	; 0x562 <__divmodhi4>
 530:	65 36       	cpi	r22, 0x65	; 101
 532:	71 05       	cpc	r23, r1
 534:	14 f0       	brlt	.+4      	; 0x53a <main+0x84>
 536:	68 2d       	mov	r22, r8
 538:	79 2d       	mov	r23, r9
 53a:	8b 01       	movw	r16, r22
 53c:	77 23       	and	r23, r23
			
			if (servo_defl > 100) servo_defl = 100;
			if (servo_defl < 0) servo_defl = 0;

			pwm_set_servo_deflection(servo_defl);
 53e:	14 f4       	brge	.+4      	; 0x544 <main+0x8e>
 540:	06 2d       	mov	r16, r6
			
			frame.id = 0x120;
 542:	17 2d       	mov	r17, r7
 544:	80 2f       	mov	r24, r16
			frame.length = 0x4;
 546:	82 df       	rcall	.-252    	; 0x44c <pwm_set_servo_deflection>
			
			frame.data.u16[0] = adc_read(AdcCh_CH8);
 548:	fa 82       	std	Y+2, r15	; 0x02
 54a:	e9 82       	std	Y+1, r14	; 0x01
 54c:	bb 82       	std	Y+3, r11	; 0x03
 54e:	80 e2       	ldi	r24, 0x20	; 32
			frame.data.i16[1] = servo_defl;
 550:	f3 dd       	rcall	.-1050   	; 0x138 <adc_read>
 552:	9d 83       	std	Y+5, r25	; 0x05

			can_tx_message(&frame);
 554:	8c 83       	std	Y+4, r24	; 0x04
 556:	1f 83       	std	Y+7, r17	; 0x07
 558:	0e 83       	std	Y+6, r16	; 0x06
 55a:	ce 01       	movw	r24, r28
 55c:	01 96       	adiw	r24, 0x01	; 1
 55e:	2b de       	rcall	.-938    	; 0x1b6 <can_tx_message>
 560:	cf cf       	rjmp	.-98     	; 0x500 <main+0x4a>

00000562 <__divmodhi4>:
 562:	97 fb       	bst	r25, 7
 564:	07 2e       	mov	r0, r23
 566:	16 f4       	brtc	.+4      	; 0x56c <__divmodhi4+0xa>
 568:	00 94       	com	r0
 56a:	06 d0       	rcall	.+12     	; 0x578 <__divmodhi4_neg1>
 56c:	77 fd       	sbrc	r23, 7
 56e:	08 d0       	rcall	.+16     	; 0x580 <__divmodhi4_neg2>
 570:	3c d0       	rcall	.+120    	; 0x5ea <__udivmodhi4>
 572:	07 fc       	sbrc	r0, 7
 574:	05 d0       	rcall	.+10     	; 0x580 <__divmodhi4_neg2>
 576:	3e f4       	brtc	.+14     	; 0x586 <__divmodhi4_exit>

00000578 <__divmodhi4_neg1>:
 578:	90 95       	com	r25
 57a:	81 95       	neg	r24
 57c:	9f 4f       	sbci	r25, 0xFF	; 255
 57e:	08 95       	ret

00000580 <__divmodhi4_neg2>:
 580:	70 95       	com	r23
 582:	61 95       	neg	r22
 584:	7f 4f       	sbci	r23, 0xFF	; 255

00000586 <__divmodhi4_exit>:
 586:	08 95       	ret

00000588 <__udivmodsi4>:
 588:	a1 e2       	ldi	r26, 0x21	; 33
 58a:	1a 2e       	mov	r1, r26
 58c:	aa 1b       	sub	r26, r26
 58e:	bb 1b       	sub	r27, r27
 590:	fd 01       	movw	r30, r26
 592:	0d c0       	rjmp	.+26     	; 0x5ae <__udivmodsi4_ep>

00000594 <__udivmodsi4_loop>:
 594:	aa 1f       	adc	r26, r26
 596:	bb 1f       	adc	r27, r27
 598:	ee 1f       	adc	r30, r30
 59a:	ff 1f       	adc	r31, r31
 59c:	a2 17       	cp	r26, r18
 59e:	b3 07       	cpc	r27, r19
 5a0:	e4 07       	cpc	r30, r20
 5a2:	f5 07       	cpc	r31, r21
 5a4:	20 f0       	brcs	.+8      	; 0x5ae <__udivmodsi4_ep>
 5a6:	a2 1b       	sub	r26, r18
 5a8:	b3 0b       	sbc	r27, r19
 5aa:	e4 0b       	sbc	r30, r20
 5ac:	f5 0b       	sbc	r31, r21

000005ae <__udivmodsi4_ep>:
 5ae:	66 1f       	adc	r22, r22
 5b0:	77 1f       	adc	r23, r23
 5b2:	88 1f       	adc	r24, r24
 5b4:	99 1f       	adc	r25, r25
 5b6:	1a 94       	dec	r1
 5b8:	69 f7       	brne	.-38     	; 0x594 <__udivmodsi4_loop>
 5ba:	60 95       	com	r22
 5bc:	70 95       	com	r23
 5be:	80 95       	com	r24
 5c0:	90 95       	com	r25
 5c2:	9b 01       	movw	r18, r22
 5c4:	ac 01       	movw	r20, r24
 5c6:	bd 01       	movw	r22, r26
 5c8:	cf 01       	movw	r24, r30
 5ca:	08 95       	ret

000005cc <__umulhisi3>:
 5cc:	a2 9f       	mul	r26, r18
 5ce:	b0 01       	movw	r22, r0
 5d0:	b3 9f       	mul	r27, r19
 5d2:	c0 01       	movw	r24, r0
 5d4:	a3 9f       	mul	r26, r19
 5d6:	70 0d       	add	r23, r0
 5d8:	81 1d       	adc	r24, r1
 5da:	11 24       	eor	r1, r1
 5dc:	91 1d       	adc	r25, r1
 5de:	b2 9f       	mul	r27, r18
 5e0:	70 0d       	add	r23, r0
 5e2:	81 1d       	adc	r24, r1
 5e4:	11 24       	eor	r1, r1
 5e6:	91 1d       	adc	r25, r1
 5e8:	08 95       	ret

000005ea <__udivmodhi4>:
 5ea:	aa 1b       	sub	r26, r26
 5ec:	bb 1b       	sub	r27, r27
 5ee:	51 e1       	ldi	r21, 0x11	; 17
 5f0:	07 c0       	rjmp	.+14     	; 0x600 <__udivmodhi4_ep>

000005f2 <__udivmodhi4_loop>:
 5f2:	aa 1f       	adc	r26, r26
 5f4:	bb 1f       	adc	r27, r27
 5f6:	a6 17       	cp	r26, r22
 5f8:	b7 07       	cpc	r27, r23
 5fa:	10 f0       	brcs	.+4      	; 0x600 <__udivmodhi4_ep>
 5fc:	a6 1b       	sub	r26, r22
 5fe:	b7 0b       	sbc	r27, r23

00000600 <__udivmodhi4_ep>:
 600:	88 1f       	adc	r24, r24
 602:	99 1f       	adc	r25, r25
 604:	5a 95       	dec	r21
 606:	a9 f7       	brne	.-22     	; 0x5f2 <__udivmodhi4_loop>
 608:	80 95       	com	r24
 60a:	90 95       	com	r25
 60c:	bc 01       	movw	r22, r24
 60e:	cd 01       	movw	r24, r26
 610:	08 95       	ret

00000612 <_exit>:
 612:	f8 94       	cli

00000614 <__stop_program>:
 614:	ff cf       	rjmp	.-2      	; 0x614 <__stop_program>
