
Node2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800200  000013a4  00001438  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000013a4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  00800202  00800202  0000143a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000143a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000146c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000220  00000000  00000000  000014ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002b28  00000000  00000000  000016cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000017f0  00000000  00000000  000041f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000142d  00000000  00000000  000059e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004c4  00000000  00000000  00006e14  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000cdc  00000000  00000000  000072d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000119e  00000000  00000000  00007fb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000198  00000000  00000000  00009152  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	c2 c0       	rjmp	.+388    	; 0x186 <__ctors_end>
       2:	00 00       	nop
       4:	e0 c0       	rjmp	.+448    	; 0x1c6 <__bad_interrupt>
       6:	00 00       	nop
       8:	de c0       	rjmp	.+444    	; 0x1c6 <__bad_interrupt>
       a:	00 00       	nop
       c:	dc c0       	rjmp	.+440    	; 0x1c6 <__bad_interrupt>
       e:	00 00       	nop
      10:	da c0       	rjmp	.+436    	; 0x1c6 <__bad_interrupt>
      12:	00 00       	nop
      14:	d8 c0       	rjmp	.+432    	; 0x1c6 <__bad_interrupt>
      16:	00 00       	nop
      18:	d6 c0       	rjmp	.+428    	; 0x1c6 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	d4 c0       	rjmp	.+424    	; 0x1c6 <__bad_interrupt>
      1e:	00 00       	nop
      20:	d2 c0       	rjmp	.+420    	; 0x1c6 <__bad_interrupt>
      22:	00 00       	nop
      24:	d0 c0       	rjmp	.+416    	; 0x1c6 <__bad_interrupt>
      26:	00 00       	nop
      28:	ce c0       	rjmp	.+412    	; 0x1c6 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	cc c0       	rjmp	.+408    	; 0x1c6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	ca c0       	rjmp	.+404    	; 0x1c6 <__bad_interrupt>
      32:	00 00       	nop
      34:	c8 c0       	rjmp	.+400    	; 0x1c6 <__bad_interrupt>
      36:	00 00       	nop
      38:	c6 c0       	rjmp	.+396    	; 0x1c6 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	c4 c0       	rjmp	.+392    	; 0x1c6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	c2 c0       	rjmp	.+388    	; 0x1c6 <__bad_interrupt>
      42:	00 00       	nop
      44:	c0 c0       	rjmp	.+384    	; 0x1c6 <__bad_interrupt>
      46:	00 00       	nop
      48:	be c0       	rjmp	.+380    	; 0x1c6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	bc c0       	rjmp	.+376    	; 0x1c6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	ba c0       	rjmp	.+372    	; 0x1c6 <__bad_interrupt>
      52:	00 00       	nop
      54:	b8 c0       	rjmp	.+368    	; 0x1c6 <__bad_interrupt>
      56:	00 00       	nop
      58:	b6 c0       	rjmp	.+364    	; 0x1c6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	b4 c0       	rjmp	.+360    	; 0x1c6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	b2 c0       	rjmp	.+356    	; 0x1c6 <__bad_interrupt>
      62:	00 00       	nop
      64:	b0 c0       	rjmp	.+352    	; 0x1c6 <__bad_interrupt>
      66:	00 00       	nop
      68:	ae c0       	rjmp	.+348    	; 0x1c6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	ac c0       	rjmp	.+344    	; 0x1c6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	aa c0       	rjmp	.+340    	; 0x1c6 <__bad_interrupt>
      72:	00 00       	nop
      74:	a8 c0       	rjmp	.+336    	; 0x1c6 <__bad_interrupt>
      76:	00 00       	nop
      78:	a6 c0       	rjmp	.+332    	; 0x1c6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	a4 c0       	rjmp	.+328    	; 0x1c6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	a2 c0       	rjmp	.+324    	; 0x1c6 <__bad_interrupt>
      82:	00 00       	nop
      84:	a0 c0       	rjmp	.+320    	; 0x1c6 <__bad_interrupt>
      86:	00 00       	nop
      88:	9e c0       	rjmp	.+316    	; 0x1c6 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	9c c0       	rjmp	.+312    	; 0x1c6 <__bad_interrupt>
      8e:	00 00       	nop
      90:	9a c0       	rjmp	.+308    	; 0x1c6 <__bad_interrupt>
      92:	00 00       	nop
      94:	98 c0       	rjmp	.+304    	; 0x1c6 <__bad_interrupt>
      96:	00 00       	nop
      98:	96 c0       	rjmp	.+300    	; 0x1c6 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	df c3       	rjmp	.+1982   	; 0x85c <__vector_39>
      9e:	00 00       	nop
      a0:	92 c0       	rjmp	.+292    	; 0x1c6 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	90 c0       	rjmp	.+288    	; 0x1c6 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	8e c0       	rjmp	.+284    	; 0x1c6 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	8c c0       	rjmp	.+280    	; 0x1c6 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	8a c0       	rjmp	.+276    	; 0x1c6 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	88 c0       	rjmp	.+272    	; 0x1c6 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	86 c0       	rjmp	.+268    	; 0x1c6 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	84 c0       	rjmp	.+264    	; 0x1c6 <__bad_interrupt>
      be:	00 00       	nop
      c0:	82 c0       	rjmp	.+260    	; 0x1c6 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	80 c0       	rjmp	.+256    	; 0x1c6 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	7e c0       	rjmp	.+252    	; 0x1c6 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	7c c0       	rjmp	.+248    	; 0x1c6 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	7a c0       	rjmp	.+244    	; 0x1c6 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	78 c0       	rjmp	.+240    	; 0x1c6 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	76 c0       	rjmp	.+236    	; 0x1c6 <__bad_interrupt>
      da:	00 00       	nop
      dc:	74 c0       	rjmp	.+232    	; 0x1c6 <__bad_interrupt>
      de:	00 00       	nop
      e0:	72 c0       	rjmp	.+228    	; 0x1c6 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	4c 04       	cpc	r4, r12
      e6:	9e 04       	cpc	r9, r14
      e8:	9e 04       	cpc	r9, r14
      ea:	9e 04       	cpc	r9, r14
      ec:	9e 04       	cpc	r9, r14
      ee:	9e 04       	cpc	r9, r14
      f0:	9e 04       	cpc	r9, r14
      f2:	9e 04       	cpc	r9, r14
      f4:	4c 04       	cpc	r4, r12
      f6:	9e 04       	cpc	r9, r14
      f8:	9e 04       	cpc	r9, r14
      fa:	9e 04       	cpc	r9, r14
      fc:	9e 04       	cpc	r9, r14
      fe:	9e 04       	cpc	r9, r14
     100:	9e 04       	cpc	r9, r14
     102:	9e 04       	cpc	r9, r14
     104:	4e 04       	cpc	r4, r14
     106:	9e 04       	cpc	r9, r14
     108:	9e 04       	cpc	r9, r14
     10a:	9e 04       	cpc	r9, r14
     10c:	9e 04       	cpc	r9, r14
     10e:	9e 04       	cpc	r9, r14
     110:	9e 04       	cpc	r9, r14
     112:	9e 04       	cpc	r9, r14
     114:	9e 04       	cpc	r9, r14
     116:	9e 04       	cpc	r9, r14
     118:	9e 04       	cpc	r9, r14
     11a:	9e 04       	cpc	r9, r14
     11c:	9e 04       	cpc	r9, r14
     11e:	9e 04       	cpc	r9, r14
     120:	9e 04       	cpc	r9, r14
     122:	9e 04       	cpc	r9, r14
     124:	4e 04       	cpc	r4, r14
     126:	9e 04       	cpc	r9, r14
     128:	9e 04       	cpc	r9, r14
     12a:	9e 04       	cpc	r9, r14
     12c:	9e 04       	cpc	r9, r14
     12e:	9e 04       	cpc	r9, r14
     130:	9e 04       	cpc	r9, r14
     132:	9e 04       	cpc	r9, r14
     134:	9e 04       	cpc	r9, r14
     136:	9e 04       	cpc	r9, r14
     138:	9e 04       	cpc	r9, r14
     13a:	9e 04       	cpc	r9, r14
     13c:	9e 04       	cpc	r9, r14
     13e:	9e 04       	cpc	r9, r14
     140:	9e 04       	cpc	r9, r14
     142:	9e 04       	cpc	r9, r14
     144:	9a 04       	cpc	r9, r10
     146:	9e 04       	cpc	r9, r14
     148:	9e 04       	cpc	r9, r14
     14a:	9e 04       	cpc	r9, r14
     14c:	9e 04       	cpc	r9, r14
     14e:	9e 04       	cpc	r9, r14
     150:	9e 04       	cpc	r9, r14
     152:	9e 04       	cpc	r9, r14
     154:	77 04       	cpc	r7, r7
     156:	9e 04       	cpc	r9, r14
     158:	9e 04       	cpc	r9, r14
     15a:	9e 04       	cpc	r9, r14
     15c:	9e 04       	cpc	r9, r14
     15e:	9e 04       	cpc	r9, r14
     160:	9e 04       	cpc	r9, r14
     162:	9e 04       	cpc	r9, r14
     164:	9e 04       	cpc	r9, r14
     166:	9e 04       	cpc	r9, r14
     168:	9e 04       	cpc	r9, r14
     16a:	9e 04       	cpc	r9, r14
     16c:	9e 04       	cpc	r9, r14
     16e:	9e 04       	cpc	r9, r14
     170:	9e 04       	cpc	r9, r14
     172:	9e 04       	cpc	r9, r14
     174:	6b 04       	cpc	r6, r11
     176:	9e 04       	cpc	r9, r14
     178:	9e 04       	cpc	r9, r14
     17a:	9e 04       	cpc	r9, r14
     17c:	9e 04       	cpc	r9, r14
     17e:	9e 04       	cpc	r9, r14
     180:	9e 04       	cpc	r9, r14
     182:	9e 04       	cpc	r9, r14
     184:	89 04       	cpc	r8, r9

00000186 <__ctors_end>:
     186:	11 24       	eor	r1, r1
     188:	1f be       	out	0x3f, r1	; 63
     18a:	cf ef       	ldi	r28, 0xFF	; 255
     18c:	d1 e2       	ldi	r29, 0x21	; 33
     18e:	de bf       	out	0x3e, r29	; 62
     190:	cd bf       	out	0x3d, r28	; 61
     192:	00 e0       	ldi	r16, 0x00	; 0
     194:	0c bf       	out	0x3c, r16	; 60

00000196 <__do_copy_data>:
     196:	12 e0       	ldi	r17, 0x02	; 2
     198:	a0 e0       	ldi	r26, 0x00	; 0
     19a:	b2 e0       	ldi	r27, 0x02	; 2
     19c:	e4 ea       	ldi	r30, 0xA4	; 164
     19e:	f3 e1       	ldi	r31, 0x13	; 19
     1a0:	00 e0       	ldi	r16, 0x00	; 0
     1a2:	0b bf       	out	0x3b, r16	; 59
     1a4:	02 c0       	rjmp	.+4      	; 0x1aa <__do_copy_data+0x14>
     1a6:	07 90       	elpm	r0, Z+
     1a8:	0d 92       	st	X+, r0
     1aa:	a2 30       	cpi	r26, 0x02	; 2
     1ac:	b1 07       	cpc	r27, r17
     1ae:	d9 f7       	brne	.-10     	; 0x1a6 <__do_copy_data+0x10>

000001b0 <__do_clear_bss>:
     1b0:	22 e0       	ldi	r18, 0x02	; 2
     1b2:	a2 e0       	ldi	r26, 0x02	; 2
     1b4:	b2 e0       	ldi	r27, 0x02	; 2
     1b6:	01 c0       	rjmp	.+2      	; 0x1ba <.do_clear_bss_start>

000001b8 <.do_clear_bss_loop>:
     1b8:	1d 92       	st	X+, r1

000001ba <.do_clear_bss_start>:
     1ba:	af 30       	cpi	r26, 0x0F	; 15
     1bc:	b2 07       	cpc	r27, r18
     1be:	e1 f7       	brne	.-8      	; 0x1b8 <.do_clear_bss_loop>
     1c0:	c8 d4       	rcall	.+2448   	; 0xb52 <main>
     1c2:	0c 94 d0 09 	jmp	0x13a0	; 0x13a0 <_exit>

000001c6 <__bad_interrupt>:
     1c6:	1c cf       	rjmp	.-456    	; 0x0 <__vectors>

000001c8 <_set_channel>:

#include "adc.h"
#include <avr/io.h>

void _set_channel(AdcCh_t ch) {
	ADMUX &= ~0x1F;
     1c8:	ec e7       	ldi	r30, 0x7C	; 124
     1ca:	f0 e0       	ldi	r31, 0x00	; 0
     1cc:	90 81       	ld	r25, Z
     1ce:	90 7e       	andi	r25, 0xE0	; 224
     1d0:	90 83       	st	Z, r25
	ADMUX |= ((int)ch) & 0x1F;
     1d2:	90 81       	ld	r25, Z
     1d4:	28 2f       	mov	r18, r24
     1d6:	2f 71       	andi	r18, 0x1F	; 31
     1d8:	92 2b       	or	r25, r18
     1da:	90 83       	st	Z, r25

	ADCSRB &= ~(1 << MUX5);
     1dc:	eb e7       	ldi	r30, 0x7B	; 123
     1de:	f0 e0       	ldi	r31, 0x00	; 0
     1e0:	90 81       	ld	r25, Z
     1e2:	97 7f       	andi	r25, 0xF7	; 247
     1e4:	90 83       	st	Z, r25
	ADCSRB |= ((int)ch >> 5) << MUX5;
     1e6:	90 81       	ld	r25, Z
     1e8:	82 95       	swap	r24
     1ea:	86 95       	lsr	r24
     1ec:	87 70       	andi	r24, 0x07	; 7
     1ee:	88 0f       	add	r24, r24
     1f0:	88 0f       	add	r24, r24
     1f2:	88 0f       	add	r24, r24
     1f4:	89 2b       	or	r24, r25
     1f6:	80 83       	st	Z, r24
     1f8:	08 95       	ret

000001fa <adc_init>:
}

void adc_init() {
	ADMUX = (1 << REFS0);
     1fa:	80 e4       	ldi	r24, 0x40	; 64
     1fc:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
	ADCSRB = (1 << MUX5);
     200:	88 e0       	ldi	r24, 0x08	; 8
     202:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
	//_set_channel(0);

	ADCSRA = (1 << ADEN);
     206:	80 e8       	ldi	r24, 0x80	; 128
     208:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
     20c:	08 95       	ret

0000020e <adc_init_channel>:
}

void adc_init_channel(AdcCh_t channel) {
     20e:	cf 93       	push	r28
     210:	df 93       	push	r29
     212:	1f 92       	push	r1
     214:	1f 92       	push	r1
     216:	cd b7       	in	r28, 0x3d	; 61
     218:	de b7       	in	r29, 0x3e	; 62
	volatile int channel_number = (int)channel & 0b000111;
     21a:	28 2f       	mov	r18, r24
     21c:	27 70       	andi	r18, 0x07	; 7
     21e:	30 e0       	ldi	r19, 0x00	; 0
     220:	3a 83       	std	Y+2, r19	; 0x02
     222:	29 83       	std	Y+1, r18	; 0x01
	channel_number |= (channel >> 2) & 0b001000;
     224:	29 81       	ldd	r18, Y+1	; 0x01
     226:	3a 81       	ldd	r19, Y+2	; 0x02
     228:	86 95       	lsr	r24
     22a:	86 95       	lsr	r24
     22c:	88 70       	andi	r24, 0x08	; 8
     22e:	a9 01       	movw	r20, r18
     230:	48 2b       	or	r20, r24
     232:	ca 01       	movw	r24, r20
     234:	9a 83       	std	Y+2, r25	; 0x02
     236:	89 83       	std	Y+1, r24	; 0x01
	
	if (channel_number < 8) {
     238:	89 81       	ldd	r24, Y+1	; 0x01
     23a:	9a 81       	ldd	r25, Y+2	; 0x02
     23c:	08 97       	sbiw	r24, 0x08	; 8
     23e:	ec f4       	brge	.+58     	; 0x27a <adc_init_channel+0x6c>
		DIDR0 |= (1 << channel_number);
     240:	29 81       	ldd	r18, Y+1	; 0x01
     242:	3a 81       	ldd	r19, Y+2	; 0x02
     244:	ee e7       	ldi	r30, 0x7E	; 126
     246:	f0 e0       	ldi	r31, 0x00	; 0
     248:	40 81       	ld	r20, Z
     24a:	81 e0       	ldi	r24, 0x01	; 1
     24c:	90 e0       	ldi	r25, 0x00	; 0
     24e:	bc 01       	movw	r22, r24
     250:	02 c0       	rjmp	.+4      	; 0x256 <adc_init_channel+0x48>
     252:	66 0f       	add	r22, r22
     254:	77 1f       	adc	r23, r23
     256:	2a 95       	dec	r18
     258:	e2 f7       	brpl	.-8      	; 0x252 <adc_init_channel+0x44>
     25a:	9b 01       	movw	r18, r22
     25c:	24 2b       	or	r18, r20
     25e:	20 83       	st	Z, r18
		DDRF &= ~(1 << channel_number);
     260:	49 81       	ldd	r20, Y+1	; 0x01
     262:	5a 81       	ldd	r21, Y+2	; 0x02
     264:	20 b3       	in	r18, 0x10	; 16
     266:	02 c0       	rjmp	.+4      	; 0x26c <adc_init_channel+0x5e>
     268:	88 0f       	add	r24, r24
     26a:	99 1f       	adc	r25, r25
     26c:	4a 95       	dec	r20
     26e:	e2 f7       	brpl	.-8      	; 0x268 <adc_init_channel+0x5a>
     270:	80 95       	com	r24
     272:	90 95       	com	r25
     274:	82 23       	and	r24, r18
     276:	80 bb       	out	0x10, r24	; 16
     278:	21 c0       	rjmp	.+66     	; 0x2bc <adc_init_channel+0xae>
	} else {
		DIDR2 |= (1 << (channel_number - 8));
     27a:	49 81       	ldd	r20, Y+1	; 0x01
     27c:	5a 81       	ldd	r21, Y+2	; 0x02
     27e:	ed e7       	ldi	r30, 0x7D	; 125
     280:	f0 e0       	ldi	r31, 0x00	; 0
     282:	60 81       	ld	r22, Z
     284:	48 50       	subi	r20, 0x08	; 8
     286:	51 09       	sbc	r21, r1
     288:	81 e0       	ldi	r24, 0x01	; 1
     28a:	90 e0       	ldi	r25, 0x00	; 0
     28c:	9c 01       	movw	r18, r24
     28e:	02 c0       	rjmp	.+4      	; 0x294 <adc_init_channel+0x86>
     290:	22 0f       	add	r18, r18
     292:	33 1f       	adc	r19, r19
     294:	4a 95       	dec	r20
     296:	e2 f7       	brpl	.-8      	; 0x290 <adc_init_channel+0x82>
     298:	26 2b       	or	r18, r22
     29a:	20 83       	st	Z, r18
		DDRK &= ~(1 << (channel_number - 8));
     29c:	29 81       	ldd	r18, Y+1	; 0x01
     29e:	3a 81       	ldd	r19, Y+2	; 0x02
     2a0:	e7 e0       	ldi	r30, 0x07	; 7
     2a2:	f1 e0       	ldi	r31, 0x01	; 1
     2a4:	40 81       	ld	r20, Z
     2a6:	28 50       	subi	r18, 0x08	; 8
     2a8:	31 09       	sbc	r19, r1
     2aa:	02 c0       	rjmp	.+4      	; 0x2b0 <adc_init_channel+0xa2>
     2ac:	88 0f       	add	r24, r24
     2ae:	99 1f       	adc	r25, r25
     2b0:	2a 95       	dec	r18
     2b2:	e2 f7       	brpl	.-8      	; 0x2ac <adc_init_channel+0x9e>
     2b4:	80 95       	com	r24
     2b6:	90 95       	com	r25
     2b8:	84 23       	and	r24, r20
     2ba:	80 83       	st	Z, r24
	}
}
     2bc:	0f 90       	pop	r0
     2be:	0f 90       	pop	r0
     2c0:	df 91       	pop	r29
     2c2:	cf 91       	pop	r28
     2c4:	08 95       	ret

000002c6 <adc_read>:

uint16_t adc_read(AdcCh_t channel) {
     2c6:	80 df       	rcall	.-256    	; 0x1c8 <_set_channel>
     2c8:	ea e7       	ldi	r30, 0x7A	; 122
     2ca:	f0 e0       	ldi	r31, 0x00	; 0
     2cc:	80 81       	ld	r24, Z
     2ce:	80 64       	ori	r24, 0x40	; 64
     2d0:	80 83       	st	Z, r24
     2d2:	80 81       	ld	r24, Z
     2d4:	84 ff       	sbrs	r24, 4
     2d6:	fd cf       	rjmp	.-6      	; 0x2d2 <adc_read+0xc>
     2d8:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
     2dc:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
     2e0:	08 95       	ret

000002e2 <can_init>:
     2e2:	42 d3       	rcall	.+1668   	; 0x968 <mcp_reset>
     2e4:	60 e8       	ldi	r22, 0x80	; 128
     2e6:	8f e0       	ldi	r24, 0x0F	; 15
     2e8:	68 d3       	rcall	.+1744   	; 0x9ba <mcp_write>
     2ea:	60 e2       	ldi	r22, 0x20	; 32
     2ec:	8a e2       	ldi	r24, 0x2A	; 42
     2ee:	65 d3       	rcall	.+1738   	; 0x9ba <mcp_write>
     2f0:	62 e9       	ldi	r22, 0x92	; 146
     2f2:	89 e2       	ldi	r24, 0x29	; 41
     2f4:	62 d3       	rcall	.+1732   	; 0x9ba <mcp_write>
     2f6:	62 ec       	ldi	r22, 0xC2	; 194
     2f8:	88 e2       	ldi	r24, 0x28	; 40
     2fa:	5f d3       	rcall	.+1726   	; 0x9ba <mcp_write>
     2fc:	60 e0       	ldi	r22, 0x00	; 0
     2fe:	8b e2       	ldi	r24, 0x2B	; 43
     300:	5c d3       	rcall	.+1720   	; 0x9ba <mcp_write>
     302:	60 e0       	ldi	r22, 0x00	; 0
     304:	8c e2       	ldi	r24, 0x2C	; 44
     306:	59 d3       	rcall	.+1714   	; 0x9ba <mcp_write>
     308:	60 e0       	ldi	r22, 0x00	; 0
     30a:	8d e2       	ldi	r24, 0x2D	; 45
     30c:	56 d3       	rcall	.+1708   	; 0x9ba <mcp_write>
     30e:	60 e0       	ldi	r22, 0x00	; 0
     310:	8c e0       	ldi	r24, 0x0C	; 12
     312:	53 d3       	rcall	.+1702   	; 0x9ba <mcp_write>
     314:	60 e0       	ldi	r22, 0x00	; 0
     316:	8d e0       	ldi	r24, 0x0D	; 13
     318:	50 d3       	rcall	.+1696   	; 0x9ba <mcp_write>
     31a:	60 e0       	ldi	r22, 0x00	; 0
     31c:	80 e6       	ldi	r24, 0x60	; 96
     31e:	4d d3       	rcall	.+1690   	; 0x9ba <mcp_write>
     320:	60 e0       	ldi	r22, 0x00	; 0
     322:	80 e7       	ldi	r24, 0x70	; 112
     324:	4a d3       	rcall	.+1684   	; 0x9ba <mcp_write>
     326:	60 e0       	ldi	r22, 0x00	; 0
     328:	80 e2       	ldi	r24, 0x20	; 32
     32a:	47 d3       	rcall	.+1678   	; 0x9ba <mcp_write>
     32c:	60 e0       	ldi	r22, 0x00	; 0
     32e:	81 e2       	ldi	r24, 0x21	; 33
     330:	44 d3       	rcall	.+1672   	; 0x9ba <mcp_write>
     332:	60 e0       	ldi	r22, 0x00	; 0
     334:	82 e2       	ldi	r24, 0x22	; 34
     336:	41 d3       	rcall	.+1666   	; 0x9ba <mcp_write>
     338:	60 e0       	ldi	r22, 0x00	; 0
     33a:	83 e2       	ldi	r24, 0x23	; 35
     33c:	3e d3       	rcall	.+1660   	; 0x9ba <mcp_write>
     33e:	64 e0       	ldi	r22, 0x04	; 4
     340:	8f e0       	ldi	r24, 0x0F	; 15
     342:	3b c3       	rjmp	.+1654   	; 0x9ba <mcp_write>
     344:	08 95       	ret

00000346 <can_tx_message>:
     346:	cf 92       	push	r12
     348:	df 92       	push	r13
     34a:	ef 92       	push	r14
     34c:	ff 92       	push	r15
     34e:	1f 93       	push	r17
     350:	cf 93       	push	r28
     352:	df 93       	push	r29
     354:	6c 01       	movw	r12, r24
     356:	63 e0       	ldi	r22, 0x03	; 3
     358:	80 e3       	ldi	r24, 0x30	; 48
     35a:	2f d3       	rcall	.+1630   	; 0x9ba <mcp_write>
     35c:	f6 01       	movw	r30, r12
     35e:	60 81       	ld	r22, Z
     360:	71 81       	ldd	r23, Z+1	; 0x01
     362:	76 95       	lsr	r23
     364:	67 95       	ror	r22
     366:	76 95       	lsr	r23
     368:	67 95       	ror	r22
     36a:	76 95       	lsr	r23
     36c:	67 95       	ror	r22
     36e:	81 e3       	ldi	r24, 0x31	; 49
     370:	24 d3       	rcall	.+1608   	; 0x9ba <mcp_write>
     372:	f6 01       	movw	r30, r12
     374:	60 81       	ld	r22, Z
     376:	62 95       	swap	r22
     378:	66 0f       	add	r22, r22
     37a:	60 7e       	andi	r22, 0xE0	; 224
     37c:	82 e3       	ldi	r24, 0x32	; 50
     37e:	1d d3       	rcall	.+1594   	; 0x9ba <mcp_write>
     380:	f6 01       	movw	r30, r12
     382:	62 81       	ldd	r22, Z+2	; 0x02
     384:	85 e3       	ldi	r24, 0x35	; 53
     386:	19 d3       	rcall	.+1586   	; 0x9ba <mcp_write>
     388:	f6 01       	movw	r30, r12
     38a:	82 81       	ldd	r24, Z+2	; 0x02
     38c:	88 23       	and	r24, r24
     38e:	a1 f0       	breq	.+40     	; 0x3b8 <can_tx_message+0x72>
     390:	76 01       	movw	r14, r12
     392:	f3 e0       	ldi	r31, 0x03	; 3
     394:	ef 0e       	add	r14, r31
     396:	f1 1c       	adc	r15, r1
     398:	16 e3       	ldi	r17, 0x36	; 54
     39a:	c0 e0       	ldi	r28, 0x00	; 0
     39c:	d0 e0       	ldi	r29, 0x00	; 0
     39e:	f7 01       	movw	r30, r14
     3a0:	61 91       	ld	r22, Z+
     3a2:	7f 01       	movw	r14, r30
     3a4:	81 2f       	mov	r24, r17
     3a6:	09 d3       	rcall	.+1554   	; 0x9ba <mcp_write>
     3a8:	21 96       	adiw	r28, 0x01	; 1
     3aa:	1f 5f       	subi	r17, 0xFF	; 255
     3ac:	f6 01       	movw	r30, r12
     3ae:	82 81       	ldd	r24, Z+2	; 0x02
     3b0:	90 e0       	ldi	r25, 0x00	; 0
     3b2:	c8 17       	cp	r28, r24
     3b4:	d9 07       	cpc	r29, r25
     3b6:	9c f3       	brlt	.-26     	; 0x39e <can_tx_message+0x58>
     3b8:	40 e0       	ldi	r20, 0x00	; 0
     3ba:	60 e0       	ldi	r22, 0x00	; 0
     3bc:	81 e0       	ldi	r24, 0x01	; 1
     3be:	2c d3       	rcall	.+1624   	; 0xa18 <mcp_request_to_send>
     3c0:	df 91       	pop	r29
     3c2:	cf 91       	pop	r28
     3c4:	1f 91       	pop	r17
     3c6:	ff 90       	pop	r15
     3c8:	ef 90       	pop	r14
     3ca:	df 90       	pop	r13
     3cc:	cf 90       	pop	r12
     3ce:	08 95       	ret

000003d0 <can_rx_message>:
     3d0:	ff 92       	push	r15
     3d2:	0f 93       	push	r16
     3d4:	1f 93       	push	r17
     3d6:	cf 93       	push	r28
     3d8:	df 93       	push	r29
     3da:	8c 01       	movw	r16, r24
     3dc:	37 d3       	rcall	.+1646   	; 0xa4c <mcp_read_status>
     3de:	80 ff       	sbrs	r24, 0
     3e0:	3b c0       	rjmp	.+118    	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
     3e2:	81 e6       	ldi	r24, 0x61	; 97
     3e4:	d3 d2       	rcall	.+1446   	; 0x98c <mcp_read>
     3e6:	28 e0       	ldi	r18, 0x08	; 8
     3e8:	82 9f       	mul	r24, r18
     3ea:	c0 01       	movw	r24, r0
     3ec:	11 24       	eor	r1, r1
     3ee:	f8 01       	movw	r30, r16
     3f0:	91 83       	std	Z+1, r25	; 0x01
     3f2:	80 83       	st	Z, r24
     3f4:	82 e6       	ldi	r24, 0x62	; 98
     3f6:	ca d2       	rcall	.+1428   	; 0x98c <mcp_read>
     3f8:	f8 01       	movw	r30, r16
     3fa:	20 81       	ld	r18, Z
     3fc:	31 81       	ldd	r19, Z+1	; 0x01
     3fe:	82 95       	swap	r24
     400:	86 95       	lsr	r24
     402:	87 70       	andi	r24, 0x07	; 7
     404:	28 2b       	or	r18, r24
     406:	31 83       	std	Z+1, r19	; 0x01
     408:	20 83       	st	Z, r18
     40a:	85 e6       	ldi	r24, 0x65	; 101
     40c:	bf d2       	rcall	.+1406   	; 0x98c <mcp_read>
     40e:	f8 01       	movw	r30, r16
     410:	82 83       	std	Z+2, r24	; 0x02
     412:	82 81       	ldd	r24, Z+2	; 0x02
     414:	89 30       	cpi	r24, 0x09	; 9
     416:	10 f0       	brcs	.+4      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
     418:	88 e0       	ldi	r24, 0x08	; 8
     41a:	82 83       	std	Z+2, r24	; 0x02
     41c:	f8 01       	movw	r30, r16
     41e:	82 81       	ldd	r24, Z+2	; 0x02
     420:	88 23       	and	r24, r24
     422:	a1 f0       	breq	.+40     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
     424:	0f 2e       	mov	r0, r31
     426:	f6 e6       	ldi	r31, 0x66	; 102
     428:	ff 2e       	mov	r15, r31
     42a:	f0 2d       	mov	r31, r0
     42c:	c0 e0       	ldi	r28, 0x00	; 0
     42e:	d0 e0       	ldi	r29, 0x00	; 0
     430:	8f 2d       	mov	r24, r15
     432:	ac d2       	rcall	.+1368   	; 0x98c <mcp_read>
     434:	f8 01       	movw	r30, r16
     436:	ec 0f       	add	r30, r28
     438:	fd 1f       	adc	r31, r29
     43a:	83 83       	std	Z+3, r24	; 0x03
     43c:	21 96       	adiw	r28, 0x01	; 1
     43e:	f8 01       	movw	r30, r16
     440:	82 81       	ldd	r24, Z+2	; 0x02
     442:	f3 94       	inc	r15
     444:	90 e0       	ldi	r25, 0x00	; 0
     446:	c8 17       	cp	r28, r24
     448:	d9 07       	cpc	r29, r25
     44a:	94 f3       	brlt	.-28     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
     44c:	40 e0       	ldi	r20, 0x00	; 0
     44e:	61 e0       	ldi	r22, 0x01	; 1
     450:	8c e2       	ldi	r24, 0x2C	; 44
     452:	c9 d2       	rcall	.+1426   	; 0x9e6 <mcp_modify_bit>
     454:	81 e0       	ldi	r24, 0x01	; 1
     456:	01 c0       	rjmp	.+2      	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
     458:	80 e0       	ldi	r24, 0x00	; 0
     45a:	df 91       	pop	r29
     45c:	cf 91       	pop	r28
     45e:	1f 91       	pop	r17
     460:	0f 91       	pop	r16
     462:	ff 90       	pop	r15
     464:	08 95       	ret

00000466 <motor_disable>:
	motor_disable();
}


void motor_disable() {
	MOTOR_PORT &= ~(1 << EN_PIN);
     466:	e2 e0       	ldi	r30, 0x02	; 2
     468:	f1 e0       	ldi	r31, 0x01	; 1
     46a:	80 81       	ld	r24, Z
     46c:	8f 7e       	andi	r24, 0xEF	; 239
     46e:	80 83       	st	Z, r24
     470:	08 95       	ret

00000472 <motor_init>:
#define ENCODER_NOE_PIN 5
#define ENCODER_SEL_PIN 3
#define ENCODER_RST_PIN 6


void motor_init() {
     472:	cf 93       	push	r28
     474:	df 93       	push	r29
	ENCODER_DDR |= (1 << ENCODER_NOE_PIN);
     476:	c1 e0       	ldi	r28, 0x01	; 1
     478:	d1 e0       	ldi	r29, 0x01	; 1
     47a:	88 81       	ld	r24, Y
     47c:	80 62       	ori	r24, 0x20	; 32
     47e:	88 83       	st	Y, r24
	ENCODER_DDR |= (1 << ENCODER_SEL_PIN);
     480:	88 81       	ld	r24, Y
     482:	88 60       	ori	r24, 0x08	; 8
     484:	88 83       	st	Y, r24
	ENCODER_DDR |= (1 << ENCODER_RST_PIN);
     486:	88 81       	ld	r24, Y
     488:	80 64       	ori	r24, 0x40	; 64
     48a:	88 83       	st	Y, r24
	ENCODER_PORT |= (1 << ENCODER_NOE_PIN);
     48c:	e2 e0       	ldi	r30, 0x02	; 2
     48e:	f1 e0       	ldi	r31, 0x01	; 1
     490:	80 81       	ld	r24, Z
     492:	80 62       	ori	r24, 0x20	; 32
     494:	80 83       	st	Z, r24
	ENCODER_PORT &= ~(1 << ENCODER_SEL_PIN);
     496:	80 81       	ld	r24, Z
     498:	87 7f       	andi	r24, 0xF7	; 247
     49a:	80 83       	st	Z, r24
	ENCODER_PORT |= (1 << ENCODER_RST_PIN);
     49c:	80 81       	ld	r24, Z
     49e:	80 64       	ori	r24, 0x40	; 64

	TWI_Master_Initialise();
     4a0:	80 83       	st	Z, r24
	
	MOTOR_DDR |= (1 << EN_PIN);
     4a2:	a5 d1       	rcall	.+842    	; 0x7ee <TWI_Master_Initialise>
     4a4:	88 81       	ld	r24, Y
     4a6:	80 61       	ori	r24, 0x10	; 16
	MOTOR_DDR |= (1 << DIR_PIN);
     4a8:	88 83       	st	Y, r24
     4aa:	88 81       	ld	r24, Y

	motor_disable();
     4ac:	82 60       	ori	r24, 0x02	; 2
     4ae:	88 83       	st	Y, r24
}
     4b0:	da df       	rcall	.-76     	; 0x466 <motor_disable>
     4b2:	df 91       	pop	r29
     4b4:	cf 91       	pop	r28
     4b6:	08 95       	ret

000004b8 <motor_enable>:
void motor_disable() {
	MOTOR_PORT &= ~(1 << EN_PIN);
}

void motor_enable() {
	MOTOR_PORT |= (1 << EN_PIN);
     4b8:	e2 e0       	ldi	r30, 0x02	; 2
     4ba:	f1 e0       	ldi	r31, 0x01	; 1
     4bc:	80 81       	ld	r24, Z
     4be:	80 61       	ori	r24, 0x10	; 16
     4c0:	80 83       	st	Z, r24
     4c2:	08 95       	ret

000004c4 <motor_set>:
}

void motor_set(uint8_t speed, motor_direction_t direction) {
     4c4:	cf 93       	push	r28
     4c6:	df 93       	push	r29
     4c8:	cd b7       	in	r28, 0x3d	; 61
     4ca:	de b7       	in	r29, 0x3e	; 62
     4cc:	29 97       	sbiw	r28, 0x09	; 9
     4ce:	0f b6       	in	r0, 0x3f	; 63
     4d0:	f8 94       	cli
     4d2:	de bf       	out	0x3e, r29	; 62
     4d4:	0f be       	out	0x3f, r0	; 63
     4d6:	cd bf       	out	0x3d, r28	; 61
	// Set direction pin
	if (direction == DIR_RIGHT) {
     4d8:	61 30       	cpi	r22, 0x01	; 1
     4da:	31 f4       	brne	.+12     	; 0x4e8 <motor_set+0x24>
		MOTOR_PORT |= (1 << DIR_PIN);
     4dc:	e2 e0       	ldi	r30, 0x02	; 2
     4de:	f1 e0       	ldi	r31, 0x01	; 1
     4e0:	90 81       	ld	r25, Z
     4e2:	92 60       	ori	r25, 0x02	; 2
     4e4:	90 83       	st	Z, r25
     4e6:	05 c0       	rjmp	.+10     	; 0x4f2 <motor_set+0x2e>
	} else {
		MOTOR_PORT &= ~(1 << DIR_PIN);
     4e8:	e2 e0       	ldi	r30, 0x02	; 2
     4ea:	f1 e0       	ldi	r31, 0x01	; 1
     4ec:	90 81       	ld	r25, Z
     4ee:	9d 7f       	andi	r25, 0xFD	; 253
     4f0:	90 83       	st	Z, r25
	}

	// Write speed
	uint8_t buffer[] = {0x50, 0x00, speed, 0x01, 0x00, 0x02, 0x00, 0x03, 0x00};
     4f2:	90 e5       	ldi	r25, 0x50	; 80
     4f4:	99 83       	std	Y+1, r25	; 0x01
     4f6:	1a 82       	std	Y+2, r1	; 0x02
     4f8:	8b 83       	std	Y+3, r24	; 0x03
     4fa:	81 e0       	ldi	r24, 0x01	; 1
     4fc:	8c 83       	std	Y+4, r24	; 0x04
     4fe:	1d 82       	std	Y+5, r1	; 0x05
     500:	82 e0       	ldi	r24, 0x02	; 2
     502:	8e 83       	std	Y+6, r24	; 0x06
     504:	1f 82       	std	Y+7, r1	; 0x07
     506:	83 e0       	ldi	r24, 0x03	; 3
     508:	88 87       	std	Y+8, r24	; 0x08
     50a:	19 86       	std	Y+9, r1	; 0x09
	TWI_Start_Transceiver_With_Data(buffer, 9);
     50c:	69 e0       	ldi	r22, 0x09	; 9
     50e:	ce 01       	movw	r24, r28
     510:	01 96       	adiw	r24, 0x01	; 1
     512:	77 d1       	rcall	.+750    	; 0x802 <TWI_Start_Transceiver_With_Data>
}
     514:	29 96       	adiw	r28, 0x09	; 9
     516:	0f b6       	in	r0, 0x3f	; 63
     518:	f8 94       	cli
     51a:	de bf       	out	0x3e, r29	; 62
     51c:	0f be       	out	0x3f, r0	; 63
     51e:	cd bf       	out	0x3d, r28	; 61
     520:	df 91       	pop	r29
     522:	cf 91       	pop	r28
     524:	08 95       	ret

00000526 <motor_reset_encoder>:

void motor_reset_encoder() {
	// Pulse !reset pin
	ENCODER_PORT &= ~(1 << ENCODER_RST_PIN);
     526:	e2 e0       	ldi	r30, 0x02	; 2
     528:	f1 e0       	ldi	r31, 0x01	; 1
     52a:	80 81       	ld	r24, Z
     52c:	8f 7b       	andi	r24, 0xBF	; 191
     52e:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     530:	85 e3       	ldi	r24, 0x35	; 53
     532:	8a 95       	dec	r24
     534:	f1 f7       	brne	.-4      	; 0x532 <motor_reset_encoder+0xc>
     536:	00 00       	nop
	_delay_us(10);
	ENCODER_PORT |= (1 << ENCODER_RST_PIN);
     538:	80 81       	ld	r24, Z
     53a:	80 64       	ori	r24, 0x40	; 64
     53c:	80 83       	st	Z, r24
     53e:	08 95       	ret

00000540 <motor_read_encoder>:
}

int16_t motor_read_encoder() {
	// Enable output
	ENCODER_PORT &= ~(1 << ENCODER_NOE_PIN);
     540:	e2 e0       	ldi	r30, 0x02	; 2
     542:	f1 e0       	ldi	r31, 0x01	; 1
     544:	80 81       	ld	r24, Z
     546:	8f 7d       	andi	r24, 0xDF	; 223
     548:	80 83       	st	Z, r24
	
	// Select MSB
	ENCODER_PORT &= ~(1 << ENCODER_SEL_PIN);
     54a:	80 81       	ld	r24, Z
     54c:	87 7f       	andi	r24, 0xF7	; 247
     54e:	80 83       	st	Z, r24
     550:	8a e6       	ldi	r24, 0x6A	; 106
     552:	8a 95       	dec	r24
     554:	f1 f7       	brne	.-4      	; 0x552 <motor_read_encoder+0x12>
     556:	00 c0       	rjmp	.+0      	; 0x558 <motor_read_encoder+0x18>

	_delay_us(20);

	int8_t msb = ENCODER_DATA;
     558:	a6 e0       	ldi	r26, 0x06	; 6
     55a:	b1 e0       	ldi	r27, 0x01	; 1
     55c:	8c 91       	ld	r24, X
	
	// Select LSB
	ENCODER_PORT |= (1 << ENCODER_SEL_PIN);
     55e:	90 81       	ld	r25, Z
     560:	98 60       	ori	r25, 0x08	; 8
     562:	90 83       	st	Z, r25
     564:	9a e6       	ldi	r25, 0x6A	; 106
     566:	9a 95       	dec	r25
     568:	f1 f7       	brne	.-4      	; 0x566 <motor_read_encoder+0x26>
     56a:	00 c0       	rjmp	.+0      	; 0x56c <motor_read_encoder+0x2c>
	
	_delay_us(20);

	uint8_t lsb = ENCODER_DATA;
     56c:	2c 91       	ld	r18, X

	// Disable output
	ENCODER_PORT |= (1 << ENCODER_NOE_PIN);
     56e:	90 81       	ld	r25, Z
     570:	90 62       	ori	r25, 0x20	; 32
     572:	90 83       	st	Z, r25
	
	return (msb << 8) | lsb;
     574:	08 2e       	mov	r0, r24
     576:	00 0c       	add	r0, r0
     578:	99 0b       	sbc	r25, r25
     57a:	98 2f       	mov	r25, r24
     57c:	88 27       	eor	r24, r24
}
     57e:	82 2b       	or	r24, r18
     580:	08 95       	ret

00000582 <shooter_init>:
#define SHOOTER_PORT PORTF
#define SHOOTER_PIN 1


void shooter_init() {
	SHOOTER_DDR |= (1 << SHOOTER_PIN);
     582:	81 9a       	sbi	0x10, 1	; 16
	SHOOTER_PORT &= ~(1 << SHOOTER_PIN);
     584:	89 98       	cbi	0x11, 1	; 17
     586:	08 95       	ret

00000588 <shooter_shoot>:
}

void shooter_shoot() {
	SHOOTER_PORT |= (1 << SHOOTER_PIN);
     588:	89 9a       	sbi	0x11, 1	; 17
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     58a:	2f ef       	ldi	r18, 0xFF	; 255
     58c:	81 ee       	ldi	r24, 0xE1	; 225
     58e:	94 e0       	ldi	r25, 0x04	; 4
     590:	21 50       	subi	r18, 0x01	; 1
     592:	80 40       	sbci	r24, 0x00	; 0
     594:	90 40       	sbci	r25, 0x00	; 0
     596:	e1 f7       	brne	.-8      	; 0x590 <shooter_shoot+0x8>
     598:	00 c0       	rjmp	.+0      	; 0x59a <shooter_shoot+0x12>
     59a:	00 00       	nop
	_delay_ms(SHOOTER_PULSE_DURATION_MS);
	SHOOTER_PORT &= ~(1 << SHOOTER_PIN);
     59c:	89 98       	cbi	0x11, 1	; 17
     59e:	08 95       	ret

000005a0 <delay_var_us>:
#include "motor.h"

#include "song.h"


void delay_var_us(int us) {
     5a0:	cf 93       	push	r28
     5a2:	df 93       	push	r29
     5a4:	1f 92       	push	r1
     5a6:	1f 92       	push	r1
     5a8:	cd b7       	in	r28, 0x3d	; 61
     5aa:	de b7       	in	r29, 0x3e	; 62
	for(volatile int i = 0; i < us; i++) {
     5ac:	1a 82       	std	Y+2, r1	; 0x02
     5ae:	19 82       	std	Y+1, r1	; 0x01
     5b0:	29 81       	ldd	r18, Y+1	; 0x01
     5b2:	3a 81       	ldd	r19, Y+2	; 0x02
     5b4:	28 17       	cp	r18, r24
     5b6:	39 07       	cpc	r19, r25
     5b8:	7c f4       	brge	.+30     	; 0x5d8 <delay_var_us+0x38>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5ba:	25 e0       	ldi	r18, 0x05	; 5
     5bc:	2a 95       	dec	r18
     5be:	f1 f7       	brne	.-4      	; 0x5bc <delay_var_us+0x1c>
     5c0:	00 00       	nop
     5c2:	29 81       	ldd	r18, Y+1	; 0x01
     5c4:	3a 81       	ldd	r19, Y+2	; 0x02
     5c6:	2f 5f       	subi	r18, 0xFF	; 255
     5c8:	3f 4f       	sbci	r19, 0xFF	; 255
     5ca:	3a 83       	std	Y+2, r19	; 0x02
     5cc:	29 83       	std	Y+1, r18	; 0x01
     5ce:	29 81       	ldd	r18, Y+1	; 0x01
     5d0:	3a 81       	ldd	r19, Y+2	; 0x02
     5d2:	28 17       	cp	r18, r24
     5d4:	39 07       	cpc	r19, r25
     5d6:	8c f3       	brlt	.-30     	; 0x5ba <delay_var_us+0x1a>
		_delay_us(1);
	}
}
     5d8:	0f 90       	pop	r0
     5da:	0f 90       	pop	r0
     5dc:	df 91       	pop	r29
     5de:	cf 91       	pop	r28
     5e0:	08 95       	ret

000005e2 <buzz>:

const int motor_amplitude = 200;


void buzz(long frequency, long length) {
     5e2:	8f 92       	push	r8
     5e4:	9f 92       	push	r9
     5e6:	af 92       	push	r10
     5e8:	bf 92       	push	r11
     5ea:	cf 92       	push	r12
     5ec:	df 92       	push	r13
     5ee:	ef 92       	push	r14
     5f0:	ff 92       	push	r15
     5f2:	1f 93       	push	r17
     5f4:	cf 93       	push	r28
     5f6:	df 93       	push	r29
     5f8:	cd b7       	in	r28, 0x3d	; 61
     5fa:	de b7       	in	r29, 0x3e	; 62
     5fc:	28 97       	sbiw	r28, 0x08	; 8
     5fe:	0f b6       	in	r0, 0x3f	; 63
     600:	f8 94       	cli
     602:	de bf       	out	0x3e, r29	; 62
     604:	0f be       	out	0x3f, r0	; 63
     606:	cd bf       	out	0x3d, r28	; 61
     608:	4b 01       	movw	r8, r22
     60a:	5c 01       	movw	r10, r24
     60c:	69 01       	movw	r12, r18
     60e:	7a 01       	movw	r14, r20
	volatile long delayValue = 1000000 / frequency / 2;
     610:	60 e2       	ldi	r22, 0x20	; 32
     612:	71 ea       	ldi	r23, 0xA1	; 161
     614:	87 e0       	ldi	r24, 0x07	; 7
     616:	90 e0       	ldi	r25, 0x00	; 0
     618:	a5 01       	movw	r20, r10
     61a:	94 01       	movw	r18, r8
     61c:	70 d6       	rcall	.+3296   	; 0x12fe <__divmodsi4>
     61e:	29 83       	std	Y+1, r18	; 0x01
     620:	3a 83       	std	Y+2, r19	; 0x02
     622:	4b 83       	std	Y+3, r20	; 0x03
     624:	5c 83       	std	Y+4, r21	; 0x04
	volatile long numCycles = frequency * length / 1000;
     626:	a5 01       	movw	r20, r10
     628:	94 01       	movw	r18, r8
     62a:	c7 01       	movw	r24, r14
     62c:	b6 01       	movw	r22, r12
     62e:	23 d6       	rcall	.+3142   	; 0x1276 <__mulsi3>
     630:	28 ee       	ldi	r18, 0xE8	; 232
     632:	33 e0       	ldi	r19, 0x03	; 3
     634:	40 e0       	ldi	r20, 0x00	; 0
     636:	50 e0       	ldi	r21, 0x00	; 0
     638:	62 d6       	rcall	.+3268   	; 0x12fe <__divmodsi4>
     63a:	2d 83       	std	Y+5, r18	; 0x05
     63c:	3e 83       	std	Y+6, r19	; 0x06
     63e:	4f 83       	std	Y+7, r20	; 0x07
     640:	58 87       	std	Y+8, r21	; 0x08

	for (long i = 0; i < numCycles; i++) {
     642:	8d 81       	ldd	r24, Y+5	; 0x05
     644:	9e 81       	ldd	r25, Y+6	; 0x06
     646:	af 81       	ldd	r26, Y+7	; 0x07
     648:	b8 85       	ldd	r27, Y+8	; 0x08
     64a:	18 16       	cp	r1, r24
     64c:	19 06       	cpc	r1, r25
     64e:	1a 06       	cpc	r1, r26
     650:	1b 06       	cpc	r1, r27
     652:	4c f5       	brge	.+82     	; 0x6a6 <buzz+0xc4>
     654:	8f ef       	ldi	r24, 0xFF	; 255
     656:	88 16       	cp	r8, r24
     658:	98 06       	cpc	r9, r24
     65a:	a8 06       	cpc	r10, r24
     65c:	b8 06       	cpc	r11, r24
     65e:	11 f0       	breq	.+4      	; 0x664 <buzz+0x82>
     660:	18 ec       	ldi	r17, 0xC8	; 200
     662:	01 c0       	rjmp	.+2      	; 0x666 <buzz+0x84>
     664:	10 e0       	ldi	r17, 0x00	; 0
     666:	c1 2c       	mov	r12, r1
     668:	d1 2c       	mov	r13, r1
     66a:	76 01       	movw	r14, r12
		motor_set((frequency != -1) ? motor_amplitude : 0, DIR_LEFT);
     66c:	8f ef       	ldi	r24, 0xFF	; 255
     66e:	88 16       	cp	r8, r24
     670:	98 06       	cpc	r9, r24
     672:	a8 06       	cpc	r10, r24
     674:	b8 06       	cpc	r11, r24
     676:	d9 f4       	brne	.+54     	; 0x6ae <buzz+0xcc>
		delay_var_us(delayValue);
		motor_set((frequency != -1) ? motor_amplitude : 0, DIR_RIGHT);
     678:	23 c0       	rjmp	.+70     	; 0x6c0 <buzz+0xde>
     67a:	61 e0       	ldi	r22, 0x01	; 1
     67c:	81 2f       	mov	r24, r17
		delay_var_us(delayValue);
     67e:	22 df       	rcall	.-444    	; 0x4c4 <motor_set>
     680:	89 81       	ldd	r24, Y+1	; 0x01
     682:	9a 81       	ldd	r25, Y+2	; 0x02
     684:	ab 81       	ldd	r26, Y+3	; 0x03
     686:	bc 81       	ldd	r27, Y+4	; 0x04

void buzz(long frequency, long length) {
	volatile long delayValue = 1000000 / frequency / 2;
	volatile long numCycles = frequency * length / 1000;

	for (long i = 0; i < numCycles; i++) {
     688:	8b df       	rcall	.-234    	; 0x5a0 <delay_var_us>
     68a:	8f ef       	ldi	r24, 0xFF	; 255
     68c:	c8 1a       	sub	r12, r24
     68e:	d8 0a       	sbc	r13, r24
     690:	e8 0a       	sbc	r14, r24
     692:	f8 0a       	sbc	r15, r24
     694:	8d 81       	ldd	r24, Y+5	; 0x05
     696:	9e 81       	ldd	r25, Y+6	; 0x06
     698:	af 81       	ldd	r26, Y+7	; 0x07
     69a:	b8 85       	ldd	r27, Y+8	; 0x08
     69c:	c8 16       	cp	r12, r24
     69e:	d9 06       	cpc	r13, r25
     6a0:	ea 06       	cpc	r14, r26
		delay_var_us(delayValue);
		motor_set((frequency != -1) ? motor_amplitude : 0, DIR_RIGHT);
		delay_var_us(delayValue);
	}
	
	motor_set(0, DIR_RIGHT);
     6a2:	fb 06       	cpc	r15, r27
     6a4:	1c f3       	brlt	.-58     	; 0x66c <buzz+0x8a>
     6a6:	61 e0       	ldi	r22, 0x01	; 1
}
     6a8:	80 e0       	ldi	r24, 0x00	; 0
void buzz(long frequency, long length) {
	volatile long delayValue = 1000000 / frequency / 2;
	volatile long numCycles = frequency * length / 1000;

	for (long i = 0; i < numCycles; i++) {
		motor_set((frequency != -1) ? motor_amplitude : 0, DIR_LEFT);
     6aa:	0c df       	rcall	.-488    	; 0x4c4 <motor_set>
     6ac:	12 c0       	rjmp	.+36     	; 0x6d2 <buzz+0xf0>
     6ae:	60 e0       	ldi	r22, 0x00	; 0
		delay_var_us(delayValue);
     6b0:	88 ec       	ldi	r24, 0xC8	; 200
     6b2:	08 df       	rcall	.-496    	; 0x4c4 <motor_set>
     6b4:	89 81       	ldd	r24, Y+1	; 0x01
     6b6:	9a 81       	ldd	r25, Y+2	; 0x02
     6b8:	ab 81       	ldd	r26, Y+3	; 0x03
void buzz(long frequency, long length) {
	volatile long delayValue = 1000000 / frequency / 2;
	volatile long numCycles = frequency * length / 1000;

	for (long i = 0; i < numCycles; i++) {
		motor_set((frequency != -1) ? motor_amplitude : 0, DIR_LEFT);
     6ba:	bc 81       	ldd	r27, Y+4	; 0x04
     6bc:	71 df       	rcall	.-286    	; 0x5a0 <delay_var_us>
     6be:	dd cf       	rjmp	.-70     	; 0x67a <buzz+0x98>
     6c0:	60 e0       	ldi	r22, 0x00	; 0
		delay_var_us(delayValue);
     6c2:	80 e0       	ldi	r24, 0x00	; 0
     6c4:	ff de       	rcall	.-514    	; 0x4c4 <motor_set>
     6c6:	89 81       	ldd	r24, Y+1	; 0x01
     6c8:	9a 81       	ldd	r25, Y+2	; 0x02
     6ca:	ab 81       	ldd	r26, Y+3	; 0x03
     6cc:	bc 81       	ldd	r27, Y+4	; 0x04
     6ce:	68 df       	rcall	.-304    	; 0x5a0 <delay_var_us>
		motor_set((frequency != -1) ? motor_amplitude : 0, DIR_RIGHT);
		delay_var_us(delayValue);
	}
	
	motor_set(0, DIR_RIGHT);
}
     6d0:	d4 cf       	rjmp	.-88     	; 0x67a <buzz+0x98>
     6d2:	28 96       	adiw	r28, 0x08	; 8
     6d4:	0f b6       	in	r0, 0x3f	; 63
     6d6:	f8 94       	cli
     6d8:	de bf       	out	0x3e, r29	; 62
     6da:	0f be       	out	0x3f, r0	; 63
     6dc:	cd bf       	out	0x3d, r28	; 61
     6de:	df 91       	pop	r29
     6e0:	cf 91       	pop	r28
     6e2:	1f 91       	pop	r17
     6e4:	ff 90       	pop	r15
     6e6:	ef 90       	pop	r14
     6e8:	df 90       	pop	r13
     6ea:	cf 90       	pop	r12
     6ec:	bf 90       	pop	r11
     6ee:	af 90       	pop	r10
     6f0:	9f 90       	pop	r9
     6f2:	8f 90       	pop	r8
     6f4:	08 95       	ret

000006f6 <song_play>:

void song_play(SoundSong_t song) {
     6f6:	8f 92       	push	r8
     6f8:	9f 92       	push	r9
     6fa:	af 92       	push	r10
     6fc:	bf 92       	push	r11
     6fe:	cf 92       	push	r12
     700:	df 92       	push	r13
     702:	ef 92       	push	r14
     704:	ff 92       	push	r15
	uint32_t i;
	switch(song) {
     706:	81 30       	cpi	r24, 0x01	; 1
     708:	d1 f0       	breq	.+52     	; 0x73e <song_play+0x48>
     70a:	30 f0       	brcs	.+12     	; 0x718 <song_play+0x22>
     70c:	82 30       	cpi	r24, 0x02	; 2
     70e:	99 f1       	breq	.+102    	; 0x776 <song_play+0x80>
     710:	83 30       	cpi	r24, 0x03	; 3
     712:	09 f4       	brne	.+2      	; 0x716 <song_play+0x20>
     714:	5a c0       	rjmp	.+180    	; 0x7ca <song_play+0xd4>
     716:	62 c0       	rjmp	.+196    	; 0x7dc <song_play+0xe6>
		case SONG_END:
			buzz(1000, 120);
     718:	28 e7       	ldi	r18, 0x78	; 120
     71a:	30 e0       	ldi	r19, 0x00	; 0
     71c:	40 e0       	ldi	r20, 0x00	; 0
     71e:	50 e0       	ldi	r21, 0x00	; 0
     720:	68 ee       	ldi	r22, 0xE8	; 232
     722:	73 e0       	ldi	r23, 0x03	; 3
     724:	80 e0       	ldi	r24, 0x00	; 0
     726:	90 e0       	ldi	r25, 0x00	; 0
     728:	5c df       	rcall	.-328    	; 0x5e2 <buzz>
			buzz(800, 120);
     72a:	28 e7       	ldi	r18, 0x78	; 120
     72c:	30 e0       	ldi	r19, 0x00	; 0
     72e:	40 e0       	ldi	r20, 0x00	; 0
     730:	50 e0       	ldi	r21, 0x00	; 0
     732:	60 e2       	ldi	r22, 0x20	; 32
     734:	73 e0       	ldi	r23, 0x03	; 3
     736:	80 e0       	ldi	r24, 0x00	; 0
     738:	90 e0       	ldi	r25, 0x00	; 0
     73a:	53 df       	rcall	.-346    	; 0x5e2 <buzz>
			break;
     73c:	4f c0       	rjmp	.+158    	; 0x7dc <song_play+0xe6>
		case SONG_START:
			buzz(2000, 50);
     73e:	22 e3       	ldi	r18, 0x32	; 50
     740:	30 e0       	ldi	r19, 0x00	; 0
     742:	40 e0       	ldi	r20, 0x00	; 0
     744:	50 e0       	ldi	r21, 0x00	; 0
     746:	60 ed       	ldi	r22, 0xD0	; 208
     748:	77 e0       	ldi	r23, 0x07	; 7
     74a:	80 e0       	ldi	r24, 0x00	; 0
     74c:	90 e0       	ldi	r25, 0x00	; 0
     74e:	49 df       	rcall	.-366    	; 0x5e2 <buzz>
			buzz(3000, 50);
     750:	22 e3       	ldi	r18, 0x32	; 50
     752:	30 e0       	ldi	r19, 0x00	; 0
     754:	40 e0       	ldi	r20, 0x00	; 0
     756:	50 e0       	ldi	r21, 0x00	; 0
     758:	68 eb       	ldi	r22, 0xB8	; 184
     75a:	7b e0       	ldi	r23, 0x0B	; 11
     75c:	80 e0       	ldi	r24, 0x00	; 0
     75e:	90 e0       	ldi	r25, 0x00	; 0
     760:	40 df       	rcall	.-384    	; 0x5e2 <buzz>
			buzz(4000, 50);
     762:	22 e3       	ldi	r18, 0x32	; 50
     764:	30 e0       	ldi	r19, 0x00	; 0
     766:	40 e0       	ldi	r20, 0x00	; 0
     768:	50 e0       	ldi	r21, 0x00	; 0
     76a:	60 ea       	ldi	r22, 0xA0	; 160
     76c:	7f e0       	ldi	r23, 0x0F	; 15
     76e:	80 e0       	ldi	r24, 0x00	; 0
     770:	90 e0       	ldi	r25, 0x00	; 0
     772:	37 df       	rcall	.-402    	; 0x5e2 <buzz>
			break;
     774:	33 c0       	rjmp	.+102    	; 0x7dc <song_play+0xe6>
	motor_set(0, DIR_RIGHT);
}

void song_play(SoundSong_t song) {
	uint32_t i;
	switch(song) {
     776:	c1 2c       	mov	r12, r1
     778:	d1 2c       	mov	r13, r1
     77a:	76 01       	movw	r14, r12
			buzz(3000, 50);
			buzz(4000, 50);
			break;
		case SONG_LOADING:
			for(i = 0; i < 120; i++) {
				buzz(i * i * i / 120, 6);
     77c:	0f 2e       	mov	r0, r31
     77e:	f8 e7       	ldi	r31, 0x78	; 120
     780:	8f 2e       	mov	r8, r31
     782:	91 2c       	mov	r9, r1
     784:	a1 2c       	mov	r10, r1
     786:	b1 2c       	mov	r11, r1
     788:	f0 2d       	mov	r31, r0
     78a:	a7 01       	movw	r20, r14
     78c:	96 01       	movw	r18, r12
     78e:	c7 01       	movw	r24, r14
     790:	b6 01       	movw	r22, r12
     792:	71 d5       	rcall	.+2786   	; 0x1276 <__mulsi3>
     794:	9b 01       	movw	r18, r22
     796:	ac 01       	movw	r20, r24
     798:	c7 01       	movw	r24, r14
     79a:	b6 01       	movw	r22, r12
     79c:	6c d5       	rcall	.+2776   	; 0x1276 <__mulsi3>
     79e:	a5 01       	movw	r20, r10
     7a0:	94 01       	movw	r18, r8
     7a2:	8b d5       	rcall	.+2838   	; 0x12ba <__udivmodsi4>
     7a4:	ca 01       	movw	r24, r20
     7a6:	b9 01       	movw	r22, r18
     7a8:	26 e0       	ldi	r18, 0x06	; 6
     7aa:	30 e0       	ldi	r19, 0x00	; 0
     7ac:	40 e0       	ldi	r20, 0x00	; 0
     7ae:	50 e0       	ldi	r21, 0x00	; 0
     7b0:	18 df       	rcall	.-464    	; 0x5e2 <buzz>
			buzz(2000, 50);
			buzz(3000, 50);
			buzz(4000, 50);
			break;
		case SONG_LOADING:
			for(i = 0; i < 120; i++) {
     7b2:	8f ef       	ldi	r24, 0xFF	; 255
     7b4:	c8 1a       	sub	r12, r24
     7b6:	d8 0a       	sbc	r13, r24
     7b8:	e8 0a       	sbc	r14, r24
     7ba:	f8 0a       	sbc	r15, r24
     7bc:	88 e7       	ldi	r24, 0x78	; 120
     7be:	c8 16       	cp	r12, r24
     7c0:	d1 04       	cpc	r13, r1
     7c2:	e1 04       	cpc	r14, r1
     7c4:	f1 04       	cpc	r15, r1
     7c6:	09 f7       	brne	.-62     	; 0x78a <song_play+0x94>
				buzz(i * i * i / 120, 6);
			}
			break;
		case SONG_BEEP:
			buzz(4000, 20);
     7c8:	09 c0       	rjmp	.+18     	; 0x7dc <song_play+0xe6>
     7ca:	24 e1       	ldi	r18, 0x14	; 20
     7cc:	30 e0       	ldi	r19, 0x00	; 0
     7ce:	40 e0       	ldi	r20, 0x00	; 0
     7d0:	50 e0       	ldi	r21, 0x00	; 0
     7d2:	60 ea       	ldi	r22, 0xA0	; 160
     7d4:	7f e0       	ldi	r23, 0x0F	; 15
     7d6:	80 e0       	ldi	r24, 0x00	; 0
     7d8:	90 e0       	ldi	r25, 0x00	; 0
     7da:	03 df       	rcall	.-506    	; 0x5e2 <buzz>
			break;
	}
}
     7dc:	ff 90       	pop	r15
     7de:	ef 90       	pop	r14
     7e0:	df 90       	pop	r13
     7e2:	cf 90       	pop	r12
     7e4:	bf 90       	pop	r11
     7e6:	af 90       	pop	r10
     7e8:	9f 90       	pop	r9
     7ea:	8f 90       	pop	r8
     7ec:	08 95       	ret

000007ee <TWI_Master_Initialise>:
    {
      msg[ i ] = TWI_buf[ i ];
    }
  }
  return( TWI_statusReg.lastTransOK );                                   
}
     7ee:	8c e0       	ldi	r24, 0x0C	; 12
     7f0:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
     7f4:	8f ef       	ldi	r24, 0xFF	; 255
     7f6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     7fa:	84 e0       	ldi	r24, 0x04	; 4
     7fc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     800:	08 95       	ret

00000802 <TWI_Start_Transceiver_With_Data>:
     802:	cf 93       	push	r28
     804:	df 93       	push	r29
     806:	ec 01       	movw	r28, r24
     808:	ec eb       	ldi	r30, 0xBC	; 188
     80a:	f0 e0       	ldi	r31, 0x00	; 0
     80c:	90 81       	ld	r25, Z
     80e:	90 fd       	sbrc	r25, 0
     810:	fd cf       	rjmp	.-6      	; 0x80c <TWI_Start_Transceiver_With_Data+0xa>
     812:	60 93 04 02 	sts	0x0204, r22	; 0x800204 <TWI_msgSize>
     816:	88 81       	ld	r24, Y
     818:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <TWI_buf>
     81c:	80 fd       	sbrc	r24, 0
     81e:	13 c0       	rjmp	.+38     	; 0x846 <TWI_Start_Transceiver_With_Data+0x44>
     820:	62 30       	cpi	r22, 0x02	; 2
     822:	88 f0       	brcs	.+34     	; 0x846 <TWI_Start_Transceiver_With_Data+0x44>
     824:	fe 01       	movw	r30, r28
     826:	31 96       	adiw	r30, 0x01	; 1
     828:	a6 e0       	ldi	r26, 0x06	; 6
     82a:	b2 e0       	ldi	r27, 0x02	; 2
     82c:	62 50       	subi	r22, 0x02	; 2
     82e:	26 2f       	mov	r18, r22
     830:	30 e0       	ldi	r19, 0x00	; 0
     832:	2e 5f       	subi	r18, 0xFE	; 254
     834:	3f 4f       	sbci	r19, 0xFF	; 255
     836:	ce 01       	movw	r24, r28
     838:	82 0f       	add	r24, r18
     83a:	93 1f       	adc	r25, r19
     83c:	21 91       	ld	r18, Z+
     83e:	2d 93       	st	X+, r18
     840:	e8 17       	cp	r30, r24
     842:	f9 07       	cpc	r31, r25
     844:	d9 f7       	brne	.-10     	; 0x83c <TWI_Start_Transceiver_With_Data+0x3a>
     846:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <TWI_statusReg>
     84a:	88 ef       	ldi	r24, 0xF8	; 248
     84c:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
     850:	85 ea       	ldi	r24, 0xA5	; 165
     852:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     856:	df 91       	pop	r29
     858:	cf 91       	pop	r28
     85a:	08 95       	ret

0000085c <__vector_39>:
that is whenever a TWI event has occurred. This function should not be called directly from the main
application.
****************************************************************************/

ISR(TWI_vect)
{
     85c:	1f 92       	push	r1
     85e:	0f 92       	push	r0
     860:	0f b6       	in	r0, 0x3f	; 63
     862:	0f 92       	push	r0
     864:	11 24       	eor	r1, r1
     866:	0b b6       	in	r0, 0x3b	; 59
     868:	0f 92       	push	r0
     86a:	2f 93       	push	r18
     86c:	3f 93       	push	r19
     86e:	8f 93       	push	r24
     870:	9f 93       	push	r25
     872:	af 93       	push	r26
     874:	bf 93       	push	r27
     876:	ef 93       	push	r30
     878:	ff 93       	push	r31
  static unsigned char TWI_bufPtr;
  
  switch (TWSR)
     87a:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     87e:	8e 2f       	mov	r24, r30
     880:	90 e0       	ldi	r25, 0x00	; 0
     882:	fc 01       	movw	r30, r24
     884:	38 97       	sbiw	r30, 0x08	; 8
     886:	e1 35       	cpi	r30, 0x51	; 81
     888:	f1 05       	cpc	r31, r1
     88a:	08 f0       	brcs	.+2      	; 0x88e <__vector_39+0x32>
     88c:	57 c0       	rjmp	.+174    	; 0x93c <__vector_39+0xe0>
     88e:	88 27       	eor	r24, r24
     890:	ee 58       	subi	r30, 0x8E	; 142
     892:	ff 4f       	sbci	r31, 0xFF	; 255
     894:	8f 4f       	sbci	r24, 0xFF	; 255
     896:	4f c5       	rjmp	.+2718   	; 0x1336 <__tablejump2__>
  {
    case TWI_START:             // START has been transmitted  
    case TWI_REP_START:         // Repeated START has been transmitted
      TWI_bufPtr = 0;                                     // Set buffer pointer to the TWI Address location
     898:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <__data_end>
    case TWI_MTX_ADR_ACK:       // SLA+W has been tramsmitted and ACK received
    case TWI_MTX_DATA_ACK:      // Data byte has been tramsmitted and ACK received
      if (TWI_bufPtr < TWI_msgSize)
     89c:	e0 91 02 02 	lds	r30, 0x0202	; 0x800202 <__data_end>
     8a0:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <TWI_msgSize>
     8a4:	e8 17       	cp	r30, r24
     8a6:	70 f4       	brcc	.+28     	; 0x8c4 <__vector_39+0x68>
      {
        TWDR = TWI_buf[TWI_bufPtr++];
     8a8:	81 e0       	ldi	r24, 0x01	; 1
     8aa:	8e 0f       	add	r24, r30
     8ac:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <__data_end>
     8b0:	f0 e0       	ldi	r31, 0x00	; 0
     8b2:	eb 5f       	subi	r30, 0xFB	; 251
     8b4:	fd 4f       	sbci	r31, 0xFD	; 253
     8b6:	80 81       	ld	r24, Z
     8b8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
        TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     8bc:	85 e8       	ldi	r24, 0x85	; 133
     8be:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     8c2:	43 c0       	rjmp	.+134    	; 0x94a <__vector_39+0xee>
               (1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interupt and clear the flag to send byte
               (0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           //
               (0<<TWWC);                                 //  
      }else                    // Send STOP after last byte
      {
        TWI_statusReg.lastTransOK = TRUE;                 // Set status bits to completed successfully. 
     8c4:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <TWI_statusReg>
     8c8:	81 60       	ori	r24, 0x01	; 1
     8ca:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <TWI_statusReg>
        TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     8ce:	84 e9       	ldi	r24, 0x94	; 148
     8d0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     8d4:	3a c0       	rjmp	.+116    	; 0x94a <__vector_39+0xee>
               (0<<TWEA)|(0<<TWSTA)|(1<<TWSTO)|           // Initiate a STOP condition.
               (0<<TWWC);                                 //
      }
      break;
    case TWI_MRX_DATA_ACK:      // Data byte has been received and ACK tramsmitted
      TWI_buf[TWI_bufPtr++] = TWDR;
     8d6:	e0 91 02 02 	lds	r30, 0x0202	; 0x800202 <__data_end>
     8da:	81 e0       	ldi	r24, 0x01	; 1
     8dc:	8e 0f       	add	r24, r30
     8de:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <__data_end>
     8e2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     8e6:	f0 e0       	ldi	r31, 0x00	; 0
     8e8:	eb 5f       	subi	r30, 0xFB	; 251
     8ea:	fd 4f       	sbci	r31, 0xFD	; 253
     8ec:	80 83       	st	Z, r24
    case TWI_MRX_ADR_ACK:       // SLA+R has been tramsmitted and ACK received
      if (TWI_bufPtr < (TWI_msgSize-1) )                  // Detect the last byte to NACK it.
     8ee:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__data_end>
     8f2:	30 e0       	ldi	r19, 0x00	; 0
     8f4:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <TWI_msgSize>
     8f8:	90 e0       	ldi	r25, 0x00	; 0
     8fa:	01 97       	sbiw	r24, 0x01	; 1
     8fc:	28 17       	cp	r18, r24
     8fe:	39 07       	cpc	r19, r25
     900:	24 f4       	brge	.+8      	; 0x90a <__vector_39+0xae>
      {
        TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     902:	85 ec       	ldi	r24, 0xC5	; 197
     904:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     908:	20 c0       	rjmp	.+64     	; 0x94a <__vector_39+0xee>
               (1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interupt and clear the flag to read next byte
               (1<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // Send ACK after reception
               (0<<TWWC);                                 //  
      }else                    // Send NACK after next reception
      {
        TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     90a:	85 e8       	ldi	r24, 0x85	; 133
     90c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     910:	1c c0       	rjmp	.+56     	; 0x94a <__vector_39+0xee>
               (0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // Send NACK after reception
               (0<<TWWC);                                 // 
      }    
      break; 
    case TWI_MRX_DATA_NACK:     // Data byte has been received and NACK tramsmitted
      TWI_buf[TWI_bufPtr] = TWDR;
     912:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     916:	e0 91 02 02 	lds	r30, 0x0202	; 0x800202 <__data_end>
     91a:	f0 e0       	ldi	r31, 0x00	; 0
     91c:	eb 5f       	subi	r30, 0xFB	; 251
     91e:	fd 4f       	sbci	r31, 0xFD	; 253
     920:	80 83       	st	Z, r24
      TWI_statusReg.lastTransOK = TRUE;                 // Set status bits to completed successfully. 
     922:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <TWI_statusReg>
     926:	81 60       	ori	r24, 0x01	; 1
     928:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <TWI_statusReg>
      TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     92c:	84 e9       	ldi	r24, 0x94	; 148
     92e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
             (0<<TWIE)|(1<<TWINT)|                      // Disable TWI Interrupt and clear the flag
             (0<<TWEA)|(0<<TWSTA)|(1<<TWSTO)|           // Initiate a STOP condition.
             (0<<TWWC);                                 //
      break;      
     932:	0b c0       	rjmp	.+22     	; 0x94a <__vector_39+0xee>
    case TWI_ARB_LOST:          // Arbitration lost
      TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     934:	85 ea       	ldi	r24, 0xA5	; 165
     936:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
             (1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interupt and clear the flag
             (0<<TWEA)|(1<<TWSTA)|(0<<TWSTO)|           // Initiate a (RE)START condition.
             (0<<TWWC);                                 //
      break;
     93a:	07 c0       	rjmp	.+14     	; 0x94a <__vector_39+0xee>
    case TWI_MTX_ADR_NACK:      // SLA+W has been tramsmitted and NACK received
    case TWI_MRX_ADR_NACK:      // SLA+R has been tramsmitted and NACK received    
    case TWI_MTX_DATA_NACK:     // Data byte has been tramsmitted and NACK received
    case TWI_BUS_ERROR:         // Bus error due to an illegal START or STOP condition
    default:     
      TWI_state = TWSR;                                 // Store TWSR and automatically sets clears noErrors bit.
     93c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     940:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
                                                        // Reset TWI Interface
      TWCR = (1<<TWEN)|                                 // Enable TWI-interface and release TWI pins
     944:	84 e0       	ldi	r24, 0x04	; 4
     946:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
             (0<<TWIE)|(0<<TWINT)|                      // Disable Interupt
             (0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // No Signal requests
             (0<<TWWC);                                 //
  }
}
     94a:	ff 91       	pop	r31
     94c:	ef 91       	pop	r30
     94e:	bf 91       	pop	r27
     950:	af 91       	pop	r26
     952:	9f 91       	pop	r25
     954:	8f 91       	pop	r24
     956:	3f 91       	pop	r19
     958:	2f 91       	pop	r18
     95a:	0f 90       	pop	r0
     95c:	0b be       	out	0x3b, r0	; 59
     95e:	0f 90       	pop	r0
     960:	0f be       	out	0x3f, r0	; 63
     962:	0f 90       	pop	r0
     964:	1f 90       	pop	r1
     966:	18 95       	reti

00000968 <mcp_reset>:
	MCP_CMD_REQ_SEND_base = 0x80,
	MCP_CMD_READ_STATUS = 0xA0,
	MCP_CMD_RESET = 0xC0
} McpCommand_t;

void mcp_reset() {
     968:	cf 93       	push	r28
     96a:	df 93       	push	r29
     96c:	1f 92       	push	r1
     96e:	cd b7       	in	r28, 0x3d	; 61
     970:	de b7       	in	r29, 0x3e	; 62
	uint8_t buffer[] = {MCP_CMD_RESET};
     972:	80 ec       	ldi	r24, 0xC0	; 192
     974:	89 83       	std	Y+1, r24	; 0x01
	spi_trancieve(buffer, NULL, 1);
     976:	41 e0       	ldi	r20, 0x01	; 1
     978:	50 e0       	ldi	r21, 0x00	; 0
     97a:	60 e0       	ldi	r22, 0x00	; 0
     97c:	70 e0       	ldi	r23, 0x00	; 0
     97e:	ce 01       	movw	r24, r28
     980:	01 96       	adiw	r24, 0x01	; 1
     982:	cf d0       	rcall	.+414    	; 0xb22 <spi_trancieve>
}
     984:	0f 90       	pop	r0
     986:	df 91       	pop	r29
     988:	cf 91       	pop	r28
     98a:	08 95       	ret

0000098c <mcp_read>:

uint8_t mcp_read(uint8_t addr) {
     98c:	cf 93       	push	r28
     98e:	df 93       	push	r29
     990:	00 d0       	rcall	.+0      	; 0x992 <mcp_read+0x6>
     992:	cd b7       	in	r28, 0x3d	; 61
     994:	de b7       	in	r29, 0x3e	; 62
	uint8_t buffer[] = {MCP_CMD_READ, addr, 0x00};
     996:	93 e0       	ldi	r25, 0x03	; 3
     998:	99 83       	std	Y+1, r25	; 0x01
     99a:	8a 83       	std	Y+2, r24	; 0x02
     99c:	1b 82       	std	Y+3, r1	; 0x03
	spi_trancieve(buffer, buffer, 3);
     99e:	43 e0       	ldi	r20, 0x03	; 3
     9a0:	50 e0       	ldi	r21, 0x00	; 0
     9a2:	be 01       	movw	r22, r28
     9a4:	6f 5f       	subi	r22, 0xFF	; 255
     9a6:	7f 4f       	sbci	r23, 0xFF	; 255
     9a8:	cb 01       	movw	r24, r22
     9aa:	bb d0       	rcall	.+374    	; 0xb22 <spi_trancieve>
	return buffer[2];
}
     9ac:	8b 81       	ldd	r24, Y+3	; 0x03
     9ae:	0f 90       	pop	r0
     9b0:	0f 90       	pop	r0
     9b2:	0f 90       	pop	r0
     9b4:	df 91       	pop	r29
     9b6:	cf 91       	pop	r28
     9b8:	08 95       	ret

000009ba <mcp_write>:


void mcp_write(uint8_t addr, uint8_t value) {
     9ba:	cf 93       	push	r28
     9bc:	df 93       	push	r29
     9be:	00 d0       	rcall	.+0      	; 0x9c0 <mcp_write+0x6>
     9c0:	cd b7       	in	r28, 0x3d	; 61
     9c2:	de b7       	in	r29, 0x3e	; 62
	uint8_t buffer[] = {MCP_CMD_WRITE, addr, value};
     9c4:	92 e0       	ldi	r25, 0x02	; 2
     9c6:	99 83       	std	Y+1, r25	; 0x01
     9c8:	8a 83       	std	Y+2, r24	; 0x02
     9ca:	6b 83       	std	Y+3, r22	; 0x03
	spi_trancieve(buffer, NULL, 3);
     9cc:	43 e0       	ldi	r20, 0x03	; 3
     9ce:	50 e0       	ldi	r21, 0x00	; 0
     9d0:	60 e0       	ldi	r22, 0x00	; 0
     9d2:	70 e0       	ldi	r23, 0x00	; 0
     9d4:	ce 01       	movw	r24, r28
     9d6:	01 96       	adiw	r24, 0x01	; 1
     9d8:	a4 d0       	rcall	.+328    	; 0xb22 <spi_trancieve>
}
     9da:	0f 90       	pop	r0
     9dc:	0f 90       	pop	r0
     9de:	0f 90       	pop	r0
     9e0:	df 91       	pop	r29
     9e2:	cf 91       	pop	r28
     9e4:	08 95       	ret

000009e6 <mcp_modify_bit>:

void mcp_modify_bit(uint8_t addr, uint8_t mask, uint8_t value) {
     9e6:	cf 93       	push	r28
     9e8:	df 93       	push	r29
     9ea:	00 d0       	rcall	.+0      	; 0x9ec <mcp_modify_bit+0x6>
     9ec:	1f 92       	push	r1
     9ee:	cd b7       	in	r28, 0x3d	; 61
     9f0:	de b7       	in	r29, 0x3e	; 62
	uint8_t buffer[] = {MCP_CMD_BIT_MODIFY, addr, mask, value};
     9f2:	95 e0       	ldi	r25, 0x05	; 5
     9f4:	99 83       	std	Y+1, r25	; 0x01
     9f6:	8a 83       	std	Y+2, r24	; 0x02
     9f8:	6b 83       	std	Y+3, r22	; 0x03
     9fa:	4c 83       	std	Y+4, r20	; 0x04
	spi_trancieve(buffer, NULL, 4);
     9fc:	44 e0       	ldi	r20, 0x04	; 4
     9fe:	50 e0       	ldi	r21, 0x00	; 0
     a00:	60 e0       	ldi	r22, 0x00	; 0
     a02:	70 e0       	ldi	r23, 0x00	; 0
     a04:	ce 01       	movw	r24, r28
     a06:	01 96       	adiw	r24, 0x01	; 1
     a08:	8c d0       	rcall	.+280    	; 0xb22 <spi_trancieve>
}
     a0a:	0f 90       	pop	r0
     a0c:	0f 90       	pop	r0
     a0e:	0f 90       	pop	r0
     a10:	0f 90       	pop	r0
     a12:	df 91       	pop	r29
     a14:	cf 91       	pop	r28
     a16:	08 95       	ret

00000a18 <mcp_request_to_send>:

void mcp_request_to_send(bool buffer0, bool buffer1, bool buffer2) {
     a18:	cf 93       	push	r28
     a1a:	df 93       	push	r29
     a1c:	1f 92       	push	r1
     a1e:	cd b7       	in	r28, 0x3d	; 61
     a20:	de b7       	in	r29, 0x3e	; 62
	uint8_t cmd = MCP_CMD_REQ_SEND_base;
	if (buffer0) cmd |= (1 << 0);
     a22:	88 23       	and	r24, r24
     a24:	11 f0       	breq	.+4      	; 0xa2a <mcp_request_to_send+0x12>
     a26:	81 e8       	ldi	r24, 0x81	; 129
     a28:	01 c0       	rjmp	.+2      	; 0xa2c <mcp_request_to_send+0x14>
	uint8_t buffer[] = {MCP_CMD_BIT_MODIFY, addr, mask, value};
	spi_trancieve(buffer, NULL, 4);
}

void mcp_request_to_send(bool buffer0, bool buffer1, bool buffer2) {
	uint8_t cmd = MCP_CMD_REQ_SEND_base;
     a2a:	80 e8       	ldi	r24, 0x80	; 128
	if (buffer0) cmd |= (1 << 0);
	if (buffer1) cmd |= (1 << 1);
     a2c:	61 11       	cpse	r22, r1
     a2e:	82 60       	ori	r24, 0x02	; 2
	if (buffer2) cmd |= (1 << 2);
     a30:	41 11       	cpse	r20, r1
     a32:	84 60       	ori	r24, 0x04	; 4

	uint8_t buffer[] = {cmd};
     a34:	89 83       	std	Y+1, r24	; 0x01

	spi_trancieve(buffer, NULL, 1);
     a36:	41 e0       	ldi	r20, 0x01	; 1
     a38:	50 e0       	ldi	r21, 0x00	; 0
     a3a:	60 e0       	ldi	r22, 0x00	; 0
     a3c:	70 e0       	ldi	r23, 0x00	; 0
     a3e:	ce 01       	movw	r24, r28
     a40:	01 96       	adiw	r24, 0x01	; 1
     a42:	6f d0       	rcall	.+222    	; 0xb22 <spi_trancieve>
}
     a44:	0f 90       	pop	r0
     a46:	df 91       	pop	r29
     a48:	cf 91       	pop	r28
     a4a:	08 95       	ret

00000a4c <mcp_read_status>:

McpStatus_t mcp_read_status() {
     a4c:	1f 93       	push	r17
     a4e:	cf 93       	push	r28
     a50:	df 93       	push	r29
     a52:	00 d0       	rcall	.+0      	; 0xa54 <mcp_read_status+0x8>
     a54:	cd b7       	in	r28, 0x3d	; 61
     a56:	de b7       	in	r29, 0x3e	; 62
	// Retry until read succeeds
	while (true) {
		uint8_t buffer[] = {MCP_CMD_READ_STATUS, 0x00, 0x00};
     a58:	10 ea       	ldi	r17, 0xA0	; 160
     a5a:	19 83       	std	Y+1, r17	; 0x01
     a5c:	1a 82       	std	Y+2, r1	; 0x02
     a5e:	1b 82       	std	Y+3, r1	; 0x03
		spi_trancieve(buffer, buffer, 3);
     a60:	43 e0       	ldi	r20, 0x03	; 3
     a62:	50 e0       	ldi	r21, 0x00	; 0
     a64:	be 01       	movw	r22, r28
     a66:	6f 5f       	subi	r22, 0xFF	; 255
     a68:	7f 4f       	sbci	r23, 0xFF	; 255
     a6a:	cb 01       	movw	r24, r22
     a6c:	5a d0       	rcall	.+180    	; 0xb22 <spi_trancieve>

		if (buffer[1] == buffer[2]) {
     a6e:	9a 81       	ldd	r25, Y+2	; 0x02
     a70:	8b 81       	ldd	r24, Y+3	; 0x03
     a72:	98 13       	cpse	r25, r24
     a74:	f2 cf       	rjmp	.-28     	; 0xa5a <mcp_read_status+0xe>
			return *((McpStatus_t*)(buffer + 1));
		}
	}
}
     a76:	89 2f       	mov	r24, r25
     a78:	0f 90       	pop	r0
     a7a:	0f 90       	pop	r0
     a7c:	0f 90       	pop	r0
     a7e:	df 91       	pop	r29
     a80:	cf 91       	pop	r28
     a82:	1f 91       	pop	r17
     a84:	08 95       	ret

00000a86 <pwm_init>:
	TCCR1A = (1 << WGM11) | (0 << WGM10) | (1 << COM1B1) | (0 << COM1B0);
	TCCR1B = (1 << WGM13) | (1 << WGM12) | (1 << CS11);
}

void pwm_set_duty_cycle(uint8_t duty_cycle) {
	OCR1B = (uint16_t)((uint32_t)duty_cycle * TC_TOP / 100);
     a86:	80 e4       	ldi	r24, 0x40	; 64
     a88:	9c e9       	ldi	r25, 0x9C	; 156
     a8a:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x700087>
     a8e:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x700086>
     a92:	26 9a       	sbi	0x04, 6	; 4
     a94:	80 e2       	ldi	r24, 0x20	; 32
     a96:	9e e4       	ldi	r25, 0x4E	; 78
     a98:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x70008b>
     a9c:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x70008a>
     aa0:	82 e2       	ldi	r24, 0x22	; 34
     aa2:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
     aa6:	8a e1       	ldi	r24, 0x1A	; 26
     aa8:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
     aac:	08 95       	ret

00000aae <pwm_set_pulse_width>:


uint16_t prev_pulse_width;

void pwm_set_pulse_width(uint16_t pulse_width_us) {
	if (pulse_width_us < 900) {
     aae:	84 38       	cpi	r24, 0x84	; 132
     ab0:	23 e0       	ldi	r18, 0x03	; 3
     ab2:	92 07       	cpc	r25, r18
     ab4:	38 f4       	brcc	.+14     	; 0xac4 <pwm_set_pulse_width+0x16>
		OCR1B = 2 * 900;
     ab6:	88 e0       	ldi	r24, 0x08	; 8
     ab8:	97 e0       	ldi	r25, 0x07	; 7
     aba:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x70008b>
     abe:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x70008a>
     ac2:	08 95       	ret
	} else if (pulse_width_us > 2100) {
     ac4:	85 33       	cpi	r24, 0x35	; 53
     ac6:	28 e0       	ldi	r18, 0x08	; 8
     ac8:	92 07       	cpc	r25, r18
     aca:	38 f0       	brcs	.+14     	; 0xada <pwm_set_pulse_width+0x2c>
		OCR1B = 2 * 2100;
     acc:	88 e6       	ldi	r24, 0x68	; 104
     ace:	90 e1       	ldi	r25, 0x10	; 16
     ad0:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x70008b>
     ad4:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x70008a>
     ad8:	08 95       	ret
	} else {
		OCR1B = (pulse_width_us * 2);
     ada:	88 0f       	add	r24, r24
     adc:	99 1f       	adc	r25, r25
     ade:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x70008b>
     ae2:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x70008a>
     ae6:	08 95       	ret

00000ae8 <pwm_set_servo_deflection>:
void pwm_set_servo_deflection(uint8_t deflection) {
	const int min_pulse_us = 900;
	const int max_pulse_us = 2100;
	const int max_deflection = 100;
	
	pwm_set_pulse_width(min_pulse_us + 
     ae8:	28 2f       	mov	r18, r24
     aea:	30 e0       	ldi	r19, 0x00	; 0
     aec:	a0 eb       	ldi	r26, 0xB0	; 176
     aee:	b4 e0       	ldi	r27, 0x04	; 4
     af0:	2a d4       	rcall	.+2132   	; 0x1346 <__umulhisi3>
     af2:	24 e6       	ldi	r18, 0x64	; 100
     af4:	30 e0       	ldi	r19, 0x00	; 0
     af6:	40 e0       	ldi	r20, 0x00	; 0
     af8:	50 e0       	ldi	r21, 0x00	; 0
     afa:	df d3       	rcall	.+1982   	; 0x12ba <__udivmodsi4>
     afc:	c9 01       	movw	r24, r18
     afe:	8c 57       	subi	r24, 0x7C	; 124
     b00:	9c 4f       	sbci	r25, 0xFC	; 252
     b02:	d5 cf       	rjmp	.-86     	; 0xaae <pwm_set_pulse_width>
     b04:	08 95       	ret

00000b06 <spi_init>:
#define MOSI_PIN 2
#define MISO_PIN 3
#define SCK_PIN 1

void spi_init() {
	SPI_DDR |= (1 << SPI_SS_PIN) | (1 << SS_PIN) | (1 << MOSI_PIN) | (1 << SCK_PIN);
     b06:	84 b1       	in	r24, 0x04	; 4
     b08:	87 68       	ori	r24, 0x87	; 135
     b0a:	84 b9       	out	0x04, r24	; 4
	SPI_DDR &= ~(1 << MISO_PIN);
     b0c:	23 98       	cbi	0x04, 3	; 4
	SPI_PORT |= (1 << SPI_SS_PIN);
     b0e:	28 9a       	sbi	0x05, 0	; 5
	SPI_PORT |= (1 << SS_PIN);
     b10:	2f 9a       	sbi	0x05, 7	; 5

	PRR0 &= ~(1 << PRSPI);
     b12:	e4 e6       	ldi	r30, 0x64	; 100
     b14:	f0 e0       	ldi	r31, 0x00	; 0
     b16:	80 81       	ld	r24, Z
     b18:	8b 7f       	andi	r24, 0xFB	; 251
     b1a:	80 83       	st	Z, r24

	SPCR = (1 << MSTR) | (1<< CPHA) | (1 << CPOL) | (1 << SPE) | (1 << SPR0);
     b1c:	8d e5       	ldi	r24, 0x5D	; 93
     b1e:	8c bd       	out	0x2c, r24	; 44
     b20:	08 95       	ret

00000b22 <spi_trancieve>:
}

void spi_trancieve(uint8_t* tx_buffer, uint8_t* rx_buffer, int length) {
	SPI_PORT &= ~(1 << SS_PIN);
     b22:	2f 98       	cbi	0x05, 7	; 5
	
	for(int i = 0; i < length; i++) {
     b24:	14 16       	cp	r1, r20
     b26:	15 06       	cpc	r1, r21
     b28:	94 f4       	brge	.+36     	; 0xb4e <spi_trancieve+0x2c>
     b2a:	fc 01       	movw	r30, r24
     b2c:	db 01       	movw	r26, r22
     b2e:	48 0f       	add	r20, r24
     b30:	59 1f       	adc	r21, r25
		SPDR = tx_buffer[i];
     b32:	91 91       	ld	r25, Z+
     b34:	9e bd       	out	0x2e, r25	; 46
		
		// Wait for word transmission to complete
		while (!(SPSR & (1 << SPIF))) { };
     b36:	0d b4       	in	r0, 0x2d	; 45
     b38:	07 fe       	sbrs	r0, 7
     b3a:	fd cf       	rjmp	.-6      	; 0xb36 <spi_trancieve+0x14>

		if (rx_buffer != NULL) {
     b3c:	61 15       	cp	r22, r1
     b3e:	71 05       	cpc	r23, r1
     b40:	11 f0       	breq	.+4      	; 0xb46 <spi_trancieve+0x24>
			rx_buffer[i] = SPDR;
     b42:	9e b5       	in	r25, 0x2e	; 46
     b44:	9c 93       	st	X, r25
     b46:	11 96       	adiw	r26, 0x01	; 1
}

void spi_trancieve(uint8_t* tx_buffer, uint8_t* rx_buffer, int length) {
	SPI_PORT &= ~(1 << SS_PIN);
	
	for(int i = 0; i < length; i++) {
     b48:	e4 17       	cp	r30, r20
     b4a:	f5 07       	cpc	r31, r21
     b4c:	91 f7       	brne	.-28     	; 0xb32 <spi_trancieve+0x10>
		if (rx_buffer != NULL) {
			rx_buffer[i] = SPDR;
		}
	}

	SPI_PORT |= (1 << SS_PIN);
     b4e:	2f 9a       	sbi	0x05, 7	; 5
     b50:	08 95       	ret

00000b52 <main>:
#include "drivers/motor.h"
#include "drivers/shooter.h"
#include "drivers/song.h"

int main(void)
{
     b52:	cf 93       	push	r28
     b54:	df 93       	push	r29
     b56:	cd b7       	in	r28, 0x3d	; 61
     b58:	de b7       	in	r29, 0x3e	; 62
     b5a:	6b 97       	sbiw	r28, 0x1b	; 27
     b5c:	0f b6       	in	r0, 0x3f	; 63
     b5e:	f8 94       	cli
     b60:	de bf       	out	0x3e, r29	; 62
     b62:	0f be       	out	0x3f, r0	; 63
	spi_init();
	can_init();
	pwm_init();
	adc_init();
	adc_init_channel(AdcCh_CH0);
     b64:	cd bf       	out	0x3d, r28	; 61
	motor_init();
     b66:	cf df       	rcall	.-98     	; 0xb06 <spi_init>
	shooter_init();
     b68:	bc db       	rcall	.-2184   	; 0x2e2 <can_init>
	sei();
     b6a:	8d df       	rcall	.-230    	; 0xa86 <pwm_init>

	pwm_set_servo_deflection(50);
     b6c:	46 db       	rcall	.-2420   	; 0x1fa <adc_init>
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	4e db       	rcall	.-2404   	; 0x20e <adc_init_channel>
	

	// Home the motor to the left edge
	motor_enable();
     b72:	7f dc       	rcall	.-1794   	; 0x472 <motor_init>
     b74:	06 dd       	rcall	.-1524   	; 0x582 <shooter_init>
	motor_set(100, DIR_LEFT);
     b76:	78 94       	sei
     b78:	82 e3       	ldi	r24, 0x32	; 50
     b7a:	b6 df       	rcall	.-148    	; 0xae8 <pwm_set_servo_deflection>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b7c:	9d dc       	rcall	.-1734   	; 0x4b8 <motor_enable>
     b7e:	60 e0       	ldi	r22, 0x00	; 0
     b80:	84 e6       	ldi	r24, 0x64	; 100
     b82:	a0 dc       	rcall	.-1728   	; 0x4c4 <motor_set>
     b84:	2f ef       	ldi	r18, 0xFF	; 255
     b86:	33 ec       	ldi	r19, 0xC3	; 195
     b88:	49 e0       	ldi	r20, 0x09	; 9
     b8a:	21 50       	subi	r18, 0x01	; 1

	_delay_ms(200);
	motor_reset_encoder();
     b8c:	30 40       	sbci	r19, 0x00	; 0
     b8e:	40 40       	sbci	r20, 0x00	; 0
	
	int consecutive_same = 0;
	int16_t stationary_value = 0;
     b90:	e1 f7       	brne	.-8      	; 0xb8a <main+0x38>
     b92:	00 c0       	rjmp	.+0      	; 0xb94 <main+0x42>
	motor_set(100, DIR_LEFT);

	_delay_ms(200);
	motor_reset_encoder();
	
	int consecutive_same = 0;
     b94:	00 00       	nop
     b96:	c7 dc       	rcall	.-1650   	; 0x526 <motor_reset_encoder>
	int16_t stationary_value = 0;
	while(consecutive_same < 10) {
		int16_t encoder_reading = motor_read_encoder();
     b98:	e1 2c       	mov	r14, r1
     b9a:	f1 2c       	mov	r15, r1
		if (encoder_reading == stationary_value) {
     b9c:	00 e0       	ldi	r16, 0x00	; 0
     b9e:	10 e0       	ldi	r17, 0x00	; 0
     ba0:	cf dc       	rcall	.-1634   	; 0x540 <motor_read_encoder>
			consecutive_same++;
     ba2:	8e 15       	cp	r24, r14
     ba4:	9f 05       	cpc	r25, r15
     ba6:	11 f4       	brne	.+4      	; 0xbac <main+0x5a>
     ba8:	0f 5f       	subi	r16, 0xFF	; 255
     baa:	1f 4f       	sbci	r17, 0xFF	; 255
     bac:	af ef       	ldi	r26, 0xFF	; 255
     bae:	b9 ef       	ldi	r27, 0xF9	; 249
     bb0:	20 e0       	ldi	r18, 0x00	; 0
     bb2:	a1 50       	subi	r26, 0x01	; 1
     bb4:	b0 40       	sbci	r27, 0x00	; 0
	_delay_ms(200);
	motor_reset_encoder();
	
	int consecutive_same = 0;
	int16_t stationary_value = 0;
	while(consecutive_same < 10) {
     bb6:	20 40       	sbci	r18, 0x00	; 0
     bb8:	e1 f7       	brne	.-8      	; 0xbb2 <main+0x60>
     bba:	00 c0       	rjmp	.+0      	; 0xbbc <main+0x6a>
			stationary_value = encoder_reading;
		}
		_delay_ms(20);
	}
	
	motor_set(0, DIR_LEFT);
     bbc:	00 00       	nop
     bbe:	7c 01       	movw	r14, r24
     bc0:	0a 30       	cpi	r16, 0x0A	; 10
     bc2:	11 05       	cpc	r17, r1

	motor_reset_encoder();
     bc4:	6c f3       	brlt	.-38     	; 0xba0 <main+0x4e>
     bc6:	60 e0       	ldi	r22, 0x00	; 0
	
	// Define constants and variable for the regulator
	float position_reference = 0;
	float integrated_error = 0;
	float prev_position_error = 0;
	float velocity = 0.0;
     bc8:	80 e0       	ldi	r24, 0x00	; 0
     bca:	7c dc       	rcall	.-1800   	; 0x4c4 <motor_set>
     bcc:	ac dc       	rcall	.-1704   	; 0x526 <motor_reset_encoder>
     bce:	18 8a       	std	Y+16, r1	; 0x10
	motor_reset_encoder();
	
	// Define constants and variable for the regulator
	float position_reference = 0;
	float integrated_error = 0;
	float prev_position_error = 0;
     bd0:	19 8a       	std	Y+17, r1	; 0x11
     bd2:	1a 8a       	std	Y+18, r1	; 0x12

	motor_reset_encoder();
	
	// Define constants and variable for the regulator
	float position_reference = 0;
	float integrated_error = 0;
     bd4:	1b 8a       	std	Y+19, r1	; 0x13
     bd6:	41 2c       	mov	r4, r1
     bd8:	31 2c       	mov	r3, r1
	motor_set(0, DIR_LEFT);

	motor_reset_encoder();
	
	// Define constants and variable for the regulator
	float position_reference = 0;
     bda:	21 2c       	mov	r2, r1
     bdc:	1c 86       	std	Y+12, r1	; 0x0c
     bde:	1d 86       	std	Y+13, r1	; 0x0d

		if (voltage > 200) {
			voltage = 200;
		}

		motor_set((uint8_t)voltage, voltage_negative ? DIR_LEFT : DIR_RIGHT);
     be0:	1e 86       	std	Y+14, r1	; 0x0e
     be2:	1f 86       	std	Y+15, r1	; 0x0f
     be4:	18 8e       	std	Y+24, r1	; 0x18
	const uint8_t deadband = 20;

	while (1)
	{
		// Run regulator
		float enc_pos = motor_read_encoder();
     be6:	19 8e       	std	Y+25, r1	; 0x19
		float position = 255.0 * enc_pos / -8657.0;
     be8:	1a 8e       	std	Y+26, r1	; 0x1a
     bea:	1b 8e       	std	Y+27, r1	; 0x1b
     bec:	ff 24       	eor	r15, r15
     bee:	f3 94       	inc	r15
     bf0:	14 2d       	mov	r17, r4
     bf2:	72 2c       	mov	r7, r2
     bf4:	a5 dc       	rcall	.-1718   	; 0x540 <motor_read_encoder>
     bf6:	bc 01       	movw	r22, r24
     bf8:	99 0f       	add	r25, r25
     bfa:	88 0b       	sbc	r24, r24
     bfc:	99 0b       	sbc	r25, r25
     bfe:	24 d2       	rcall	.+1096   	; 0x1048 <__floatsisf>
     c00:	20 e0       	ldi	r18, 0x00	; 0
     c02:	30 e0       	ldi	r19, 0x00	; 0
     c04:	4f e7       	ldi	r20, 0x7F	; 127
     c06:	53 e4       	ldi	r21, 0x43	; 67
     c08:	d3 d2       	rcall	.+1446   	; 0x11b0 <__mulsf3>
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	34 e4       	ldi	r19, 0x44	; 68
     c0e:	47 e0       	ldi	r20, 0x07	; 7
     c10:	56 ec       	ldi	r21, 0xC6	; 198
		float position_error = position_reference - position;
     c12:	84 d1       	rcall	.+776    	; 0xf1c <__divsf3>
     c14:	6c 8b       	std	Y+20, r22	; 0x14
     c16:	7d 8b       	std	Y+21, r23	; 0x15
     c18:	8e 8b       	std	Y+22, r24	; 0x16
     c1a:	9f 8b       	std	Y+23, r25	; 0x17
     c1c:	9b 01       	movw	r18, r22
     c1e:	ac 01       	movw	r20, r24
     c20:	68 8d       	ldd	r22, Y+24	; 0x18
     c22:	79 8d       	ldd	r23, Y+25	; 0x19
     c24:	8a 8d       	ldd	r24, Y+26	; 0x1a
     c26:	9b 8d       	ldd	r25, Y+27	; 0x1b
		
		integrated_error += position_error;
     c28:	10 d1       	rcall	.+544    	; 0xe4a <__subsf3>
     c2a:	e6 2e       	mov	r14, r22
     c2c:	d7 2e       	mov	r13, r23
     c2e:	c8 2e       	mov	r12, r24
     c30:	09 2f       	mov	r16, r25
     c32:	26 2f       	mov	r18, r22
     c34:	37 2f       	mov	r19, r23
     c36:	48 2f       	mov	r20, r24
     c38:	59 2f       	mov	r21, r25
     c3a:	6c 85       	ldd	r22, Y+12	; 0x0c
     c3c:	7d 85       	ldd	r23, Y+13	; 0x0d
     c3e:	8e 85       	ldd	r24, Y+14	; 0x0e
		velocity = 0.95 * velocity + 0.05 * (position_error - prev_position_error);
     c40:	9f 85       	ldd	r25, Y+15	; 0x0f
     c42:	04 d1       	rcall	.+520    	; 0xe4c <__addsf3>
     c44:	6c 87       	std	Y+12, r22	; 0x0c
     c46:	7d 87       	std	Y+13, r23	; 0x0d
     c48:	8e 87       	std	Y+14, r24	; 0x0e
     c4a:	9f 87       	std	Y+15, r25	; 0x0f
     c4c:	23 e3       	ldi	r18, 0x33	; 51
     c4e:	33 e3       	ldi	r19, 0x33	; 51
     c50:	43 e7       	ldi	r20, 0x73	; 115
     c52:	5f e3       	ldi	r21, 0x3F	; 63
     c54:	68 89       	ldd	r22, Y+16	; 0x10
     c56:	79 89       	ldd	r23, Y+17	; 0x11
     c58:	8a 89       	ldd	r24, Y+18	; 0x12
     c5a:	9b 89       	ldd	r25, Y+19	; 0x13
     c5c:	a9 d2       	rcall	.+1362   	; 0x11b0 <__mulsf3>
     c5e:	4b 01       	movw	r8, r22
     c60:	5c 01       	movw	r10, r24
     c62:	23 2d       	mov	r18, r3
     c64:	31 2f       	mov	r19, r17
     c66:	42 2d       	mov	r20, r2
     c68:	57 2d       	mov	r21, r7
     c6a:	6e 2d       	mov	r22, r14
     c6c:	7d 2d       	mov	r23, r13
     c6e:	8c 2d       	mov	r24, r12
     c70:	90 2f       	mov	r25, r16
     c72:	eb d0       	rcall	.+470    	; 0xe4a <__subsf3>
     c74:	2d ec       	ldi	r18, 0xCD	; 205
     c76:	3c ec       	ldi	r19, 0xCC	; 204
     c78:	4c e4       	ldi	r20, 0x4C	; 76
     c7a:	5d e3       	ldi	r21, 0x3D	; 61
     c7c:	99 d2       	rcall	.+1330   	; 0x11b0 <__mulsf3>

		float voltage = Ki * integrated_error + Kp * position_error + Kd * velocity;
     c7e:	a5 01       	movw	r20, r10
     c80:	94 01       	movw	r18, r8
     c82:	e4 d0       	rcall	.+456    	; 0xe4c <__addsf3>
     c84:	68 8b       	std	Y+16, r22	; 0x10
     c86:	79 8b       	std	Y+17, r23	; 0x11
     c88:	8a 8b       	std	Y+18, r24	; 0x12
     c8a:	9b 8b       	std	Y+19, r25	; 0x13
     c8c:	2e ed       	ldi	r18, 0xDE	; 222
     c8e:	3d e6       	ldi	r19, 0x6D	; 109
     c90:	4e ed       	ldi	r20, 0xDE	; 222
     c92:	5b e3       	ldi	r21, 0x3B	; 59
     c94:	6c 85       	ldd	r22, Y+12	; 0x0c
     c96:	7d 85       	ldd	r23, Y+13	; 0x0d
     c98:	8e 85       	ldd	r24, Y+14	; 0x0e
     c9a:	9f 85       	ldd	r25, Y+15	; 0x0f
     c9c:	89 d2       	rcall	.+1298   	; 0x11b0 <__mulsf3>
     c9e:	4b 01       	movw	r8, r22
     ca0:	5c 01       	movw	r10, r24
     ca2:	2b e4       	ldi	r18, 0x4B	; 75
     ca4:	37 e3       	ldi	r19, 0x37	; 55
     ca6:	49 e5       	ldi	r20, 0x59	; 89
     ca8:	50 e4       	ldi	r21, 0x40	; 64
     caa:	6e 2d       	mov	r22, r14
     cac:	7d 2d       	mov	r23, r13
     cae:	8c 2d       	mov	r24, r12
     cb0:	90 2f       	mov	r25, r16
     cb2:	7e d2       	rcall	.+1276   	; 0x11b0 <__mulsf3>
     cb4:	9b 01       	movw	r18, r22
     cb6:	ac 01       	movw	r20, r24
     cb8:	c5 01       	movw	r24, r10
     cba:	b4 01       	movw	r22, r8
     cbc:	c7 d0       	rcall	.+398    	; 0xe4c <__addsf3>
     cbe:	4b 01       	movw	r8, r22
     cc0:	5c 01       	movw	r10, r24
     cc2:	2f e8       	ldi	r18, 0x8F	; 143
     cc4:	32 ec       	ldi	r19, 0xC2	; 194
     cc6:	47 e0       	ldi	r20, 0x07	; 7
     cc8:	52 e4       	ldi	r21, 0x42	; 66
     cca:	68 89       	ldd	r22, Y+16	; 0x10
     ccc:	79 89       	ldd	r23, Y+17	; 0x11
     cce:	8a 89       	ldd	r24, Y+18	; 0x12
     cd0:	9b 89       	ldd	r25, Y+19	; 0x13

		prev_position_error = position_error;

		bool voltage_negative = (voltage < 0);

		if (voltage_negative) {
     cd2:	6e d2       	rcall	.+1244   	; 0x11b0 <__mulsf3>
     cd4:	9b 01       	movw	r18, r22
     cd6:	ac 01       	movw	r20, r24
     cd8:	c5 01       	movw	r24, r10
     cda:	b4 01       	movw	r22, r8
     cdc:	b7 d0       	rcall	.+366    	; 0xe4c <__addsf3>
     cde:	2b 01       	movw	r4, r22
			voltage = -voltage;
     ce0:	3c 01       	movw	r6, r24
     ce2:	20 e0       	ldi	r18, 0x00	; 0
     ce4:	30 e0       	ldi	r19, 0x00	; 0
		float position_error = position_reference - position;
		
		integrated_error += position_error;
		velocity = 0.95 * velocity + 0.05 * (position_error - prev_position_error);

		float voltage = Ki * integrated_error + Kp * position_error + Kd * velocity;
     ce6:	a9 01       	movw	r20, r18
     ce8:	15 d1       	rcall	.+554    	; 0xf14 <__cmpsf2>

		if (voltage_negative) {
			voltage = -voltage;
		}

		voltage += deadband;
     cea:	88 23       	and	r24, r24
     cec:	24 f4       	brge	.+8      	; 0xcf6 <main+0x1a4>
     cee:	c3 01       	movw	r24, r6
     cf0:	b2 01       	movw	r22, r4
     cf2:	90 58       	subi	r25, 0x80	; 128
     cf4:	02 c0       	rjmp	.+4      	; 0xcfa <main+0x1a8>

		if (voltage > 200) {
     cf6:	c3 01       	movw	r24, r6
     cf8:	b2 01       	movw	r22, r4
     cfa:	20 e0       	ldi	r18, 0x00	; 0
     cfc:	30 e0       	ldi	r19, 0x00	; 0
     cfe:	40 ea       	ldi	r20, 0xA0	; 160
     d00:	51 e4       	ldi	r21, 0x41	; 65
			voltage = 200;
     d02:	a4 d0       	rcall	.+328    	; 0xe4c <__addsf3>
     d04:	4b 01       	movw	r8, r22
     d06:	5c 01       	movw	r10, r24
     d08:	20 e0       	ldi	r18, 0x00	; 0
     d0a:	30 e0       	ldi	r19, 0x00	; 0
     d0c:	48 e4       	ldi	r20, 0x48	; 72
		}

		motor_set((uint8_t)voltage, voltage_negative ? DIR_LEFT : DIR_RIGHT);
     d0e:	53 e4       	ldi	r21, 0x43	; 67
     d10:	4b d2       	rcall	.+1174   	; 0x11a8 <__gesf2>
     d12:	18 16       	cp	r1, r24
     d14:	44 f4       	brge	.+16     	; 0xd26 <main+0x1d4>
     d16:	0f 2e       	mov	r0, r31
     d18:	81 2c       	mov	r8, r1
     d1a:	91 2c       	mov	r9, r1
     d1c:	f8 e4       	ldi	r31, 0x48	; 72
     d1e:	af 2e       	mov	r10, r31
     d20:	f3 e4       	ldi	r31, 0x43	; 67
     d22:	bf 2e       	mov	r11, r31
     d24:	f0 2d       	mov	r31, r0
     d26:	20 e0       	ldi	r18, 0x00	; 0
     d28:	30 e0       	ldi	r19, 0x00	; 0
     d2a:	a9 01       	movw	r20, r18
     d2c:	c3 01       	movw	r24, r6
     d2e:	b2 01       	movw	r22, r4

		
		// Receive a can message
		CanFrame_t frame;
		if (can_rx_message(&frame)) {
     d30:	f1 d0       	rcall	.+482    	; 0xf14 <__cmpsf2>
     d32:	88 0f       	add	r24, r24
     d34:	88 0b       	sbc	r24, r24
     d36:	18 2f       	mov	r17, r24
     d38:	1f 21       	and	r17, r15
     d3a:	1f 25       	eor	r17, r15
     d3c:	c5 01       	movw	r24, r10
			if (frame.data.u8[3] == 1) {
     d3e:	b4 01       	movw	r22, r8
     d40:	55 d1       	rcall	.+682    	; 0xfec <__fixunssfsi>
				song_play(SONG_END);
     d42:	86 2f       	mov	r24, r22
     d44:	61 2f       	mov	r22, r17
     d46:	be db       	rcall	.-2180   	; 0x4c4 <motor_set>
     d48:	ce 01       	movw	r24, r28
			} else if (frame.data.u8[3] == 2) {
     d4a:	01 96       	adiw	r24, 0x01	; 1
     d4c:	41 db       	rcall	.-2430   	; 0x3d0 <can_rx_message>
				song_play(SONG_START);
     d4e:	88 23       	and	r24, r24
     d50:	09 f4       	brne	.+2      	; 0xd54 <main+0x202>
			} else if (frame.data.u8[3] == 3) {
     d52:	70 c0       	rjmp	.+224    	; 0xe34 <main+0x2e2>
				song_play(SONG_LOADING);
     d54:	8f 81       	ldd	r24, Y+7	; 0x07
     d56:	81 30       	cpi	r24, 0x01	; 1
     d58:	19 f4       	brne	.+6      	; 0xd60 <main+0x20e>
			} else if (frame.data.u8[3] == 4) {
     d5a:	80 e0       	ldi	r24, 0x00	; 0
     d5c:	cc dc       	rcall	.-1640   	; 0x6f6 <song_play>
			song_play(SONG_BEEP);
     d5e:	6a c0       	rjmp	.+212    	; 0xe34 <main+0x2e2>
     d60:	82 30       	cpi	r24, 0x02	; 2
     d62:	19 f4       	brne	.+6      	; 0xd6a <main+0x218>
     d64:	8f 2d       	mov	r24, r15
			} else {
				// Exctract values from can message
				int8_t joystick_x = frame.data.i8[0];
				uint8_t slider = frame.data.u8[1];
     d66:	c7 dc       	rcall	.-1650   	; 0x6f6 <song_play>
				uint8_t should_shoot = frame.data.u8[2];


				// Set servo deflection
				int16_t servo_defl = 100 * (joystick_x - 40 + 127) / 255;
     d68:	65 c0       	rjmp	.+202    	; 0xe34 <main+0x2e2>
     d6a:	83 30       	cpi	r24, 0x03	; 3
     d6c:	19 f4       	brne	.+6      	; 0xd74 <main+0x222>
     d6e:	82 e0       	ldi	r24, 0x02	; 2
     d70:	c2 dc       	rcall	.-1660   	; 0x6f6 <song_play>
     d72:	60 c0       	rjmp	.+192    	; 0xe34 <main+0x2e2>
     d74:	84 30       	cpi	r24, 0x04	; 4
     d76:	19 f4       	brne	.+6      	; 0xd7e <main+0x22c>
     d78:	83 e0       	ldi	r24, 0x03	; 3
     d7a:	bd dc       	rcall	.-1670   	; 0x6f6 <song_play>
     d7c:	5b c0       	rjmp	.+182    	; 0xe34 <main+0x2e2>
     d7e:	1d 81       	ldd	r17, Y+5	; 0x05
     d80:	3e 80       	ldd	r3, Y+6	; 0x06
     d82:	2c 81       	ldd	r18, Y+4	; 0x04
     d84:	02 2e       	mov	r0, r18
     d86:	00 0c       	add	r0, r0
     d88:	33 0b       	sbc	r19, r19
     d8a:	29 5a       	subi	r18, 0xA9	; 169
     d8c:	3f 4f       	sbci	r19, 0xFF	; 255
			
				if (servo_defl > 100) servo_defl = 100;
				if (servo_defl < 0) servo_defl = 0;

				pwm_set_servo_deflection(servo_defl);
     d8e:	44 e6       	ldi	r20, 0x64	; 100
     d90:	42 9f       	mul	r20, r18
     d92:	c0 01       	movw	r24, r0
     d94:	43 9f       	mul	r20, r19
     d96:	90 0d       	add	r25, r0
     d98:	11 24       	eor	r1, r1
			

				// Shoot if needed
				if (should_shoot) {
     d9a:	6f ef       	ldi	r22, 0xFF	; 255
					shooter_shoot();
     d9c:	70 e0       	ldi	r23, 0x00	; 0
     d9e:	7a d2       	rcall	.+1268   	; 0x1294 <__divmodhi4>
				}
			

				// Set the position reference for the motor
				position_reference = slider;
     da0:	65 36       	cpi	r22, 0x65	; 101
     da2:	71 05       	cpc	r23, r1
     da4:	14 f0       	brlt	.+4      	; 0xdaa <main+0x258>
     da6:	64 e6       	ldi	r22, 0x64	; 100
     da8:	70 e0       	ldi	r23, 0x00	; 0
     daa:	cb 01       	movw	r24, r22
     dac:	99 23       	and	r25, r25
     dae:	0c f4       	brge	.+2      	; 0xdb2 <main+0x260>
     db0:	80 e0       	ldi	r24, 0x00	; 0
				if (position_reference < 5) position_reference = 5;
     db2:	9a de       	rcall	.-716    	; 0xae8 <pwm_set_servo_deflection>
     db4:	31 10       	cpse	r3, r1
     db6:	e8 db       	rcall	.-2096   	; 0x588 <shooter_shoot>
     db8:	61 2f       	mov	r22, r17
     dba:	70 e0       	ldi	r23, 0x00	; 0
     dbc:	80 e0       	ldi	r24, 0x00	; 0
				if (position_reference > 250) position_reference = 250;
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	41 d1       	rcall	.+642    	; 0x1044 <__floatunsisf>
     dc2:	68 8f       	std	Y+24, r22	; 0x18
     dc4:	79 8f       	std	Y+25, r23	; 0x19
     dc6:	8a 8f       	std	Y+26, r24	; 0x1a
     dc8:	9b 8f       	std	Y+27, r25	; 0x1b
     dca:	20 e0       	ldi	r18, 0x00	; 0
     dcc:	30 e0       	ldi	r19, 0x00	; 0
     dce:	40 ea       	ldi	r20, 0xA0	; 160
     dd0:	50 e4       	ldi	r21, 0x40	; 64
     dd2:	a0 d0       	rcall	.+320    	; 0xf14 <__cmpsf2>
     dd4:	88 23       	and	r24, r24
     dd6:	a4 f0       	brlt	.+40     	; 0xe00 <main+0x2ae>
     dd8:	20 e0       	ldi	r18, 0x00	; 0
     dda:	30 e0       	ldi	r19, 0x00	; 0
     ddc:	4a e7       	ldi	r20, 0x7A	; 122
     dde:	53 e4       	ldi	r21, 0x43	; 67
     de0:	68 8d       	ldd	r22, Y+24	; 0x18
     de2:	79 8d       	ldd	r23, Y+25	; 0x19
     de4:	8a 8d       	ldd	r24, Y+26	; 0x1a
				}
			

				// Set the position reference for the motor
				position_reference = slider;
				if (position_reference < 5) position_reference = 5;
     de6:	9b 8d       	ldd	r25, Y+27	; 0x1b
     de8:	df d1       	rcall	.+958    	; 0x11a8 <__gesf2>
     dea:	18 16       	cp	r1, r24
     dec:	8c f4       	brge	.+34     	; 0xe10 <main+0x2be>
     dee:	80 e0       	ldi	r24, 0x00	; 0
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	aa e7       	ldi	r26, 0x7A	; 122
     df4:	b3 e4       	ldi	r27, 0x43	; 67
				if (position_reference > 250) position_reference = 250;

			
				// Send the return message
				frame.id = 0x120;
     df6:	88 8f       	std	Y+24, r24	; 0x18
     df8:	99 8f       	std	Y+25, r25	; 0x19
     dfa:	aa 8f       	std	Y+26, r26	; 0x1a
     dfc:	bb 8f       	std	Y+27, r27	; 0x1b
				frame.length = 0x2;
     dfe:	08 c0       	rjmp	.+16     	; 0xe10 <main+0x2be>
     e00:	80 e0       	ldi	r24, 0x00	; 0
			
				frame.data.u8[0] = adc_read(AdcCh_CH0);
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	a0 ea       	ldi	r26, 0xA0	; 160
     e06:	b0 e4       	ldi	r27, 0x40	; 64
     e08:	88 8f       	std	Y+24, r24	; 0x18
				frame.data.u8[1] = position;
     e0a:	99 8f       	std	Y+25, r25	; 0x19
     e0c:	aa 8f       	std	Y+26, r26	; 0x1a
     e0e:	bb 8f       	std	Y+27, r27	; 0x1b
     e10:	a0 e2       	ldi	r26, 0x20	; 32
     e12:	b1 e0       	ldi	r27, 0x01	; 1
     e14:	ba 83       	std	Y+2, r27	; 0x02
     e16:	a9 83       	std	Y+1, r26	; 0x01

				can_tx_message(&frame);
     e18:	b2 e0       	ldi	r27, 0x02	; 2
     e1a:	bb 83       	std	Y+3, r27	; 0x03
     e1c:	80 e0       	ldi	r24, 0x00	; 0
     e1e:	53 da       	rcall	.-2906   	; 0x2c6 <adc_read>
     e20:	8c 83       	std	Y+4, r24	; 0x04
     e22:	6c 89       	ldd	r22, Y+20	; 0x14
     e24:	7d 89       	ldd	r23, Y+21	; 0x15
     e26:	8e 89       	ldd	r24, Y+22	; 0x16
     e28:	9f 89       	ldd	r25, Y+23	; 0x17
     e2a:	e0 d0       	rcall	.+448    	; 0xfec <__fixunssfsi>
		integrated_error += position_error;
		velocity = 0.95 * velocity + 0.05 * (position_error - prev_position_error);

		float voltage = Ki * integrated_error + Kp * position_error + Kd * velocity;

		prev_position_error = position_error;
     e2c:	6d 83       	std	Y+5, r22	; 0x05
     e2e:	ce 01       	movw	r24, r28
     e30:	01 96       	adiw	r24, 0x01	; 1
     e32:	89 da       	rcall	.-2798   	; 0x346 <can_tx_message>
				can_tx_message(&frame);
			}
		}
		
		_delay_ms(10);
    }
     e34:	8f e3       	ldi	r24, 0x3F	; 63
     e36:	9c e9       	ldi	r25, 0x9C	; 156
     e38:	01 97       	sbiw	r24, 0x01	; 1
     e3a:	f1 f7       	brne	.-4      	; 0xe38 <main+0x2e6>
     e3c:	00 c0       	rjmp	.+0      	; 0xe3e <main+0x2ec>
     e3e:	00 00       	nop
     e40:	3e 2c       	mov	r3, r14
     e42:	1d 2d       	mov	r17, r13
     e44:	2c 2c       	mov	r2, r12
     e46:	70 2e       	mov	r7, r16
     e48:	d5 ce       	rjmp	.-598    	; 0xbf4 <main+0xa2>

00000e4a <__subsf3>:
     e4a:	50 58       	subi	r21, 0x80	; 128

00000e4c <__addsf3>:
     e4c:	bb 27       	eor	r27, r27
     e4e:	aa 27       	eor	r26, r26
     e50:	0e d0       	rcall	.+28     	; 0xe6e <__addsf3x>
     e52:	70 c1       	rjmp	.+736    	; 0x1134 <__fp_round>
     e54:	61 d1       	rcall	.+706    	; 0x1118 <__fp_pscA>
     e56:	30 f0       	brcs	.+12     	; 0xe64 <__addsf3+0x18>
     e58:	66 d1       	rcall	.+716    	; 0x1126 <__fp_pscB>
     e5a:	20 f0       	brcs	.+8      	; 0xe64 <__addsf3+0x18>
     e5c:	31 f4       	brne	.+12     	; 0xe6a <__addsf3+0x1e>
     e5e:	9f 3f       	cpi	r25, 0xFF	; 255
     e60:	11 f4       	brne	.+4      	; 0xe66 <__addsf3+0x1a>
     e62:	1e f4       	brtc	.+6      	; 0xe6a <__addsf3+0x1e>
     e64:	56 c1       	rjmp	.+684    	; 0x1112 <__fp_nan>
     e66:	0e f4       	brtc	.+2      	; 0xe6a <__addsf3+0x1e>
     e68:	e0 95       	com	r30
     e6a:	e7 fb       	bst	r30, 7
     e6c:	4c c1       	rjmp	.+664    	; 0x1106 <__fp_inf>

00000e6e <__addsf3x>:
     e6e:	e9 2f       	mov	r30, r25
     e70:	72 d1       	rcall	.+740    	; 0x1156 <__fp_split3>
     e72:	80 f3       	brcs	.-32     	; 0xe54 <__addsf3+0x8>
     e74:	ba 17       	cp	r27, r26
     e76:	62 07       	cpc	r22, r18
     e78:	73 07       	cpc	r23, r19
     e7a:	84 07       	cpc	r24, r20
     e7c:	95 07       	cpc	r25, r21
     e7e:	18 f0       	brcs	.+6      	; 0xe86 <__addsf3x+0x18>
     e80:	71 f4       	brne	.+28     	; 0xe9e <__addsf3x+0x30>
     e82:	9e f5       	brtc	.+102    	; 0xeea <__addsf3x+0x7c>
     e84:	8a c1       	rjmp	.+788    	; 0x119a <__fp_zero>
     e86:	0e f4       	brtc	.+2      	; 0xe8a <__addsf3x+0x1c>
     e88:	e0 95       	com	r30
     e8a:	0b 2e       	mov	r0, r27
     e8c:	ba 2f       	mov	r27, r26
     e8e:	a0 2d       	mov	r26, r0
     e90:	0b 01       	movw	r0, r22
     e92:	b9 01       	movw	r22, r18
     e94:	90 01       	movw	r18, r0
     e96:	0c 01       	movw	r0, r24
     e98:	ca 01       	movw	r24, r20
     e9a:	a0 01       	movw	r20, r0
     e9c:	11 24       	eor	r1, r1
     e9e:	ff 27       	eor	r31, r31
     ea0:	59 1b       	sub	r21, r25
     ea2:	99 f0       	breq	.+38     	; 0xeca <__addsf3x+0x5c>
     ea4:	59 3f       	cpi	r21, 0xF9	; 249
     ea6:	50 f4       	brcc	.+20     	; 0xebc <__addsf3x+0x4e>
     ea8:	50 3e       	cpi	r21, 0xE0	; 224
     eaa:	68 f1       	brcs	.+90     	; 0xf06 <__addsf3x+0x98>
     eac:	1a 16       	cp	r1, r26
     eae:	f0 40       	sbci	r31, 0x00	; 0
     eb0:	a2 2f       	mov	r26, r18
     eb2:	23 2f       	mov	r18, r19
     eb4:	34 2f       	mov	r19, r20
     eb6:	44 27       	eor	r20, r20
     eb8:	58 5f       	subi	r21, 0xF8	; 248
     eba:	f3 cf       	rjmp	.-26     	; 0xea2 <__addsf3x+0x34>
     ebc:	46 95       	lsr	r20
     ebe:	37 95       	ror	r19
     ec0:	27 95       	ror	r18
     ec2:	a7 95       	ror	r26
     ec4:	f0 40       	sbci	r31, 0x00	; 0
     ec6:	53 95       	inc	r21
     ec8:	c9 f7       	brne	.-14     	; 0xebc <__addsf3x+0x4e>
     eca:	7e f4       	brtc	.+30     	; 0xeea <__addsf3x+0x7c>
     ecc:	1f 16       	cp	r1, r31
     ece:	ba 0b       	sbc	r27, r26
     ed0:	62 0b       	sbc	r22, r18
     ed2:	73 0b       	sbc	r23, r19
     ed4:	84 0b       	sbc	r24, r20
     ed6:	ba f0       	brmi	.+46     	; 0xf06 <__addsf3x+0x98>
     ed8:	91 50       	subi	r25, 0x01	; 1
     eda:	a1 f0       	breq	.+40     	; 0xf04 <__addsf3x+0x96>
     edc:	ff 0f       	add	r31, r31
     ede:	bb 1f       	adc	r27, r27
     ee0:	66 1f       	adc	r22, r22
     ee2:	77 1f       	adc	r23, r23
     ee4:	88 1f       	adc	r24, r24
     ee6:	c2 f7       	brpl	.-16     	; 0xed8 <__addsf3x+0x6a>
     ee8:	0e c0       	rjmp	.+28     	; 0xf06 <__addsf3x+0x98>
     eea:	ba 0f       	add	r27, r26
     eec:	62 1f       	adc	r22, r18
     eee:	73 1f       	adc	r23, r19
     ef0:	84 1f       	adc	r24, r20
     ef2:	48 f4       	brcc	.+18     	; 0xf06 <__addsf3x+0x98>
     ef4:	87 95       	ror	r24
     ef6:	77 95       	ror	r23
     ef8:	67 95       	ror	r22
     efa:	b7 95       	ror	r27
     efc:	f7 95       	ror	r31
     efe:	9e 3f       	cpi	r25, 0xFE	; 254
     f00:	08 f0       	brcs	.+2      	; 0xf04 <__addsf3x+0x96>
     f02:	b3 cf       	rjmp	.-154    	; 0xe6a <__addsf3+0x1e>
     f04:	93 95       	inc	r25
     f06:	88 0f       	add	r24, r24
     f08:	08 f0       	brcs	.+2      	; 0xf0c <__addsf3x+0x9e>
     f0a:	99 27       	eor	r25, r25
     f0c:	ee 0f       	add	r30, r30
     f0e:	97 95       	ror	r25
     f10:	87 95       	ror	r24
     f12:	08 95       	ret

00000f14 <__cmpsf2>:
     f14:	d4 d0       	rcall	.+424    	; 0x10be <__fp_cmp>
     f16:	08 f4       	brcc	.+2      	; 0xf1a <__cmpsf2+0x6>
     f18:	81 e0       	ldi	r24, 0x01	; 1
     f1a:	08 95       	ret

00000f1c <__divsf3>:
     f1c:	0c d0       	rcall	.+24     	; 0xf36 <__divsf3x>
     f1e:	0a c1       	rjmp	.+532    	; 0x1134 <__fp_round>
     f20:	02 d1       	rcall	.+516    	; 0x1126 <__fp_pscB>
     f22:	40 f0       	brcs	.+16     	; 0xf34 <__divsf3+0x18>
     f24:	f9 d0       	rcall	.+498    	; 0x1118 <__fp_pscA>
     f26:	30 f0       	brcs	.+12     	; 0xf34 <__divsf3+0x18>
     f28:	21 f4       	brne	.+8      	; 0xf32 <__divsf3+0x16>
     f2a:	5f 3f       	cpi	r21, 0xFF	; 255
     f2c:	19 f0       	breq	.+6      	; 0xf34 <__divsf3+0x18>
     f2e:	eb c0       	rjmp	.+470    	; 0x1106 <__fp_inf>
     f30:	51 11       	cpse	r21, r1
     f32:	34 c1       	rjmp	.+616    	; 0x119c <__fp_szero>
     f34:	ee c0       	rjmp	.+476    	; 0x1112 <__fp_nan>

00000f36 <__divsf3x>:
     f36:	0f d1       	rcall	.+542    	; 0x1156 <__fp_split3>
     f38:	98 f3       	brcs	.-26     	; 0xf20 <__divsf3+0x4>

00000f3a <__divsf3_pse>:
     f3a:	99 23       	and	r25, r25
     f3c:	c9 f3       	breq	.-14     	; 0xf30 <__divsf3+0x14>
     f3e:	55 23       	and	r21, r21
     f40:	b1 f3       	breq	.-20     	; 0xf2e <__divsf3+0x12>
     f42:	95 1b       	sub	r25, r21
     f44:	55 0b       	sbc	r21, r21
     f46:	bb 27       	eor	r27, r27
     f48:	aa 27       	eor	r26, r26
     f4a:	62 17       	cp	r22, r18
     f4c:	73 07       	cpc	r23, r19
     f4e:	84 07       	cpc	r24, r20
     f50:	38 f0       	brcs	.+14     	; 0xf60 <__divsf3_pse+0x26>
     f52:	9f 5f       	subi	r25, 0xFF	; 255
     f54:	5f 4f       	sbci	r21, 0xFF	; 255
     f56:	22 0f       	add	r18, r18
     f58:	33 1f       	adc	r19, r19
     f5a:	44 1f       	adc	r20, r20
     f5c:	aa 1f       	adc	r26, r26
     f5e:	a9 f3       	breq	.-22     	; 0xf4a <__divsf3_pse+0x10>
     f60:	33 d0       	rcall	.+102    	; 0xfc8 <__divsf3_pse+0x8e>
     f62:	0e 2e       	mov	r0, r30
     f64:	3a f0       	brmi	.+14     	; 0xf74 <__divsf3_pse+0x3a>
     f66:	e0 e8       	ldi	r30, 0x80	; 128
     f68:	30 d0       	rcall	.+96     	; 0xfca <__divsf3_pse+0x90>
     f6a:	91 50       	subi	r25, 0x01	; 1
     f6c:	50 40       	sbci	r21, 0x00	; 0
     f6e:	e6 95       	lsr	r30
     f70:	00 1c       	adc	r0, r0
     f72:	ca f7       	brpl	.-14     	; 0xf66 <__divsf3_pse+0x2c>
     f74:	29 d0       	rcall	.+82     	; 0xfc8 <__divsf3_pse+0x8e>
     f76:	fe 2f       	mov	r31, r30
     f78:	27 d0       	rcall	.+78     	; 0xfc8 <__divsf3_pse+0x8e>
     f7a:	66 0f       	add	r22, r22
     f7c:	77 1f       	adc	r23, r23
     f7e:	88 1f       	adc	r24, r24
     f80:	bb 1f       	adc	r27, r27
     f82:	26 17       	cp	r18, r22
     f84:	37 07       	cpc	r19, r23
     f86:	48 07       	cpc	r20, r24
     f88:	ab 07       	cpc	r26, r27
     f8a:	b0 e8       	ldi	r27, 0x80	; 128
     f8c:	09 f0       	breq	.+2      	; 0xf90 <__divsf3_pse+0x56>
     f8e:	bb 0b       	sbc	r27, r27
     f90:	80 2d       	mov	r24, r0
     f92:	bf 01       	movw	r22, r30
     f94:	ff 27       	eor	r31, r31
     f96:	93 58       	subi	r25, 0x83	; 131
     f98:	5f 4f       	sbci	r21, 0xFF	; 255
     f9a:	2a f0       	brmi	.+10     	; 0xfa6 <__divsf3_pse+0x6c>
     f9c:	9e 3f       	cpi	r25, 0xFE	; 254
     f9e:	51 05       	cpc	r21, r1
     fa0:	68 f0       	brcs	.+26     	; 0xfbc <__divsf3_pse+0x82>
     fa2:	b1 c0       	rjmp	.+354    	; 0x1106 <__fp_inf>
     fa4:	fb c0       	rjmp	.+502    	; 0x119c <__fp_szero>
     fa6:	5f 3f       	cpi	r21, 0xFF	; 255
     fa8:	ec f3       	brlt	.-6      	; 0xfa4 <__divsf3_pse+0x6a>
     faa:	98 3e       	cpi	r25, 0xE8	; 232
     fac:	dc f3       	brlt	.-10     	; 0xfa4 <__divsf3_pse+0x6a>
     fae:	86 95       	lsr	r24
     fb0:	77 95       	ror	r23
     fb2:	67 95       	ror	r22
     fb4:	b7 95       	ror	r27
     fb6:	f7 95       	ror	r31
     fb8:	9f 5f       	subi	r25, 0xFF	; 255
     fba:	c9 f7       	brne	.-14     	; 0xfae <__divsf3_pse+0x74>
     fbc:	88 0f       	add	r24, r24
     fbe:	91 1d       	adc	r25, r1
     fc0:	96 95       	lsr	r25
     fc2:	87 95       	ror	r24
     fc4:	97 f9       	bld	r25, 7
     fc6:	08 95       	ret
     fc8:	e1 e0       	ldi	r30, 0x01	; 1
     fca:	66 0f       	add	r22, r22
     fcc:	77 1f       	adc	r23, r23
     fce:	88 1f       	adc	r24, r24
     fd0:	bb 1f       	adc	r27, r27
     fd2:	62 17       	cp	r22, r18
     fd4:	73 07       	cpc	r23, r19
     fd6:	84 07       	cpc	r24, r20
     fd8:	ba 07       	cpc	r27, r26
     fda:	20 f0       	brcs	.+8      	; 0xfe4 <__divsf3_pse+0xaa>
     fdc:	62 1b       	sub	r22, r18
     fde:	73 0b       	sbc	r23, r19
     fe0:	84 0b       	sbc	r24, r20
     fe2:	ba 0b       	sbc	r27, r26
     fe4:	ee 1f       	adc	r30, r30
     fe6:	88 f7       	brcc	.-30     	; 0xfca <__divsf3_pse+0x90>
     fe8:	e0 95       	com	r30
     fea:	08 95       	ret

00000fec <__fixunssfsi>:
     fec:	bc d0       	rcall	.+376    	; 0x1166 <__fp_splitA>
     fee:	88 f0       	brcs	.+34     	; 0x1012 <__fixunssfsi+0x26>
     ff0:	9f 57       	subi	r25, 0x7F	; 127
     ff2:	90 f0       	brcs	.+36     	; 0x1018 <__fixunssfsi+0x2c>
     ff4:	b9 2f       	mov	r27, r25
     ff6:	99 27       	eor	r25, r25
     ff8:	b7 51       	subi	r27, 0x17	; 23
     ffa:	a0 f0       	brcs	.+40     	; 0x1024 <__fixunssfsi+0x38>
     ffc:	d1 f0       	breq	.+52     	; 0x1032 <__fixunssfsi+0x46>
     ffe:	66 0f       	add	r22, r22
    1000:	77 1f       	adc	r23, r23
    1002:	88 1f       	adc	r24, r24
    1004:	99 1f       	adc	r25, r25
    1006:	1a f0       	brmi	.+6      	; 0x100e <__fixunssfsi+0x22>
    1008:	ba 95       	dec	r27
    100a:	c9 f7       	brne	.-14     	; 0xffe <__fixunssfsi+0x12>
    100c:	12 c0       	rjmp	.+36     	; 0x1032 <__fixunssfsi+0x46>
    100e:	b1 30       	cpi	r27, 0x01	; 1
    1010:	81 f0       	breq	.+32     	; 0x1032 <__fixunssfsi+0x46>
    1012:	c3 d0       	rcall	.+390    	; 0x119a <__fp_zero>
    1014:	b1 e0       	ldi	r27, 0x01	; 1
    1016:	08 95       	ret
    1018:	c0 c0       	rjmp	.+384    	; 0x119a <__fp_zero>
    101a:	67 2f       	mov	r22, r23
    101c:	78 2f       	mov	r23, r24
    101e:	88 27       	eor	r24, r24
    1020:	b8 5f       	subi	r27, 0xF8	; 248
    1022:	39 f0       	breq	.+14     	; 0x1032 <__fixunssfsi+0x46>
    1024:	b9 3f       	cpi	r27, 0xF9	; 249
    1026:	cc f3       	brlt	.-14     	; 0x101a <__fixunssfsi+0x2e>
    1028:	86 95       	lsr	r24
    102a:	77 95       	ror	r23
    102c:	67 95       	ror	r22
    102e:	b3 95       	inc	r27
    1030:	d9 f7       	brne	.-10     	; 0x1028 <__fixunssfsi+0x3c>
    1032:	3e f4       	brtc	.+14     	; 0x1042 <__fixunssfsi+0x56>
    1034:	90 95       	com	r25
    1036:	80 95       	com	r24
    1038:	70 95       	com	r23
    103a:	61 95       	neg	r22
    103c:	7f 4f       	sbci	r23, 0xFF	; 255
    103e:	8f 4f       	sbci	r24, 0xFF	; 255
    1040:	9f 4f       	sbci	r25, 0xFF	; 255
    1042:	08 95       	ret

00001044 <__floatunsisf>:
    1044:	e8 94       	clt
    1046:	09 c0       	rjmp	.+18     	; 0x105a <__floatsisf+0x12>

00001048 <__floatsisf>:
    1048:	97 fb       	bst	r25, 7
    104a:	3e f4       	brtc	.+14     	; 0x105a <__floatsisf+0x12>
    104c:	90 95       	com	r25
    104e:	80 95       	com	r24
    1050:	70 95       	com	r23
    1052:	61 95       	neg	r22
    1054:	7f 4f       	sbci	r23, 0xFF	; 255
    1056:	8f 4f       	sbci	r24, 0xFF	; 255
    1058:	9f 4f       	sbci	r25, 0xFF	; 255
    105a:	99 23       	and	r25, r25
    105c:	a9 f0       	breq	.+42     	; 0x1088 <__floatsisf+0x40>
    105e:	f9 2f       	mov	r31, r25
    1060:	96 e9       	ldi	r25, 0x96	; 150
    1062:	bb 27       	eor	r27, r27
    1064:	93 95       	inc	r25
    1066:	f6 95       	lsr	r31
    1068:	87 95       	ror	r24
    106a:	77 95       	ror	r23
    106c:	67 95       	ror	r22
    106e:	b7 95       	ror	r27
    1070:	f1 11       	cpse	r31, r1
    1072:	f8 cf       	rjmp	.-16     	; 0x1064 <__floatsisf+0x1c>
    1074:	fa f4       	brpl	.+62     	; 0x10b4 <__floatsisf+0x6c>
    1076:	bb 0f       	add	r27, r27
    1078:	11 f4       	brne	.+4      	; 0x107e <__floatsisf+0x36>
    107a:	60 ff       	sbrs	r22, 0
    107c:	1b c0       	rjmp	.+54     	; 0x10b4 <__floatsisf+0x6c>
    107e:	6f 5f       	subi	r22, 0xFF	; 255
    1080:	7f 4f       	sbci	r23, 0xFF	; 255
    1082:	8f 4f       	sbci	r24, 0xFF	; 255
    1084:	9f 4f       	sbci	r25, 0xFF	; 255
    1086:	16 c0       	rjmp	.+44     	; 0x10b4 <__floatsisf+0x6c>
    1088:	88 23       	and	r24, r24
    108a:	11 f0       	breq	.+4      	; 0x1090 <__floatsisf+0x48>
    108c:	96 e9       	ldi	r25, 0x96	; 150
    108e:	11 c0       	rjmp	.+34     	; 0x10b2 <__floatsisf+0x6a>
    1090:	77 23       	and	r23, r23
    1092:	21 f0       	breq	.+8      	; 0x109c <__floatsisf+0x54>
    1094:	9e e8       	ldi	r25, 0x8E	; 142
    1096:	87 2f       	mov	r24, r23
    1098:	76 2f       	mov	r23, r22
    109a:	05 c0       	rjmp	.+10     	; 0x10a6 <__floatsisf+0x5e>
    109c:	66 23       	and	r22, r22
    109e:	71 f0       	breq	.+28     	; 0x10bc <__floatsisf+0x74>
    10a0:	96 e8       	ldi	r25, 0x86	; 134
    10a2:	86 2f       	mov	r24, r22
    10a4:	70 e0       	ldi	r23, 0x00	; 0
    10a6:	60 e0       	ldi	r22, 0x00	; 0
    10a8:	2a f0       	brmi	.+10     	; 0x10b4 <__floatsisf+0x6c>
    10aa:	9a 95       	dec	r25
    10ac:	66 0f       	add	r22, r22
    10ae:	77 1f       	adc	r23, r23
    10b0:	88 1f       	adc	r24, r24
    10b2:	da f7       	brpl	.-10     	; 0x10aa <__floatsisf+0x62>
    10b4:	88 0f       	add	r24, r24
    10b6:	96 95       	lsr	r25
    10b8:	87 95       	ror	r24
    10ba:	97 f9       	bld	r25, 7
    10bc:	08 95       	ret

000010be <__fp_cmp>:
    10be:	99 0f       	add	r25, r25
    10c0:	00 08       	sbc	r0, r0
    10c2:	55 0f       	add	r21, r21
    10c4:	aa 0b       	sbc	r26, r26
    10c6:	e0 e8       	ldi	r30, 0x80	; 128
    10c8:	fe ef       	ldi	r31, 0xFE	; 254
    10ca:	16 16       	cp	r1, r22
    10cc:	17 06       	cpc	r1, r23
    10ce:	e8 07       	cpc	r30, r24
    10d0:	f9 07       	cpc	r31, r25
    10d2:	c0 f0       	brcs	.+48     	; 0x1104 <__fp_cmp+0x46>
    10d4:	12 16       	cp	r1, r18
    10d6:	13 06       	cpc	r1, r19
    10d8:	e4 07       	cpc	r30, r20
    10da:	f5 07       	cpc	r31, r21
    10dc:	98 f0       	brcs	.+38     	; 0x1104 <__fp_cmp+0x46>
    10de:	62 1b       	sub	r22, r18
    10e0:	73 0b       	sbc	r23, r19
    10e2:	84 0b       	sbc	r24, r20
    10e4:	95 0b       	sbc	r25, r21
    10e6:	39 f4       	brne	.+14     	; 0x10f6 <__fp_cmp+0x38>
    10e8:	0a 26       	eor	r0, r26
    10ea:	61 f0       	breq	.+24     	; 0x1104 <__fp_cmp+0x46>
    10ec:	23 2b       	or	r18, r19
    10ee:	24 2b       	or	r18, r20
    10f0:	25 2b       	or	r18, r21
    10f2:	21 f4       	brne	.+8      	; 0x10fc <__fp_cmp+0x3e>
    10f4:	08 95       	ret
    10f6:	0a 26       	eor	r0, r26
    10f8:	09 f4       	brne	.+2      	; 0x10fc <__fp_cmp+0x3e>
    10fa:	a1 40       	sbci	r26, 0x01	; 1
    10fc:	a6 95       	lsr	r26
    10fe:	8f ef       	ldi	r24, 0xFF	; 255
    1100:	81 1d       	adc	r24, r1
    1102:	81 1d       	adc	r24, r1
    1104:	08 95       	ret

00001106 <__fp_inf>:
    1106:	97 f9       	bld	r25, 7
    1108:	9f 67       	ori	r25, 0x7F	; 127
    110a:	80 e8       	ldi	r24, 0x80	; 128
    110c:	70 e0       	ldi	r23, 0x00	; 0
    110e:	60 e0       	ldi	r22, 0x00	; 0
    1110:	08 95       	ret

00001112 <__fp_nan>:
    1112:	9f ef       	ldi	r25, 0xFF	; 255
    1114:	80 ec       	ldi	r24, 0xC0	; 192
    1116:	08 95       	ret

00001118 <__fp_pscA>:
    1118:	00 24       	eor	r0, r0
    111a:	0a 94       	dec	r0
    111c:	16 16       	cp	r1, r22
    111e:	17 06       	cpc	r1, r23
    1120:	18 06       	cpc	r1, r24
    1122:	09 06       	cpc	r0, r25
    1124:	08 95       	ret

00001126 <__fp_pscB>:
    1126:	00 24       	eor	r0, r0
    1128:	0a 94       	dec	r0
    112a:	12 16       	cp	r1, r18
    112c:	13 06       	cpc	r1, r19
    112e:	14 06       	cpc	r1, r20
    1130:	05 06       	cpc	r0, r21
    1132:	08 95       	ret

00001134 <__fp_round>:
    1134:	09 2e       	mov	r0, r25
    1136:	03 94       	inc	r0
    1138:	00 0c       	add	r0, r0
    113a:	11 f4       	brne	.+4      	; 0x1140 <__fp_round+0xc>
    113c:	88 23       	and	r24, r24
    113e:	52 f0       	brmi	.+20     	; 0x1154 <__fp_round+0x20>
    1140:	bb 0f       	add	r27, r27
    1142:	40 f4       	brcc	.+16     	; 0x1154 <__fp_round+0x20>
    1144:	bf 2b       	or	r27, r31
    1146:	11 f4       	brne	.+4      	; 0x114c <__fp_round+0x18>
    1148:	60 ff       	sbrs	r22, 0
    114a:	04 c0       	rjmp	.+8      	; 0x1154 <__fp_round+0x20>
    114c:	6f 5f       	subi	r22, 0xFF	; 255
    114e:	7f 4f       	sbci	r23, 0xFF	; 255
    1150:	8f 4f       	sbci	r24, 0xFF	; 255
    1152:	9f 4f       	sbci	r25, 0xFF	; 255
    1154:	08 95       	ret

00001156 <__fp_split3>:
    1156:	57 fd       	sbrc	r21, 7
    1158:	90 58       	subi	r25, 0x80	; 128
    115a:	44 0f       	add	r20, r20
    115c:	55 1f       	adc	r21, r21
    115e:	59 f0       	breq	.+22     	; 0x1176 <__fp_splitA+0x10>
    1160:	5f 3f       	cpi	r21, 0xFF	; 255
    1162:	71 f0       	breq	.+28     	; 0x1180 <__fp_splitA+0x1a>
    1164:	47 95       	ror	r20

00001166 <__fp_splitA>:
    1166:	88 0f       	add	r24, r24
    1168:	97 fb       	bst	r25, 7
    116a:	99 1f       	adc	r25, r25
    116c:	61 f0       	breq	.+24     	; 0x1186 <__fp_splitA+0x20>
    116e:	9f 3f       	cpi	r25, 0xFF	; 255
    1170:	79 f0       	breq	.+30     	; 0x1190 <__fp_splitA+0x2a>
    1172:	87 95       	ror	r24
    1174:	08 95       	ret
    1176:	12 16       	cp	r1, r18
    1178:	13 06       	cpc	r1, r19
    117a:	14 06       	cpc	r1, r20
    117c:	55 1f       	adc	r21, r21
    117e:	f2 cf       	rjmp	.-28     	; 0x1164 <__fp_split3+0xe>
    1180:	46 95       	lsr	r20
    1182:	f1 df       	rcall	.-30     	; 0x1166 <__fp_splitA>
    1184:	08 c0       	rjmp	.+16     	; 0x1196 <__fp_splitA+0x30>
    1186:	16 16       	cp	r1, r22
    1188:	17 06       	cpc	r1, r23
    118a:	18 06       	cpc	r1, r24
    118c:	99 1f       	adc	r25, r25
    118e:	f1 cf       	rjmp	.-30     	; 0x1172 <__fp_splitA+0xc>
    1190:	86 95       	lsr	r24
    1192:	71 05       	cpc	r23, r1
    1194:	61 05       	cpc	r22, r1
    1196:	08 94       	sec
    1198:	08 95       	ret

0000119a <__fp_zero>:
    119a:	e8 94       	clt

0000119c <__fp_szero>:
    119c:	bb 27       	eor	r27, r27
    119e:	66 27       	eor	r22, r22
    11a0:	77 27       	eor	r23, r23
    11a2:	cb 01       	movw	r24, r22
    11a4:	97 f9       	bld	r25, 7
    11a6:	08 95       	ret

000011a8 <__gesf2>:
    11a8:	8a df       	rcall	.-236    	; 0x10be <__fp_cmp>
    11aa:	08 f4       	brcc	.+2      	; 0x11ae <__gesf2+0x6>
    11ac:	8f ef       	ldi	r24, 0xFF	; 255
    11ae:	08 95       	ret

000011b0 <__mulsf3>:
    11b0:	0b d0       	rcall	.+22     	; 0x11c8 <__mulsf3x>
    11b2:	c0 cf       	rjmp	.-128    	; 0x1134 <__fp_round>
    11b4:	b1 df       	rcall	.-158    	; 0x1118 <__fp_pscA>
    11b6:	28 f0       	brcs	.+10     	; 0x11c2 <__mulsf3+0x12>
    11b8:	b6 df       	rcall	.-148    	; 0x1126 <__fp_pscB>
    11ba:	18 f0       	brcs	.+6      	; 0x11c2 <__mulsf3+0x12>
    11bc:	95 23       	and	r25, r21
    11be:	09 f0       	breq	.+2      	; 0x11c2 <__mulsf3+0x12>
    11c0:	a2 cf       	rjmp	.-188    	; 0x1106 <__fp_inf>
    11c2:	a7 cf       	rjmp	.-178    	; 0x1112 <__fp_nan>
    11c4:	11 24       	eor	r1, r1
    11c6:	ea cf       	rjmp	.-44     	; 0x119c <__fp_szero>

000011c8 <__mulsf3x>:
    11c8:	c6 df       	rcall	.-116    	; 0x1156 <__fp_split3>
    11ca:	a0 f3       	brcs	.-24     	; 0x11b4 <__mulsf3+0x4>

000011cc <__mulsf3_pse>:
    11cc:	95 9f       	mul	r25, r21
    11ce:	d1 f3       	breq	.-12     	; 0x11c4 <__mulsf3+0x14>
    11d0:	95 0f       	add	r25, r21
    11d2:	50 e0       	ldi	r21, 0x00	; 0
    11d4:	55 1f       	adc	r21, r21
    11d6:	62 9f       	mul	r22, r18
    11d8:	f0 01       	movw	r30, r0
    11da:	72 9f       	mul	r23, r18
    11dc:	bb 27       	eor	r27, r27
    11de:	f0 0d       	add	r31, r0
    11e0:	b1 1d       	adc	r27, r1
    11e2:	63 9f       	mul	r22, r19
    11e4:	aa 27       	eor	r26, r26
    11e6:	f0 0d       	add	r31, r0
    11e8:	b1 1d       	adc	r27, r1
    11ea:	aa 1f       	adc	r26, r26
    11ec:	64 9f       	mul	r22, r20
    11ee:	66 27       	eor	r22, r22
    11f0:	b0 0d       	add	r27, r0
    11f2:	a1 1d       	adc	r26, r1
    11f4:	66 1f       	adc	r22, r22
    11f6:	82 9f       	mul	r24, r18
    11f8:	22 27       	eor	r18, r18
    11fa:	b0 0d       	add	r27, r0
    11fc:	a1 1d       	adc	r26, r1
    11fe:	62 1f       	adc	r22, r18
    1200:	73 9f       	mul	r23, r19
    1202:	b0 0d       	add	r27, r0
    1204:	a1 1d       	adc	r26, r1
    1206:	62 1f       	adc	r22, r18
    1208:	83 9f       	mul	r24, r19
    120a:	a0 0d       	add	r26, r0
    120c:	61 1d       	adc	r22, r1
    120e:	22 1f       	adc	r18, r18
    1210:	74 9f       	mul	r23, r20
    1212:	33 27       	eor	r19, r19
    1214:	a0 0d       	add	r26, r0
    1216:	61 1d       	adc	r22, r1
    1218:	23 1f       	adc	r18, r19
    121a:	84 9f       	mul	r24, r20
    121c:	60 0d       	add	r22, r0
    121e:	21 1d       	adc	r18, r1
    1220:	82 2f       	mov	r24, r18
    1222:	76 2f       	mov	r23, r22
    1224:	6a 2f       	mov	r22, r26
    1226:	11 24       	eor	r1, r1
    1228:	9f 57       	subi	r25, 0x7F	; 127
    122a:	50 40       	sbci	r21, 0x00	; 0
    122c:	8a f0       	brmi	.+34     	; 0x1250 <__mulsf3_pse+0x84>
    122e:	e1 f0       	breq	.+56     	; 0x1268 <__mulsf3_pse+0x9c>
    1230:	88 23       	and	r24, r24
    1232:	4a f0       	brmi	.+18     	; 0x1246 <__mulsf3_pse+0x7a>
    1234:	ee 0f       	add	r30, r30
    1236:	ff 1f       	adc	r31, r31
    1238:	bb 1f       	adc	r27, r27
    123a:	66 1f       	adc	r22, r22
    123c:	77 1f       	adc	r23, r23
    123e:	88 1f       	adc	r24, r24
    1240:	91 50       	subi	r25, 0x01	; 1
    1242:	50 40       	sbci	r21, 0x00	; 0
    1244:	a9 f7       	brne	.-22     	; 0x1230 <__mulsf3_pse+0x64>
    1246:	9e 3f       	cpi	r25, 0xFE	; 254
    1248:	51 05       	cpc	r21, r1
    124a:	70 f0       	brcs	.+28     	; 0x1268 <__mulsf3_pse+0x9c>
    124c:	5c cf       	rjmp	.-328    	; 0x1106 <__fp_inf>
    124e:	a6 cf       	rjmp	.-180    	; 0x119c <__fp_szero>
    1250:	5f 3f       	cpi	r21, 0xFF	; 255
    1252:	ec f3       	brlt	.-6      	; 0x124e <__mulsf3_pse+0x82>
    1254:	98 3e       	cpi	r25, 0xE8	; 232
    1256:	dc f3       	brlt	.-10     	; 0x124e <__mulsf3_pse+0x82>
    1258:	86 95       	lsr	r24
    125a:	77 95       	ror	r23
    125c:	67 95       	ror	r22
    125e:	b7 95       	ror	r27
    1260:	f7 95       	ror	r31
    1262:	e7 95       	ror	r30
    1264:	9f 5f       	subi	r25, 0xFF	; 255
    1266:	c1 f7       	brne	.-16     	; 0x1258 <__mulsf3_pse+0x8c>
    1268:	fe 2b       	or	r31, r30
    126a:	88 0f       	add	r24, r24
    126c:	91 1d       	adc	r25, r1
    126e:	96 95       	lsr	r25
    1270:	87 95       	ror	r24
    1272:	97 f9       	bld	r25, 7
    1274:	08 95       	ret

00001276 <__mulsi3>:
    1276:	db 01       	movw	r26, r22
    1278:	8f 93       	push	r24
    127a:	9f 93       	push	r25
    127c:	73 d0       	rcall	.+230    	; 0x1364 <__muluhisi3>
    127e:	bf 91       	pop	r27
    1280:	af 91       	pop	r26
    1282:	a2 9f       	mul	r26, r18
    1284:	80 0d       	add	r24, r0
    1286:	91 1d       	adc	r25, r1
    1288:	a3 9f       	mul	r26, r19
    128a:	90 0d       	add	r25, r0
    128c:	b2 9f       	mul	r27, r18
    128e:	90 0d       	add	r25, r0
    1290:	11 24       	eor	r1, r1
    1292:	08 95       	ret

00001294 <__divmodhi4>:
    1294:	97 fb       	bst	r25, 7
    1296:	07 2e       	mov	r0, r23
    1298:	16 f4       	brtc	.+4      	; 0x129e <__divmodhi4+0xa>
    129a:	00 94       	com	r0
    129c:	06 d0       	rcall	.+12     	; 0x12aa <__divmodhi4_neg1>
    129e:	77 fd       	sbrc	r23, 7
    12a0:	08 d0       	rcall	.+16     	; 0x12b2 <__divmodhi4_neg2>
    12a2:	6a d0       	rcall	.+212    	; 0x1378 <__udivmodhi4>
    12a4:	07 fc       	sbrc	r0, 7
    12a6:	05 d0       	rcall	.+10     	; 0x12b2 <__divmodhi4_neg2>
    12a8:	3e f4       	brtc	.+14     	; 0x12b8 <__divmodhi4_exit>

000012aa <__divmodhi4_neg1>:
    12aa:	90 95       	com	r25
    12ac:	81 95       	neg	r24
    12ae:	9f 4f       	sbci	r25, 0xFF	; 255
    12b0:	08 95       	ret

000012b2 <__divmodhi4_neg2>:
    12b2:	70 95       	com	r23
    12b4:	61 95       	neg	r22
    12b6:	7f 4f       	sbci	r23, 0xFF	; 255

000012b8 <__divmodhi4_exit>:
    12b8:	08 95       	ret

000012ba <__udivmodsi4>:
    12ba:	a1 e2       	ldi	r26, 0x21	; 33
    12bc:	1a 2e       	mov	r1, r26
    12be:	aa 1b       	sub	r26, r26
    12c0:	bb 1b       	sub	r27, r27
    12c2:	fd 01       	movw	r30, r26
    12c4:	0d c0       	rjmp	.+26     	; 0x12e0 <__udivmodsi4_ep>

000012c6 <__udivmodsi4_loop>:
    12c6:	aa 1f       	adc	r26, r26
    12c8:	bb 1f       	adc	r27, r27
    12ca:	ee 1f       	adc	r30, r30
    12cc:	ff 1f       	adc	r31, r31
    12ce:	a2 17       	cp	r26, r18
    12d0:	b3 07       	cpc	r27, r19
    12d2:	e4 07       	cpc	r30, r20
    12d4:	f5 07       	cpc	r31, r21
    12d6:	20 f0       	brcs	.+8      	; 0x12e0 <__udivmodsi4_ep>
    12d8:	a2 1b       	sub	r26, r18
    12da:	b3 0b       	sbc	r27, r19
    12dc:	e4 0b       	sbc	r30, r20
    12de:	f5 0b       	sbc	r31, r21

000012e0 <__udivmodsi4_ep>:
    12e0:	66 1f       	adc	r22, r22
    12e2:	77 1f       	adc	r23, r23
    12e4:	88 1f       	adc	r24, r24
    12e6:	99 1f       	adc	r25, r25
    12e8:	1a 94       	dec	r1
    12ea:	69 f7       	brne	.-38     	; 0x12c6 <__udivmodsi4_loop>
    12ec:	60 95       	com	r22
    12ee:	70 95       	com	r23
    12f0:	80 95       	com	r24
    12f2:	90 95       	com	r25
    12f4:	9b 01       	movw	r18, r22
    12f6:	ac 01       	movw	r20, r24
    12f8:	bd 01       	movw	r22, r26
    12fa:	cf 01       	movw	r24, r30
    12fc:	08 95       	ret

000012fe <__divmodsi4>:
    12fe:	05 2e       	mov	r0, r21
    1300:	97 fb       	bst	r25, 7
    1302:	16 f4       	brtc	.+4      	; 0x1308 <__divmodsi4+0xa>
    1304:	00 94       	com	r0
    1306:	0f d0       	rcall	.+30     	; 0x1326 <__negsi2>
    1308:	57 fd       	sbrc	r21, 7
    130a:	05 d0       	rcall	.+10     	; 0x1316 <__divmodsi4_neg2>
    130c:	d6 df       	rcall	.-84     	; 0x12ba <__udivmodsi4>
    130e:	07 fc       	sbrc	r0, 7
    1310:	02 d0       	rcall	.+4      	; 0x1316 <__divmodsi4_neg2>
    1312:	46 f4       	brtc	.+16     	; 0x1324 <__divmodsi4_exit>
    1314:	08 c0       	rjmp	.+16     	; 0x1326 <__negsi2>

00001316 <__divmodsi4_neg2>:
    1316:	50 95       	com	r21
    1318:	40 95       	com	r20
    131a:	30 95       	com	r19
    131c:	21 95       	neg	r18
    131e:	3f 4f       	sbci	r19, 0xFF	; 255
    1320:	4f 4f       	sbci	r20, 0xFF	; 255
    1322:	5f 4f       	sbci	r21, 0xFF	; 255

00001324 <__divmodsi4_exit>:
    1324:	08 95       	ret

00001326 <__negsi2>:
    1326:	90 95       	com	r25
    1328:	80 95       	com	r24
    132a:	70 95       	com	r23
    132c:	61 95       	neg	r22
    132e:	7f 4f       	sbci	r23, 0xFF	; 255
    1330:	8f 4f       	sbci	r24, 0xFF	; 255
    1332:	9f 4f       	sbci	r25, 0xFF	; 255
    1334:	08 95       	ret

00001336 <__tablejump2__>:
    1336:	ee 0f       	add	r30, r30
    1338:	ff 1f       	adc	r31, r31
    133a:	88 1f       	adc	r24, r24
    133c:	8b bf       	out	0x3b, r24	; 59
    133e:	07 90       	elpm	r0, Z+
    1340:	f6 91       	elpm	r31, Z
    1342:	e0 2d       	mov	r30, r0
    1344:	19 94       	eijmp

00001346 <__umulhisi3>:
    1346:	a2 9f       	mul	r26, r18
    1348:	b0 01       	movw	r22, r0
    134a:	b3 9f       	mul	r27, r19
    134c:	c0 01       	movw	r24, r0
    134e:	a3 9f       	mul	r26, r19
    1350:	70 0d       	add	r23, r0
    1352:	81 1d       	adc	r24, r1
    1354:	11 24       	eor	r1, r1
    1356:	91 1d       	adc	r25, r1
    1358:	b2 9f       	mul	r27, r18
    135a:	70 0d       	add	r23, r0
    135c:	81 1d       	adc	r24, r1
    135e:	11 24       	eor	r1, r1
    1360:	91 1d       	adc	r25, r1
    1362:	08 95       	ret

00001364 <__muluhisi3>:
    1364:	f0 df       	rcall	.-32     	; 0x1346 <__umulhisi3>
    1366:	a5 9f       	mul	r26, r21
    1368:	90 0d       	add	r25, r0
    136a:	b4 9f       	mul	r27, r20
    136c:	90 0d       	add	r25, r0
    136e:	a4 9f       	mul	r26, r20
    1370:	80 0d       	add	r24, r0
    1372:	91 1d       	adc	r25, r1
    1374:	11 24       	eor	r1, r1
    1376:	08 95       	ret

00001378 <__udivmodhi4>:
    1378:	aa 1b       	sub	r26, r26
    137a:	bb 1b       	sub	r27, r27
    137c:	51 e1       	ldi	r21, 0x11	; 17
    137e:	07 c0       	rjmp	.+14     	; 0x138e <__udivmodhi4_ep>

00001380 <__udivmodhi4_loop>:
    1380:	aa 1f       	adc	r26, r26
    1382:	bb 1f       	adc	r27, r27
    1384:	a6 17       	cp	r26, r22
    1386:	b7 07       	cpc	r27, r23
    1388:	10 f0       	brcs	.+4      	; 0x138e <__udivmodhi4_ep>
    138a:	a6 1b       	sub	r26, r22
    138c:	b7 0b       	sbc	r27, r23

0000138e <__udivmodhi4_ep>:
    138e:	88 1f       	adc	r24, r24
    1390:	99 1f       	adc	r25, r25
    1392:	5a 95       	dec	r21
    1394:	a9 f7       	brne	.-22     	; 0x1380 <__udivmodhi4_loop>
    1396:	80 95       	com	r24
    1398:	90 95       	com	r25
    139a:	bc 01       	movw	r22, r24
    139c:	cd 01       	movw	r24, r26
    139e:	08 95       	ret

000013a0 <_exit>:
    13a0:	f8 94       	cli

000013a2 <__stop_program>:
    13a2:	ff cf       	rjmp	.-2      	; 0x13a2 <__stop_program>
